@using Battlegrounds.Core.Services
@using Microsoft.Extensions.Logging
@page "/skirmish"

@inject ILobbyService LobbyService
@inject IUserService UserService
@inject IScenarioService ScenarioService
@inject IGameService GameService
@inject ILogger<Skirmish> Logger
@inject NavigationManager NavManager

<h1>Skirmish</h1>

@if(lobbies is null) {
    <p>Loading...</p>
} else {
    @foreach (var lobby in lobbies) {
        
    }
}

<button @onclick=OnRefresh>Refresh</button>
<button @onclick=OnJoin>Join</button>
<button @onclick="() => showHostModal = true">Host</button>

<Modal IsVisible="@showHostModal" Title="Host Skirmish Lobby" OnClose="() => showHostModal = false">
    <button type="submit" @onclick="OnHost">Host Game</button>
</Modal>

@code {

    private bool showHostModal = false;
    private ILobbyService.LobbyDTO[]? lobbies = null;

    protected override async Task OnInitializedAsync() {

        lobbies = await LobbyService.GetLobbiesAsync();

        await base.OnInitializedAsync();

    }

    private async Task OnRefresh() {
        lobbies = await LobbyService.GetLobbiesAsync();
    }

    private async Task OnJoin() {

        var lobby = await LobbyService.JoinLobby(UserService.UserContext, Guid.Empty, "");
        if (lobby is null) {
            return;
        }

        // TODO: Redirect

    }

    private async Task OnHost() {

        var game = GameService.FromName("");
        if (game is null) {
            return;
        }

        var scenario = ScenarioService.GetScenario(game, "");
        if (scenario is null) {
            return;
        }

        var settings = new Dictionary<string, string>(); // TODO: Get from preferences

        var lobby = await LobbyService.HostLobby(UserService.UserContext, "", "", "", scenario, settings); 
        if (lobby is null) {
            return;
        }

        NavManager.NavigateTo($"/skirmish/lobby/{lobby.Guid}");

    }

}
