using Battlegrounds.Core.Companies;
using Battlegrounds.Core.Games.Gamemodes;
using Battlegrounds.Core.Games.Scenarios;
using Battlegrounds.Core.Games.Scripts;
using Battlegrounds.Core.Lobbies;
using Battlegrounds.Core.Matches;

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace Battlegrounds.Core.Services.Standard;

public class MatchModBuilderService(
    IGamemodeService gamemodeService,
    ICompanyService companyService,
    IFileSystemService fileSystemService,
    IServiceProvider serviceProvider,
    ILogger<MatchModBuilderService> logger) : IMatchModBuilderService {
    
    private readonly ILogger<MatchModBuilderService> _logger = logger;
    private readonly IGamemodeService _gamemodeService = gamemodeService;
    private readonly ICompanyService _companyService = companyService;
    private readonly IFileSystemService _fileSystemService = fileSystemService;
    private readonly IServiceProvider _serviceProvider = serviceProvider;

    public async Task<bool> BuildMatchGamemode(ILobby lobby) {

        IDictionary<ulong, ICompany> participantCompanies = await lobby.DownloadCompaniesAsync();
        if (participantCompanies is null) {
            _logger.LogCritical("Failed finding opponent companies");
            return false;
        }

        int teamPlayerCount = lobby.Scenario.PlayerCount / 2;

        var team1Companies = new ICompany[teamPlayerCount];
        if (!AssignCompanies(participantCompanies, lobby.Team1, team1Companies)) {
            _logger.LogCritical("Failed assigning companies for team 1");
            return false;
        }

        var team2Companies = new ICompany[teamPlayerCount];
        if (!AssignCompanies(participantCompanies, lobby.Team2, team2Companies)) {
            _logger.LogCritical("Failed assigning companies for team 2");
            return false;
        }

        if (!lobby.Settings.TryGetValue("gamemode", out string? gamemodeName)) {
            _logger.LogCritical("Failed finding gamemode");
            return false;
        }

        var gamemode = _gamemodeService.GetGamemode(lobby.Game, gamemodeName);
        if (gamemode is null) {
            _logger.LogCritical("Invalid gamemode {gamemode} - not found", gamemodeName);
            return false;
        }

        var matchData = BuildMatchData(lobby, gamemode, team1Companies, team2Companies);

        var tempScarFile = _fileSystemService.OpenWriteTempFile("match_data.scar");
        if (tempScarFile is null) {
            _logger.LogCritical("Failed creating 'match_data.scar'");
            return false;
        }

        // Write the custom scar file
        using (var matchDataScarWriter = new ScarScriptWriter(tempScarFile)) {
            matchDataScarWriter.Comment("""
                Scar file auto-generated by the Battlegrounds dynamic gamemode builder
                DO NOT EDIT THIS FILE
                """);

            using var buildScope = _serviceProvider.CreateScope();
            MatchDataBuilder dataBuilder = buildScope.ServiceProvider.GetRequiredService<MatchDataBuilder>();
            if (!dataBuilder.Build(matchDataScarWriter, matchData)) {
                _logger.LogCritical("Failed creating matchdata");
                return false;
            }

        }

        // TODO: Collect script files

        // TODO: Build archive

        return true;

    }

    private bool AssignCompanies(IDictionary<ulong, ICompany> downloadedCompanies, ILobbyTeam team, ICompany[] companies) {
        int j = 0;
        for (int i = 0; i < team.Slots.Length && j < companies.Length; i++) {
            var occupant = team.Slots[i].Player;
            if (occupant is null)
                continue;
            if (downloadedCompanies.TryGetValue(occupant.PlayerId, out ICompany? company)) {
                companies[j++] = company;
                continue;
            }
            var localCompany = _companyService.GetCompany(occupant.CompanyId);
            if (localCompany is null)
                return false;
            companies[j++] = localCompany;
        }
        return true;
    }

    private MatchData BuildMatchData(ILobby lobby, IGamemode gamemode, ICompany[] teamACompanies, ICompany[] teamBCompanies) {

        MatchPlayer[] teamAPlayers = new MatchPlayer[teamACompanies.Length];
        AssignTeamPlayers(lobby.Team1, teamAPlayers, teamACompanies);

        MatchPlayer[] teamBPlayers = new MatchPlayer[teamBCompanies.Length];
        AssignTeamPlayers(lobby.Team2, teamBPlayers, teamBCompanies);

        return new MatchData(gamemode, lobby.Scenario, teamAPlayers, teamBPlayers, lobby.Settings);

    }

    private void AssignTeamPlayers(ILobbyTeam team, MatchPlayer[] players, ICompany[] companies) {
        int j = 0;
        for (int i = 0; i < team.Slots.Length && j < companies.Length; i++) {
            var occupant = team.Slots[i].Player;
            if (occupant is null) continue;

            players[j] = new MatchPlayer(j, occupant.PlayerId, companies[j], occupant.Name, team.Slots[i].Difficulty);
            _logger.LogInformation("Assigned player {i} on team {t} : {v}", j, team.Name, players[j]);

            j++;

        }
    }

    public async Task<Stream?> OpenReadGamemodeArchive(Guid guid) {
        return await Task.FromResult<Stream?>(null);
    } 

}
