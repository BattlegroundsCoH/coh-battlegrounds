<?xml version="1.0"?>
<doc>
    <assembly>
        <name>coh2-battlegrounds-bin</name>
    </assembly>
    <members>
        <member name="T:Battlegrounds.Chunk">
            <summary>
            Represents a chunk of data in a <see cref="T:Battlegrounds.ChunkyFile"/>.
            </summary>
        </member>
        <member name="T:Battlegrounds.Chunk.ChunkyType">
            <summary>
            The <see cref="T:Battlegrounds.Chunk"/> type
            </summary>
        </member>
        <member name="F:Battlegrounds.Chunk.ChunkyType.Unknown">
            <summary>
            Unknown (Invalid)
            </summary>
        </member>
        <member name="F:Battlegrounds.Chunk.ChunkyType.FOLD">
            <summary>
            Folder -> Has subtypes
            </summary>
        </member>
        <member name="F:Battlegrounds.Chunk.ChunkyType.DATA">
            <summary>
            Data chunk -> Contains raw data
            </summary>
        </member>
        <member name="P:Battlegrounds.Chunk.Data">
            <summary>
            Raw data contained within the chunk
            </summary>
        </member>
        <member name="P:Battlegrounds.Chunk.Name">
            <summary>
            The name of the chunk
            </summary>
        </member>
        <member name="P:Battlegrounds.Chunk.Descriptor">
            <summary>
            The descriptive text of the chunk
            </summary>
        </member>
        <member name="M:Battlegrounds.Chunk.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:Battlegrounds.Chunk"/> with parent file version supplied
            </summary>
            <param name="chunkyVersion"><see cref="T:Battlegrounds.ChunkyFile"/> parent version</param>
        </member>
        <member name="P:Battlegrounds.Chunk.Item(System.String)">
            <summary>
            Lookup a root chunk by name in the chunk file
            </summary>
            <param name="name">The name of the chunk to find</param>
            <returns>The first chunk with name or null</returns>
        </member>
        <member name="M:Battlegrounds.Chunk.ReadChunk(System.IO.BinaryReader)">
            <summary>
            Read a chunk from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="stream">Stream to read chunk data from</param>
        </member>
        <member name="T:Battlegrounds.ChunkyFile">
            <summary>
            Represents a chunky file containing <see cref="T:Battlegrounds.Chunk"/> data.
            </summary>
        </member>
        <member name="M:Battlegrounds.ChunkyFile.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.ChunkyFile.LoadFile(System.String)">
            <summary>
            
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.ChunkyFile.LoadFile(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.ChunkyFile.Dump">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.ChunkyFile.Dump(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:Battlegrounds.ChunkyFile.Item(System.String)">
            <summary>
            Lookup a root chunk by name in the chunk file
            </summary>
            <param name="name">The name of the chunk to find</param>
            <returns>The first chunk with name or null</returns>
        </member>
        <member name="T:Battlegrounds.Compiler.CompanyCompiler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Compiler.CompanyCompiler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Compiler.CompanyCompiler.CompileToLua(Battlegrounds.Game.Battlegrounds.Company,System.Int32)">
            <summary>
            
            </summary>
            <param name="company"></param>
            <param name="indent"></param>
        </member>
        <member name="M:Battlegrounds.Compiler.CompanyCompiler.CompileUnit(Battlegrounds.Util.TxtBuilder,Battlegrounds.Game.Gameplay.Squad)">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <param name="squad"></param>
        </member>
        <member name="T:Battlegrounds.Compiler.SessionCompiler`1">
            <summary>
            Basic <see cref="T:Battlegrounds.Game.Battlegrounds.Session"/> to Lua code compiler. Can be inherited to add custom features.
            </summary>
            <typeparam name="T">The type of <see cref="T:Battlegrounds.Compiler.CompanyCompiler"/> to use to compile a <see cref="T:Battlegrounds.Game.Battlegrounds.Company"/> to Lua code.</typeparam>
        </member>
        <member name="M:Battlegrounds.Compiler.SessionCompiler`1.#ctor">
            <summary>
            Create a new <see cref="T:Battlegrounds.Compiler.SessionCompiler`1"/> instance.
            </summary>
        </member>
        <member name="M:Battlegrounds.Compiler.SessionCompiler`1.CompileSession(Battlegrounds.Game.Battlegrounds.Session)">
            <summary>
            Compile a <see cref="T:Battlegrounds.Game.Battlegrounds.Session"/> into Lua Source Code.
            </summary>
            <param name="session">The <see cref="T:Battlegrounds.Game.Battlegrounds.Session"/> instance to compile.</param>
            <returns>A formatted string containing Lua Source Code.</returns>
        </member>
        <member name="M:Battlegrounds.Compiler.SessionCompiler`1.WriteSetting(Battlegrounds.Util.TxtBuilder,System.String,System.Object)">
            <summary>
            Writes a setting to the <see cref="T:Battlegrounds.Util.TxtBuilder"/>.
            </summary>
            <param name="lua">The lua code to append setting to</param>
            <param name="setting">The name of the setting to set</param>
            <param name="value">The C# value of the setting to set. The value is automatically converted to its Lua Source Code equivalent</param>
        </member>
        <member name="T:Battlegrounds.Compiler.WinconditionCompiler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Compiler.WinconditionCompiler.CompileToSga(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="workdir"></param>
            <param name="companyfile"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Compiler.WinconditionCompiler.InvokeArchiver(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="archdef"></param>
            <param name="relativepath"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Game.Battlegrounds.Company">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.Company.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.Company.Army">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.Company.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.Company.Units">
            <summary>
            The units of the company
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Battlegrounds.Company.#ctor(Battlegrounds.Steam.SteamUser,System.String,Battlegrounds.Game.Gameplay.Faction)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="name"></param>
            <param name="army"></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Battlegrounds.Game.Battlegrounds.Company.AddSquad(System.String,System.Byte,System.Single,System.String[],System.String[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="bp"></param>
            <param name="vet"></param>
            <param name="vetprog"></param>
            <param name="upgrades"></param>
            <param name="slotitems"></param>
            <param name="verify"></param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Game.Battlegrounds.GameMatch">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.GameMatch.Players">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Battlegrounds.GameMatch.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Battlegrounds.GameMatch.LoadMatch(System.String)">
            <summary>
            
            </summary>
            <param name="replayFilepath"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Game.Battlegrounds.GameMatch.EvaluateResult">
            <summary>
            Evaluate the result of the match based on the replay file
            </summary>
        </member>
        <member name="T:Battlegrounds.Game.Battlegrounds.PlayerResult">
            <summary>
            Class the keeps track of <see cref="T:Battlegrounds.Game.Gameplay.Player"/> data throughout a <see cref="T:Battlegrounds.Game.Battlegrounds.GameMatch"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.PlayerResult.IsOnWinningTeam">
            <summary>
            Was this player on the winning team
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.PlayerResult.TotalLosses">
            <summary>
            The total amount of losses in squads (NOT squad members).
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.PlayerResult.Player">
            <summary>
            The <see cref="P:Battlegrounds.Game.Battlegrounds.PlayerResult.Player"/> the <see cref="T:Battlegrounds.Game.Battlegrounds.PlayerResult"/> data is about.
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Battlegrounds.PlayerResult.#ctor(Battlegrounds.Game.Gameplay.Player)">
            <summary>
            Creates a new result container for the player.
            </summary>
            <param name="player">The player to keep all results about.</param>
        </member>
        <member name="M:Battlegrounds.Game.Battlegrounds.PlayerResult.AddSquad(Battlegrounds.Game.Gameplay.Squad)">
            <summary>
            Add a <see cref="T:Battlegrounds.Game.Gameplay.Squad"/> to the active squad list for the player.
            </summary>
            <param name="squad">The new <see cref="T:Battlegrounds.Game.Gameplay.Squad"/> to add to player squad set</param>
        </member>
        <member name="M:Battlegrounds.Game.Battlegrounds.PlayerResult.RemoveSquad(Battlegrounds.Game.Gameplay.Squad)">
            <summary>
            Remove a squad from the active squad list for the player and move it to the lost squads list.
            </summary>
            <param name="squad">The <see cref="T:Battlegrounds.Game.Gameplay.Squad"/> to remove from the player squad list.</param>
        </member>
        <member name="M:Battlegrounds.Game.Battlegrounds.PlayerResult.AddEntity(Battlegrounds.Game.Gameplay.Entity)">
            <summary>
            
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Battlegrounds.Game.Battlegrounds.PlayerResult.RemoveEntity(Battlegrounds.Game.Gameplay.Entity)">
            <summary>
            
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Battlegrounds.Game.Battlegrounds.PlayerResult.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Game.Battlegrounds.Session">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.Session.Companies">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.Session.Scenario">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.Session.Gamemode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.Session.AllowAI">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.Session.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.Session.SessionID">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Battlegrounds.Session.#ctor(System.String,Battlegrounds.Game.Battlegrounds.Company[],Battlegrounds.Game.Gameplay.Wincondition,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Battlegrounds.Session.AddSetting(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="setting"></param>
            <param name="value"></param>
        </member>
        <member name="M:Battlegrounds.Game.Battlegrounds.Session.CreateSession(System.String,Battlegrounds.Game.Battlegrounds.Company[],Battlegrounds.Game.Gameplay.Wincondition,System.Boolean)">
            <summary>
            
            </summary>
            <param name="scenario"></param>
            <param name="companies"></param>
            <param name="gamemode"></param>
            <param name="enableAI"></param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Game.Battlegrounds.SessionStatus">
            <summary>
            Status code for a <see cref="T:Battlegrounds.Game.Battlegrounds.Session"/> being run in the <see cref="T:Battlegrounds.Game.Battlegrounds.SessionManager"/>.
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Battlegrounds.SessionStatus.S_Invalid">
            <summary>
            Invalid session (Session was null)
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Battlegrounds.SessionStatus.S_Success">
            <summary>
            Session was completed without errors
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Battlegrounds.SessionStatus.S_Compiling">
            <summary>
            The session is currently compiling
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Battlegrounds.SessionStatus.S_FailedCompile">
            <summary>
            The session failed to compile
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Battlegrounds.SessionStatus.S_FailedPlay">
            <summary>
            The session failed to play
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Battlegrounds.SessionStatus.S_GameNotLaunched">
            <summary>
            The game was not launched
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Battlegrounds.SessionStatus.S_GamePlayedWithoutCrash">
            <summary>
            The game was played without causing a crash
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Battlegrounds.SessionStatus.S_Analyzing">
            <summary>
            The played match is currently being analyzed
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Battlegrounds.SessionStatus.S_AnalysisFailed">
            <summary>
            The analysis of the match failed
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Battlegrounds.SessionStatus.S_NoPlayback">
            <summary>
            The playback file was found
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Battlegrounds.SessionStatus.S_Playing">
            <summary>
            The session is currently being played.
            </summary>
        </member>
        <member name="T:Battlegrounds.Game.Battlegrounds.SessionManager">
            <summary>
            Static management class for playing a <see cref="T:Battlegrounds.Game.Battlegrounds.Session"/> in the proper order.
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.SessionManager.ActiveSession">
            <summary>
            The instance of the currently active <see cref="T:Battlegrounds.Game.Battlegrounds.Session"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Battlegrounds.SessionManager.SessionStatus">
            <summary>
            The current status of the <see cref="T:Battlegrounds.Game.Battlegrounds.SessionManager"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Battlegrounds.SessionManager.PlaySession``2(Battlegrounds.Game.Battlegrounds.Session,System.Action{Battlegrounds.Game.Battlegrounds.SessionStatus,Battlegrounds.Game.Battlegrounds.Session},System.Action{Battlegrounds.Game.Battlegrounds.GameMatch})">
            <summary>
            Plays a <see cref="T:Battlegrounds.Game.Battlegrounds.Session"/> in a controlled flow of execution wherein callbacks are used to report on the status of the <see cref="T:Battlegrounds.Game.Battlegrounds.Session"/>. Once done, a <see cref="T:Battlegrounds.Game.Battlegrounds.GameMatch"/> instance can be retrieved to see match results.
            </summary>
            <typeparam name="TSessionCompilerType">The session compiler type</typeparam>
            <typeparam name="TCompanyCompilerType">The company compiler type</typeparam>
            <param name="session">The <see cref="T:Battlegrounds.Game.Battlegrounds.Session"/> instance to play and analyze.</param>
            <param name="statusChangedCallback">Callback for whenever the status of the play session has changed</param>
            <param name="matchAnalyzedCallback">Callback called only when the match has been played and analyzed</param>
        </member>
        <member name="T:Battlegrounds.Game.CoH2Launcher">
            <summary>
            Static class for launching Company of Heroes 2 with the proper set of arguments.
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.CoH2Launcher.GameAppID">
            <summary>
            The steam app ID for Company of Heroes 2.
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.CoH2Launcher.Launch">
            <summary>
            Launch Company of Heroes 2 through Steam
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.CoH2Launcher.WatchProcess">
            <summary>
            Watch the RelicCoH2.exe process
            </summary>
            <returns>Integer value representing the result of the operation (0 = OK, 1 = Not found)</returns>
        </member>
        <member name="T:Battlegrounds.Game.Database.Blueprint">
            <summary>
            Represents a <see cref="T:Battlegrounds.Game.Database.Blueprint"/> for the behaviour of instances within Company of Heroes 2. Implements <see cref="T:Battlegrounds.Game.Database.json.IJsonObject"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Database.Blueprint.PBGID">
            <summary>
            The unique PropertyBagGroupdID assigned to this blueprint.
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Database.Blueprint.Name">
            <summary>
            The name of the <see cref="T:Battlegrounds.Game.Database.Blueprint"/> file in the game files (See the instances folder in the mod tools).
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Database.Blueprint.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Battlegrounds.Game.Database.BlueprintType">
            <summary>
            The type a <see cref="T:Battlegrounds.Game.Database.Blueprint"/> may represent in the <see cref="T:Battlegrounds.Game.Database.BlueprintManager"/>.
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Database.BlueprintType.ABP">
            <summary>
            Ability Blueprint
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Database.BlueprintType.UBP">
            <summary>
            Upgrade Blueprint
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Database.BlueprintType.CBP">
            <summary>
            Commander Blueprint
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Database.BlueprintType.IBP">
            <summary>
            Slot Item Blueprint
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Database.BlueprintType.EBP">
            <summary>
            Entity Blueprint
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.Database.BlueprintType.SBP">
            <summary>
            Squad Blueprint
            </summary>
        </member>
        <member name="T:Battlegrounds.Game.Database.BlueprintManager">
            <summary>
            Database over all relevant blueprints in use
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Database.BlueprintManager.CreateDatabase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Database.BlueprintManager.LoadJsonDatabase(System.String,Battlegrounds.Game.Database.BlueprintType)">
            <summary>
            
            </summary>
            <param name="jsonfile"></param>
            <param name="bType"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Game.Database.BlueprintManager.FromPbgId(System.UInt16,Battlegrounds.Game.Database.BlueprintType)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="bType"></param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"/>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Game.Database.BlueprintManager.FromBlueprintName(System.String,Battlegrounds.Game.Database.BlueprintType)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="bType"></param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Game.Database.json.IJsonElement">
            <summary>
            Interface of a Json element.
            </summary>
        </member>
        <member name="T:Battlegrounds.Game.Database.json.JsonArray">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Database.json.JsonArray.First">
            <summary>
            The first <see cref="T:Battlegrounds.Game.Database.json.IJsonElement"/> in the array
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Database.json.JsonArray.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Database.json.JsonArray.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Battlegrounds.Game.Database.json.JsonArray.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Database.json.JsonArray.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Database.json.JsonArray.Add(Battlegrounds.Game.Database.json.IJsonElement)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Battlegrounds.Game.Database.json.JsonArray.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Database.json.JsonArray.Contains(Battlegrounds.Game.Database.json.IJsonElement)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Game.Database.json.JsonArray.CopyTo(Battlegrounds.Game.Database.json.IJsonElement[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Battlegrounds.Game.Database.json.JsonArray.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Game.Database.json.JsonArray.IndexOf(Battlegrounds.Game.Database.json.IJsonElement)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Game.Database.json.JsonArray.Insert(System.Int32,Battlegrounds.Game.Database.json.IJsonElement)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Battlegrounds.Game.Database.json.JsonArray.Remove(Battlegrounds.Game.Database.json.IJsonElement)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Game.Database.json.JsonArray.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Battlegrounds.Game.Database.json.JsonArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Game.Database.json.IJsonObject">
            <summary>
            Json interface for converting object to and from a Json object. Implements <see cref="T:Battlegrounds.Game.Database.json.IJsonElement"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Database.json.IJsonObject.Serialize">
            <summary>
            Serialize self into a json object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Game.Database.json.IJsonObject.Deserialize``1(System.String)">
            <summary>
            Derserialize a json string representing an object into the C# requivalent.
            </summary>
            <typeparam name="T">The object type to deserialize to</typeparam>
            <param name="json">The input string to deserialize</param>
            <returns>A deserialized instance of the json input string</returns>
        </member>
        <member name="M:Battlegrounds.Game.Database.json.IJsonObject.Deserialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Derserialize a json string representing an object into the C# requivalent.
            </summary>
            <param name="parsedJson">The parsed input of a json object</param>
            <returns>A deserialized instance of the json input string</returns>
        </member>
        <member name="T:Battlegrounds.Game.Database.json.JsonParser">
            <summary>
            Static utility class for parsing a Json file.
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Database.json.JsonParser.Parse(System.String)">
            <summary>
            Parse a json file (Will only parse it - may parse syntactically incorrect json files!)
            </summary>
            <param name="jsonfile"></param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing all top-level elements in the json file.</returns>
        </member>
        <member name="T:Battlegrounds.Game.Database.SquadBlueprint">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Game.Database.UpgradeBlueprint">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Game.DLCPack">
            <summary>
            Represents a DLC tied to Company of Heroes 2
            </summary>
        </member>
        <member name="T:Battlegrounds.Game.DLCPack.DLCType">
            <summary>
            The type of DLC a <see cref="T:Battlegrounds.Game.DLCPack"/> may be of
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.DLCPack.DLCType.Faction">
            <summary>
            Faction that unlocks and army
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.DLCPack.DLCType.Skin">
            <summary>
            Vehicle Skin
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.DLCPack.DLCType.Commander">
            <summary>
            Ingame commander
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.DLCPack.Name">
            <summary>
            The name of the DLC pack
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.DLCPack.SteamAppID">
            <summary>
            Unique app ID assigned to this pack
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.DLCPack.Type">
            <summary>
            The type of DLC
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.DLCPack.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Battlegrounds.Game.DLCPack.Base">
            <summary>
            The base game (with multiplayer access)
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.DLCPack.WesternFrontArmiesUSA">
            <summary>
            The Western Front Armies (USA)
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.DLCPack.WesternFrontArmiesOKW">
            <summary>
            The Western Front Armies (OKW)
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.DLCPack.UKF">
            <summary>
            The British Forces
            </summary>
        </member>
        <member name="T:Battlegrounds.Game.GameEvent">
            <summary>
            Represents an event that occured in a <see cref="T:Battlegrounds.Game.GameTick"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.GameEvent.FirstPosition">
            <summary>
            The first <see cref="T:Battlegrounds.Game.GamePosition"/> argument given to the <see cref="T:Battlegrounds.Game.GameEvent"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.GameEvent.SecondPosition">
            <summary>
            The second <see cref="T:Battlegrounds.Game.GamePosition"/> argument given to the <see cref="T:Battlegrounds.Game.GameEvent"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.GameEvent.Type">
            <summary>
            The byte representation of the <see cref="T:Battlegrounds.Game.GameEvent"/> type
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.GameEvent.EventType">
            <summary>
            The <see cref="T:Battlegrounds.Game.GameEventType"/> representation of the Type. Make sure the <see cref="T:Battlegrounds.Game.GameEvent"/> is within range before using.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="P:Battlegrounds.Game.GameEvent.PlayerID">
            <summary>
            The byte-ID of the player who triggered or was affected by the <see cref="T:Battlegrounds.Game.GameEvent"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.GameEvent.UnitID">
            <summary>
            The 16-bit ID representation of the affected unit
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.GameEvent.BlueprintID">
            <summary>
            The 32-bit ID of a blueprint ID that was given as argument to the <see cref="T:Battlegrounds.Game.GameEvent"/>. Depending on <see cref="P:Battlegrounds.Game.GameEvent.EventType"/>, this may be null.
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.GameEvent.TimeStamp">
            <summary>
            The calculated time in which the event occured
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.GameEvent.TargetType">
            <summary>
            The type the issued command will target (??? = ???, 16 = entity, 32 = squad, ??? = ???)
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.GameEvent.AttachedMessage">
            <summary>
            The attached message to a <see cref="T:Battlegrounds.Game.GameEvent"/> of type <see cref="F:Battlegrounds.Game.GameEventType.PCMD_BroadcastMessage"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.GameEvent.#ctor(System.TimeSpan,System.Byte[])">
            <summary>
            
            </summary>
            <param name="timeStamp"></param>
            <param name="eventData"></param>
        </member>
        <member name="T:Battlegrounds.Game.GameEventType">
            <summary>
            Represents a game event
            </summary>
        </member>
        <member name="F:Battlegrounds.Game.GameEventType.CMD_DefaultAction">
            Entity/Generic Commands 
        </member>
        <member name="F:Battlegrounds.Game.GameEventType.SCMD_Move">
            Squad Commands 
        </member>
        <member name="F:Battlegrounds.Game.GameEventType.PCMD_ConstructStructure">
            Player Commands 
        </member>
        <member name="T:Battlegrounds.Game.Gameplay.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Entity.EntityID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Entity.PlayerOwner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Entity.Blueprint">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Gameplay.Entity.#ctor(System.UInt16,Battlegrounds.Game.Gameplay.Player,Battlegrounds.Game.Database.Blueprint)">
            <summary>
            
            </summary>
            <param name="eId"></param>
            <param name="owner"></param>
            <param name="bp"></param>
        </member>
        <member name="T:Battlegrounds.Game.Gameplay.Faction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Faction.UID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Faction.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Faction.IsAllied">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Faction.RequiredDLC">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Gameplay.Faction.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Faction.Soviet">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Faction.Wehrmacht">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Faction.America">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Faction.OberkommandoWest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Faction.British">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Gameplay.Faction.FromName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Game.Gameplay.Player">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Player.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Player.TeamID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Player.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Player.Profile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Player.Army">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Player.IsAIPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Gameplay.Player.#ctor(System.UInt32,System.UInt32,System.String,Battlegrounds.Game.Gameplay.Faction,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="tID"></param>
            <param name="name"></param>
            <param name="faction"></param>
            <param name="aiprofile"></param>
        </member>
        <member name="M:Battlegrounds.Game.Gameplay.Player.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Battlegrounds.Game.Gameplay.Squad">
            <summary>
            Representation of a Squad
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Squad.SquadID">
            <summary>
            The unique squad ID used to identify the <see cref="T:Battlegrounds.Game.Gameplay.Squad"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Squad.PlayerOwner">
            <summary>
            The player who (currently) owns the <see cref="T:Battlegrounds.Game.Gameplay.Squad"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Squad.Blueprint">
            <summary>
            The <see cref="T:Battlegrounds.Game.Database.Blueprint"/> the <see cref="T:Battlegrounds.Game.Gameplay.Squad"/> is a type of.
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Squad.VeterancyRank">
            <summary>
            The achieved veterancy rank of a <see cref="T:Battlegrounds.Game.Gameplay.Squad"/>
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Squad.VeterancyProgress">
            <summary>
            The current veterancy progress of a <see cref="T:Battlegrounds.Game.Gameplay.Squad"/>
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Squad.Upgrades">
            <summary>
            The current upgrades applied to a <see cref="T:Battlegrounds.Game.Gameplay.Squad"/>
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Squad.SlotItems">
            <summary>
            The current slot items carried by the <see cref="T:Battlegrounds.Game.Gameplay.Squad"/>
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.Gameplay.Squad.#ctor(System.UInt16,Battlegrounds.Game.Gameplay.Player,Battlegrounds.Game.Database.Blueprint)">
            <summary>
            Create new <see cref="T:Battlegrounds.Game.Gameplay.Squad"/> instance with a unique squad ID, a <see cref="T:Battlegrounds.Game.Gameplay.Player"/> owner and a <see cref="T:Battlegrounds.Game.Database.Blueprint"/>.
            </summary>
            <param name="squadID">The unique squad ID used to identify the squad</param>
            <param name="owner">The <see cref="T:Battlegrounds.Game.Gameplay.Player"/> who owns the squad</param>
            <param name="squadBlueprint">The <see cref="T:Battlegrounds.Game.Database.Blueprint"/> the squad is an instance of</param>
        </member>
        <member name="M:Battlegrounds.Game.Gameplay.Squad.SetVeterancy(System.Byte,System.Single)">
            <summary>
            Set the veterancy of the <see cref="T:Battlegrounds.Game.Gameplay.Squad"/>. The rank and progress is not checked with the blueprint - any veterancy level can be achieved here.
            </summary>
            <param name="rank">The rank (or level) the squad has achieved.</param>
            <param name="progress">The current progress towards the next veterancy level</param>
        </member>
        <member name="M:Battlegrounds.Game.Gameplay.Squad.AddUpgrade(Battlegrounds.Game.Database.Blueprint)">
            <summary>
            Add an upgrade to the squad
            </summary>
            <param name="upgradeBP">The upgrade blueprint to add</param>
        </member>
        <member name="M:Battlegrounds.Game.Gameplay.Squad.AddSlotItem(Battlegrounds.Game.Database.Blueprint)">
            <summary>
            Add a slot item to the squad
            </summary>
            <param name="slotItemBP">The slot item blueprint to add</param>
        </member>
        <member name="T:Battlegrounds.Game.Gameplay.Wincondition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.Gameplay.Wincondition.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Game.GamePosition">
            <summary>
            Represents a world position in the game using X,Y,Z variables
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.GamePosition.X">
            <summary>
            The X-coordinate
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.GamePosition.Y">
            <summary>
            The Y-coordinate
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.GamePosition.Z">
            <summary>
            The Z-coordinate
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.GamePosition.#ctor(System.Single,System.Single)">
            <summary>
            New instance of a <see cref="T:Battlegrounds.Game.GamePosition"/> using only the two first coordinates (XY) - a 2D position
            </summary>
            <param name="x">The X-coordinate</param>
            <param name="y">The Y-coordinate</param>
        </member>
        <member name="M:Battlegrounds.Game.GamePosition.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            New instance of a <see cref="T:Battlegrounds.Game.GamePosition"/> using all three coordinates (XYZ) - a 3D position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Battlegrounds.Game.GamePosition.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Battlegrounds.Game.GamePosition.Naught">
            <summary>
            The game position at (0, 0, 0)
            </summary>
        </member>
        <member name="T:Battlegrounds.Game.GameTick">
            <summary>
            Class representation of a tick (update) in the game
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.GameTick.TimeStamp">
            <summary>
            The timestamp of the <see cref="T:Battlegrounds.Game.GameTick"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.GameTick.Events">
            <summary>
            The events that occured within the span of the <see cref="T:Battlegrounds.Game.GameTick"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.GameTick.#ctor">
            <summary>
            Create a new <see cref="T:Battlegrounds.Game.GameTick"/> instance
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.GameTick.Parse(System.IO.BinaryReader)">
            <summary>
            Parse a <see cref="T:Battlegrounds.Game.GameTick"/> using a <see cref="T:System.IO.BinaryReader"/> to extract the budled data and populate the <see cref="T:Battlegrounds.Game.GameEvent"/> list with results.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:Battlegrounds.Game.ScenarioDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.ScenarioDescription.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.ScenarioDescription.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.ScenarioDescription.File">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.ScenarioDescription.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.ScenarioDescription.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.ScenarioDescription.Abbreviation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Game.ScenarioDescription.Gamemode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Game.ScenarioDescription.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="name"></param>
            <param name="width"></param>
            <param name="length"></param>
        </member>
        <member name="T:Battlegrounds.Online.SourceDownloader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Online.SourceDownloader.DownloadSourceCode(System.String)">
            <summary>
            
            </summary>
            <param name="urlpath"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Online.SourceDownloader.DownloadSourceFile(System.String)">
            <summary>
            
            </summary>
            <param name="urlpath"></param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Pathfinder">
            <summary>
            Pathfinder for finding the paths to relevant paths (eg. CoH2's documents folder)
            </summary>
        </member>
        <member name="P:Battlegrounds.Pathfinder.SteamPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Pathfinder.CoHPath">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Pathfinder.GetOrFindSteamPath">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Pathfinder.GetOrFindCoHPath">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.ReplayFile">
            <summary>
            Represents a CoH2 replay file
            </summary>
        </member>
        <member name="T:Battlegrounds.ReplayFile.ReplayHeader">
            <summary>
            Represents a header of a <see cref="T:Battlegrounds.ReplayFile"/>
            </summary>
        </member>
        <member name="F:Battlegrounds.ReplayFile.ReplayHeader.version">
            <summary>
            The replay version
            </summary>
        </member>
        <member name="F:Battlegrounds.ReplayFile.ReplayHeader.gamename">
            <summary>
            The game version
            </summary>
        </member>
        <member name="F:Battlegrounds.ReplayFile.ReplayHeader.date">
            <summary>
            The date of replay save
            </summary>
        </member>
        <member name="M:Battlegrounds.ReplayFile.ReplayHeader.#ctor(System.UInt32,System.String,System.String)">
            <summary>
            Create instance of replay header with specified values
            </summary>
            <param name="v"></param>
            <param name="n"></param>
            <param name="d"></param>
        </member>
        <member name="P:Battlegrounds.ReplayFile.IsParsed">
            <summary>
            Check if the <see cref="T:Battlegrounds.ReplayFile"/> has been loaded and parsed.
            </summary>
        </member>
        <member name="P:Battlegrounds.ReplayFile.Header">
            <summary>
            The header read when the file was parsed
            </summary>
            <exception cref="T:System.IO.InvalidDataException"/>
        </member>
        <member name="P:Battlegrounds.ReplayFile.Scenario">
            <summary>
            The scenario used in the replay
            </summary>
            <exception cref="T:System.IO.InvalidDataException"/>
        </member>
        <member name="P:Battlegrounds.ReplayFile.Players">
            <summary>
            Array containing all players in the replay
            </summary>
        </member>
        <member name="P:Battlegrounds.ReplayFile.Ticks">
            <summary>
            Sorted array containing all game ticks in the replay
            </summary>
        </member>
        <member name="M:Battlegrounds.ReplayFile.#ctor(System.String)">
            <summary>
            New instance of a <see cref="T:Battlegrounds.ReplayFile"/> from a given file path
            </summary>
            <param name="file">The file path to use when loading the file</param>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:Battlegrounds.ReplayFile.LoadReplay">
            <summary>
            Load the replay file from the given file path at instantiation.
            </summary>
            <returns>True if no errors occured</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Battlegrounds.Steam.SteamUser">
            <summary>
            Represents a Steam User by ID and name. Can be serialised as a Json object. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Battlegrounds.Steam.SteamUser.Name">
            <summary>
            The display name of a <see cref="T:Battlegrounds.Steam.SteamUser"/>. (Not the actual account name!)
            </summary>
        </member>
        <member name="P:Battlegrounds.Steam.SteamUser.ID">
            <summary>
            The <see cref="T:System.UInt64"/> user ID.
            </summary>
        </member>
        <member name="M:Battlegrounds.Steam.SteamUser.UpdateName">
            <summary>
            Update the name of the steam user
            </summary>
        </member>
        <member name="M:Battlegrounds.Steam.SteamUser.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Battlegrounds.Steam.SteamUser.FromID(System.UInt64)">
            <summary>
            Find a user by their ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Util.BinaryReaderExt">
            <summary>
            Extension class for extending the utilities of <see cref="T:System.IO.BinaryReader"/>
            </summary>
        </member>
        <member name="M:Battlegrounds.Util.BinaryReaderExt.ReadASCIIString(System.IO.BinaryReader)">
            <summary>
            Read an ASCII string from a length that's given before the string
            </summary>
            <param name="reader">The stream to read string from</param>
            <returns>The read string</returns>
        </member>
        <member name="M:Battlegrounds.Util.BinaryReaderExt.ReadASCIIString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Read an ASCII string from a known length
            </summary>
            <param name="reader">The stream to read string from</param>
            <param name="length"></param>
            <returns>The read string</returns>
        </member>
        <member name="M:Battlegrounds.Util.BinaryReaderExt.ReadUTF8String(System.IO.BinaryReader)">
            <summary>
            Read a UTF-8 string of unknown length
            </summary>
            <param name="reader">The stream to read string from</param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Util.BinaryReaderExt.ReadUTF8String(System.IO.BinaryReader,System.UInt32)">
            <summary>
            Read a UTF-8 of known character count
            </summary>
            <param name="reader">The stream to read string from</param>
            <param name="characterCount">The amount of UTF-8 characters to read</param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Util.BinaryReaderExt.Skip(System.IO.BinaryReader,System.Int64)">
            <summary>
            Extension method: Skips the specified amount of bytes
            </summary>
            <param name="reader">The stream to skip bytes in</param>
            <param name="count">The amount of bytes to skip</param>
        </member>
        <member name="M:Battlegrounds.Util.BinaryReaderExt.HasReachedEOS(System.IO.BinaryReader)">
            <summary>
            Has the stream reached the end of stream (EOS)
            </summary>
            <param name="reader">The stream to check</param>
            <returns>True if the stream position is equal or greater than the stream length</returns>
        </member>
        <member name="M:Battlegrounds.Util.BinaryReaderExt.SkipUntil(System.IO.BinaryReader,System.Byte[])">
            <summary>
            Skip all bytes until a specific byte array match is found
            </summary>
            <param name="reader">The stream to advance memory pointer in</param>
            <param name="barray">The byte array to find and read</param>
        </member>
        <member name="M:Battlegrounds.Util.BinaryReaderExt.ReadToEnd(System.IO.BinaryReader)">
            <summary>
            Read all bytes remaining in the <see cref="T:System.IO.BinaryReader"/> object
            </summary>
            <param name="reader">The stream to read to end</param>
            <returns>Byte array containing all the bytes remaining in the stream</returns>
        </member>
        <member name="T:Battlegrounds.Util.ByteUtil">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Util.ByteUtil.Match(System.Byte[],System.String)">
            <summary>
            Check if a byte array matches the contents of the string.
            </summary>
            <param name="barray">Byte array to check for matching content</param>
            <param name="content">The string content to compare against</param>
            <returns>True if the contents of the byte array matches the content of the string.</returns>
        </member>
        <member name="M:Battlegrounds.Util.ByteUtil.Match(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Util.TxtBuilder">
            <summary>
            Simple text builder with support for indentation and lines. Content can be retrieved as a <see cref="T:System.String"/> or saved to a file. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Battlegrounds.Util.TxtBuilder.#ctor">
            <summary>
            Create an empty instance of a <see cref="T:Battlegrounds.Util.TxtBuilder"/> with no indentation.
            </summary>
        </member>
        <member name="M:Battlegrounds.Util.TxtBuilder.SetIndent(System.Int32)">
            <summary>
            Set the indent level.
            </summary>
            <param name="indent">The indent level to set</param>
        </member>
        <member name="M:Battlegrounds.Util.TxtBuilder.IncreaseIndent">
            <summary>
            Increase the indent level by one
            </summary>
        </member>
        <member name="M:Battlegrounds.Util.TxtBuilder.DecreaseIndent">
            <summary>
            Decrease the indent level by one
            </summary>
        </member>
        <member name="M:Battlegrounds.Util.TxtBuilder.AppendLine(System.Object)">
            <summary>
            Add a new line to the text with proper indentation.
            </summary>
            <param name="content">The <see cref="T:System.Object"/> content to append.</param>
        </member>
        <member name="M:Battlegrounds.Util.TxtBuilder.Append(System.Object)">
            <summary>
            Add content to the <see cref="T:Battlegrounds.Util.TxtBuilder"/> with indentation.
            </summary>
            <param name="content">The <see cref="T:System.Object"/> content to append.</param>
        </member>
        <member name="M:Battlegrounds.Util.TxtBuilder.Append(System.Object,System.Boolean)">
            <summary>
            Add content to the <see cref="T:Battlegrounds.Util.TxtBuilder"/> where indentation use is specified.
            </summary>
            <param name="content">The <see cref="T:System.Object"/> content to append.</param>
            <param name="indent">Use indentation when appending</param>
        </member>
        <member name="M:Battlegrounds.Util.TxtBuilder.GetContent">
            <summary>
            Retrieve the <see cref="T:System.String"/> contents of a <see cref="T:Battlegrounds.Util.TxtBuilder"/>.
            </summary>
            <returns>The internal string contents built with the internal <see cref="T:System.Text.StringBuilder"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Util.TxtBuilder.GetStringBuilder">
            <summary>
            Get the internal <see cref="T:System.Text.StringBuilder"/> used by the <see cref="T:Battlegrounds.Util.TxtBuilder"/> instance to build its content.
            </summary>
            <returns>The <see cref="T:System.Text.StringBuilder"/> instance used internally by the <see cref="T:Battlegrounds.Util.TxtBuilder"/> instance.</returns>
        </member>
        <member name="M:Battlegrounds.Util.TxtBuilder.Save(System.String)">
            <summary>
            Save all the contents of a <see cref="T:Battlegrounds.Util.TxtBuilder"/> to a specified file.
            </summary>
            <param name="path">The path of the file to write contents to.</param>
        </member>
    </members>
</doc>
