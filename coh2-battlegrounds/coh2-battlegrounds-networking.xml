<?xml version="1.0"?>
<doc>
    <assembly>
        <name>coh2-battlegrounds-networking</name>
    </assembly>
    <members>
        <member name="T:Battlegrounds.Networking.AuthObject">
            <summary>
            Represents an authenticator object that can be used to authenticate the identity of a user.
            </summary>    
        </member>
        <member name="P:Battlegrounds.Networking.AuthObject.DisplayName">
            <summary>
            Get the public display name the service has received.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.AuthObject.#ctor(System.UInt64,System.String)">
            <summary>
            Initialize a new authenticator object with <paramref name="identifier"/> and <paramref name="displayName"/>.
            </summary>
            <param name="identifier">The identifier the object will use.</param>
            <param name="displayName">The display name associated with the object.</param>
        </member>
        <member name="M:Battlegrounds.Networking.AuthObject.IsUser(System.UInt64)">
            <summary>
            Verifies if the given identifier is the identify of the <see cref="T:Battlegrounds.Networking.AuthObject"/>.
            </summary>
            <param name="identifier">The identifier to compare against.</param>
            <returns>If valid true; Otherwise false.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.AuthService">
            <summary>
            Networking authenticator service for authenticating the local player.
            </summary>
            <remarks>
            <i>This service is a mock service and is used for "logging in" the local steam profile.</i>
            </remarks>
        </member>
        <member name="P:Battlegrounds.Networking.AuthService.IsLoggedIn">
            <summary>
            Get if the <see cref="T:Battlegrounds.Networking.AuthService"/> is logged in.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.AuthService.Login(System.UInt64,System.String)">
            <summary>
            Log in to the <see cref="T:Battlegrounds.Networking.AuthService"/> using <paramref name="identifier"/> and <paramref name="publicName"/>.
            </summary>
            <param name="identifier">The identifier to use.</param>
            <param name="publicName">The public name to display.</param>
        </member>
        <member name="M:Battlegrounds.Networking.AuthService.Logout">
            <summary>
            Log out of the <see cref="T:Battlegrounds.Networking.AuthService"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.AuthService.AuthInstance``1(System.Nullable{Battlegrounds.Networking.AuthObject},System.Func{Battlegrounds.Networking.AuthObject,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="other"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.AuthenticatorException">
            <summary>
            Represents errors that occur when using the <see cref="T:Battlegrounds.Networking.AuthService"/>.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol">
            <summary>
            Static utility class for sending and reveing Battlegrounds protocol-compliant messages.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ReceiveBufferLength">
            <summary>
            Maximum amount of bytes that will be read into a buffer at a time.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.MessageHeaderSize">
            <summary>
            The size of the protocol message header. (Without size field)
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject">
            <summary>
            Protocol-compliant object keeping track of messages.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject.MessageID">
            <summary>
            The unique ID identidying the object.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject.SenderID">
            <summary>
            The unique ID of the sender.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject.Response">
            <summary>
            The <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> object tied to the object.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject.Filter">
            <summary>
            Get or set the message filter
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject.HasResponse">
            <summary>
            Get if there is a response present in the object.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject.#ctor(System.UInt64)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject"/> instance with a unique message id.
            </summary>
            <param name="mid">The unique message identifier.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject.SetResponse(Battlegrounds.Networking.Communication.Messaging.IMessage)">
            <summary>
            Set the response tied to the object.
            </summary>
            <param name="response">The response message.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.SendAndForget(Battlegrounds.Networking.Communication.Sockets.ISocket,Battlegrounds.Networking.Communication.Messaging.IMessage,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.UInt64[])">
            <summary>
            Send <paramref name="message"/> using <paramref name="socket"/> with a uniqely given <paramref name="messageID"/>.
            </summary>
            <param name="socket">The socket to use when sending the message.</param>
            <param name="message">The message object.</param>
            <param name="messageID">The ID of the message. Define if responding to a remote message.</param>
            <returns>The given message id of the sent message.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.GetProtocolMessage(System.UInt64,Battlegrounds.Networking.Communication.Messaging.IMessage,System.UInt64@,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.UInt64[])">
            <summary>
            
            </summary>
            <param name="defaultId"></param>
            <param name="message"></param>
            <param name="mid"></param>
            <param name="messageID"></param>
            <param name="identifier"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.Receive(Battlegrounds.Networking.Communication.Sockets.ISocket)">
            <summary>
            Receive all bytes from <paramref name="socket"/> and try to parse it into a protocol-compliant object.
            </summary>
            <param name="socket">The socket to receive data from.</param>
            <returns>The parsed <see cref="T:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject"/> from the first-read message.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.GetProtocolObject(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.BinaryPayloadMessage">
            <summary>
            Represents a message in a <see cref="T:Battlegrounds.Networking.Communication.HttpPayload"/> object with an unpacked <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BinaryPayloadMessage.Message">
            <summary>
            Get the message that was unpacked.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BinaryPayloadMessage.MessageID">
            <summary>
            Get the associated message ID.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BinaryPayloadMessage.#ctor(Battlegrounds.Networking.Communication.Messaging.IMessage,System.UInt64)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.BinaryPayloadMessage"/> with the unpacked message and associated message ID.
            </summary>
            <param name="message">The unpacked message instance.</param>
            <param name="id">The ID associated with the message.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.BinaryStatusCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.BinaryStatusCode.OK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.BinaryStatusCode.NOTIMPLEMENTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.BinaryStatusCode.NOTFOUND">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.BinaryStatusCode.FORBIDDEN">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.BinaryPayloadRequest">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.BinaryPayloadRequest.PING">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.BinaryPayloadRequest.REQUEST">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.BinaryPayloadRequest.RESPOND">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.BinaryPayloadRequest.COLLECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.BinaryPayloadRequest.COLLECTRESPONSE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.BinaryPayloadRequest.BROKER">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.BinaryPayloadRequest.INTRO">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.BinaryPayload">
            <summary>
            Represents a payload sent along the HTTP protocol used by <see cref="!:HttpConnection"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BinaryPayload.Messages">
            <summary>
            Get or set the actual messages within the payload
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BinaryPayload.Filter">
            <summary>
            Get or set the user ID filter
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BinaryPayload.Sender">
            <summary>
            Get or set the sender of the payload
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BinaryPayload.FireAndForget">
            <summary>
            Get or set if this message is fire and forget.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BinaryPayload.Broadcast">
            <summary>
            Get or set if this message is to be broadcast
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BinaryPayload.Request">
            <summary>
            Get or set the request type
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BinaryPayload.Lobby">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BinaryPayload.StatusCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BinaryPayload.#ctor(Battlegrounds.Networking.Communication.BinaryPayloadRequest,System.Boolean,System.UInt64)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="fireAndForget"></param>
            <param name="sender"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BinaryPayload.#ctor(Battlegrounds.Networking.Communication.BinaryPayloadRequest,System.Boolean,System.UInt64,System.UInt64[],Battlegrounds.Networking.Communication.Messaging.IMessage[])">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.BinaryPayload"/>.
            </summary>
            <param name="request"></param>
            <param name="fireAndForget">Is message fire and forget</param>
            <param name="sender"></param>
            <param name="filter">The filter to apply on the server.</param>
            <param name="messages">The messages to send along the payload. The messages are converted into <see cref="T:Battlegrounds.Networking.Communication.HttpPayloadMessage"/> instances with randomly assigned IDs</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BinaryPayload.#ctor(Battlegrounds.Networking.Communication.BinaryPayloadRequest,System.Boolean,System.UInt64,System.UInt64[],Battlegrounds.Networking.Communication.BinaryPayloadMessage[])">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.HttpPayload"/>.
            </summary>
            <param name="request"></param>
            <param name="fireAndForget">Is message fire and forget</param>
            <param name="sender">The ID of the sender of the payload.</param>
            <param name="filter">The filter to apply on the server.</param>
            <param name="messages">The messages to send along the payload.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BinaryPayload.#ctor(Battlegrounds.Networking.Communication.BinaryPayloadRequest,System.Boolean,System.UInt64,System.UInt64[],Battlegrounds.Networking.Communication.Messaging.IMessage)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.HttpPayload"/>.
            </summary>
            <param name="request"></param>
            <param name="fireAndForget">Is message fire and forget</param>
            <param name="sender">The ID of the sender of the payload.</param>
            <param name="filter">The filter to apply on the server.</param>
            <param name="message">The single message to attach to the payload.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BinaryPayload.#ctor(Battlegrounds.Networking.Communication.BinaryPayloadRequest,System.Boolean,System.UInt64,System.UInt64[],Battlegrounds.Networking.Communication.BinaryPayloadMessage)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.HttpPayload"/>.
            </summary>
            <param name="request"></param>
            <param name="fireAndForget">Is message fire and forget</param>
            <param name="sender">The ID of the sender of the payload.</param>
            <param name="filter">The filter to apply on the server.</param>
            <param name="message">The single message to send along the payload.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BinaryPayload.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BinaryPayload.GetPayloads(System.Byte[])">
            <summary>
            
            </summary>
            <param name="binaryData"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BinaryPayload.FromBytes(System.Byte[],System.UInt16)">
            <summary>
            
            </summary>
            <param name="binaryData"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Connections.IConnection">
            <summary>
            Interface for representing a connection from local client to some endpoint.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.IConnection.ConnectionID">
            <summary>
            Get the ID assigned to this connection.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.IConnection.RequestHandler">
            <summary>
            Get the request handler used by the connection to handle connection requests.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.IConnection.IsConnected">
            <summary>
            Get if the connection is currently connected to remote endpoint.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.IConnection.SendMessage(Battlegrounds.Networking.Communication.Messaging.IMessage,System.Boolean)">
            <summary>
            Send a message through the connection.
            </summary>
            <param name="message">The message to send to the connection endpoint.</param>
            <param name="awaitResponse">Shoud this method run asynchronously and ignore response from endpoint.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> instance response from the connection endpoint.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.IConnection.SendBrokerMessage(Battlegrounds.Networking.Communication.Messaging.IMessage,System.Boolean,System.UInt64[])">
            <summary>
            Send a message through the connection directly to the broker.
            </summary>
            <param name="message">The message to send to the broker.</param>
            <param name="awaitResponse">Shoud this method run asynchronously and ignore response from endpoint.</param>
            <param name="filter">The fillter to apply on the broker to decide who should receive the message.</param>
            <returns>A response from the broker.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.IConnection.SendBroadcastMessage(Battlegrounds.Networking.Communication.Messaging.IMessage,System.UInt64[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="filter"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.IConnection.SetRequestHandler(Battlegrounds.Networking.Requests.IIncomingRequestHandler)">
            <summary>
            Set the <see cref="T:Battlegrounds.Networking.Requests.IIncomingRequestHandler"/> instance that will handle connection requests.
            </summary>
            <param name="handler">The <see cref="T:Battlegrounds.Networking.Requests.IIncomingRequestHandler"/> to serve as request handler.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.IConnection.Shutdown">
            <summary>
            Shutdown connections from send and receiving messages.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.IConnection.BeginListen">
            <summary>
            Start listening for incoming messages on the connection.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.IConnection.StopListen">
            <summary>
            Stop listening for incoming messages
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.IConnection.EnableSendMessage(System.Boolean)">
            <summary>
            Enable or disable whether this connection will allow message sending.
            </summary>
            <param name="allowSendMessages"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.IConnection.Ping">
            <summary>
            Ping the connection to test for connection.
            </summary>
            <returns>If ping was successful, the amount of time to respond in ms; Otherwise -1.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Connections.SocketConnectionClosedHandler">
            <summary>
            Delegate for handling when a connection is closed.
            </summary>
            <param name="remote">Is connection closed by the remote endpoint.</param>
            <param name="connectionID">The ID of the connection that was closed.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Connections.SocketConnection">
            <summary>
            Class representing a connection over a socket instance (using TCP).
            </summary>
            <remarks>
            Prefer this implementation over <see cref="T:Battlegrounds.Networking.Communication.Connections.TcpConnection"/>.
            </remarks>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.SocketConnection.SocketLock">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.SocketConnection.ConnectionID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.SocketConnection.RequestHandler">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.SocketConnection.IsConnected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.SocketConnection.Identifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.SocketConnection.Stream">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.SocketConnection.Client">
            <summary>
            
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.Communication.Connections.SocketConnection.OnConnectionClosed">
            <summary>
            Event triggered when the connection is closed.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.SocketConnection.#ctor(System.Net.Sockets.TcpClient,System.UInt64)">
            <summary>
            
            </summary>
            <param name="client"></param>
            <param name="identifier"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.SocketConnection.BeginListen">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.SocketConnection.StopListen">
            <summary>
            Stop listening for incoming messages
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.SocketConnection.EnableSendMessage(System.Boolean)">
            <summary>
            Enable or disable whether this connection will allow message sending.
            </summary>
            <param name="allowSendMessages"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.SocketConnection.Ping">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.SocketConnection.SendBroadcastMessage(Battlegrounds.Networking.Communication.Messaging.IMessage,System.UInt64[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="filter"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.SocketConnection.SendBrokerMessage(Battlegrounds.Networking.Communication.Messaging.IMessage,System.Boolean,System.UInt64[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="awaitResponse"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.SocketConnection.SendMessage(Battlegrounds.Networking.Communication.Messaging.IMessage,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="awaitResponse"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.SocketConnection.SetRequestHandler(Battlegrounds.Networking.Requests.IIncomingRequestHandler)">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.SocketConnection.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.SocketConnection.Shutdown(System.Boolean)">
            <summary>
            
            </summary>
            <param name="sendCloseMessage"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.SocketConnection.Dispose">
            <summary>
            Release the resources in use by the <see cref="!:HttpConnection"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.SocketConnection.EstablishConnection(System.String,System.Int32,System.UInt64,Battlegrounds.Networking.Communication.Messaging.IntroMessage)">
            <summary>
            Establish a <see cref="!:HttpConnection"/> to specified HTTP server.
            </summary>
            <param name="address">The address of the HTTP server.</param>
            <param name="port">The port of the HTTP server.</param>
            <param name="identifier">The identifier of the user sending HTTP requests.</param>
            <param name="introMessage">The introduction message to send to the HTTP server.</param>
            <returns>If connection is established a <see cref="!:HttpConnection"/> instance. Otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Connections.TcpConnection">
            <summary>
            Represents a TCP-compliant connection between local machine and some endpoint. Implements <see cref="T:Battlegrounds.Networking.Communication.Connections.IConnection"/>.
            </summary>
            <remarks>
            Prefer <see cref="T:Battlegrounds.Networking.Communication.Connections.SocketConnection"/> over this connection.
            </remarks>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Connections.TcpConnection.RESPONSE_WAIT_TIME">
            <summary>
            The amount of milliseconds to wait for a response (before resending a request)
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Connections.TcpConnection.RESEND_ATTEMPTS">
            <summary>
            The amount of resends to attempt for a response.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.TcpConnection.IsConnected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.TcpConnection.ConnectionID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.TcpConnection.RequestHandler">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.TcpConnection.Socket">
            <summary>
            Get the underlying socket used for sending and retrieving information.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.TcpConnection.#ctor(Battlegrounds.Networking.Communication.Sockets.ISocket)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.Connections.TcpConnection"/> with a backing <paramref name="socket"/>.
            </summary>
            <param name="socket">The backing socket that communication will go through.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.TcpConnection.SendMessage(Battlegrounds.Networking.Communication.Messaging.IMessage,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="awaitResponse"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.TcpConnection.SendMessage(Battlegrounds.Networking.Communication.Messaging.IMessage,System.Boolean,System.Int32)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="awaitResponse"></param>
            <param name="wait"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.TcpConnection.SendBrokerMessage(Battlegrounds.Networking.Communication.Messaging.IMessage,System.Boolean,System.UInt64[],System.Int32)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="awaitResponse"></param>
            <param name="filter"></param>
            <param name="wait"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.TcpConnection.SendBrokerMessage(Battlegrounds.Networking.Communication.Messaging.IMessage,System.Boolean,System.UInt64[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="awaitResponse"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.TcpConnection.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.TcpConnection.SetRequestHandler(Battlegrounds.Networking.Requests.IIncomingRequestHandler)">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.TcpConnection.Ping">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.TcpConnection.BeginListen">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.TcpConnection.StopListen">
            <summary>
            Stop listening for incoming messages
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.TcpConnection.EnableSendMessage(System.Boolean)">
            <summary>
            Enable or disable whether this connection will allow message sending.
            </summary>
            <param name="allowSendMessages"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.TcpConnection.EstablishConnectionTo(System.String,System.Int32,System.UInt64)">
            <summary>
            Establing a connection to endpoint specified by <paramref name="address"/> and <paramref name="port"/>.
            </summary>
            <param name="address">The IP Address to attempt to establish connection to.</param>
            <param name="port">The port to establish connection with.</param>
            <param name="uniqueID">The unique ID to assign to the underlying <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocket"/> that will help identify the <see cref="T:Battlegrounds.Networking.Communication.Connections.TcpConnection"/>.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Communication.Connections.TcpConnection"/> if connection was established.</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.TcpConnection.CanConnect(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.TcpConnection.SendBroadcastMessage(Battlegrounds.Networking.Communication.Messaging.IMessage,System.UInt64[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="filter"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Golang.GoMarshal">
            <summary>
            Static utility class for handling marshalling between the server and client.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.GoMarshal.MSG_FIXED_SIZE">
            <summary>
            The fixed size of the message header.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.GoMarshal.JsonMarshal(System.Object)">
            <summary>
            Marshal <paramref name="obj"/> into the binary UTF-8 json representation.
            </summary>
            <param name="obj">The object to marshal.</param>
            <returns>The binary json representation of <paramref name="obj"/>.</returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.GoMarshal.JsonUnmarshal``1(System.Byte[])">
            <summary>
            Unmarshal <paramref name="input"/> into its .net representation.
            </summary>
            <typeparam name="T">The type to unmarshal to.</typeparam>
            <param name="input">The binary representation of the marshalled object.</param>
            <returns>The unmarshalled object.</returns>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Text.Json.JsonException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.GoMarshal.BytesUnmarshal(System.Byte[],System.Byte[]@)">
            <summary>
            Unmarshal the binary representation of a <see cref="T:Battlegrounds.Networking.Communication.Golang.Message"/> instance.
            </summary>
            <param name="input">The binary input to unmarshal.</param>
            <param name="remaining">The binary data that was not read.</param>
            <returns>The first <see cref="T:Battlegrounds.Networking.Communication.Golang.Message"/> instance contained within the <paramref name="input"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage">
            <summary>
            Represents a message that invoke methods on a remote machine.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Method">
            <summary>
            Get or initialise the method to invoke.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Arguments">
            <summary>
            Get or initialise the arguments to give in string form.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``1">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T">First tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``2">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``3">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``4">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <typeparam name="T4">Fourth tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``5">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <typeparam name="T4">Fourth tuple type.</typeparam>
            <typeparam name="T5">Fifth tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``6">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <typeparam name="T4">Fourth tuple type.</typeparam>
            <typeparam name="T5">Fifth tuple type.</typeparam>
            <typeparam name="T6">Sixth tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``7">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <typeparam name="T4">Fourth tuple type.</typeparam>
            <typeparam name="T5">Fifth tuple type.</typeparam>
            <typeparam name="T6">Sixth tuple type.</typeparam>
            <typeparam name="T7">Seventh tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``8">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <typeparam name="T4">Fourth tuple type.</typeparam>
            <typeparam name="T5">Fifth tuple type.</typeparam>
            <typeparam name="T6">Sixth tuple type.</typeparam>
            <typeparam name="T7">Seventh tuple type.</typeparam>
            <typeparam name="T8">Eigth tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``9">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <typeparam name="T4">Fourth tuple type.</typeparam>
            <typeparam name="T5">Fifth tuple type.</typeparam>
            <typeparam name="T6">Sixth tuple type.</typeparam>
            <typeparam name="T7">Seventh tuple type.</typeparam>
            <typeparam name="T8">Eigth tuple type.</typeparam>
            <typeparam name="T9">Ninth tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``10">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <typeparam name="T4">Fourth tuple type.</typeparam>
            <typeparam name="T5">Fifth tuple type.</typeparam>
            <typeparam name="T6">Sixth tuple type.</typeparam>
            <typeparam name="T7">Seventh tuple type.</typeparam>
            <typeparam name="T8">Eigth tuple type.</typeparam>
            <typeparam name="T9">Ninth tuple type.</typeparam>
            <typeparam name="T10">Tenth tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.HttpPOSTResponseData">
            <summary>
            Represents HTTP response data to a POST request.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.HttpPOSTResponseData.Success">
            <summary>
            Flag showing if the request yielded a successful response.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.HttpPOSTResponseData.Status">
            <summary>
            The status string of the response.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.HttpPOSTResponseData.Content">
            <summary>
            The received data content of the response.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpPOSTResponseData.#ctor(System.Boolean,System.String,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.HttpPOSTResponseData"/> instance with fields defined.
            </summary>
            <param name="b">Is the request responded to with a success code.</param>
            <param name="s">The status code of the response.</param>
            <param name="p">The content sent with the response.</param>
            <param name="encoding">The encoding of the response data.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.HttpGETResponseData">
            <summary>
            Represents HTTP response data to a GET request.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.HttpGETResponseData.Success">
            <summary>
            Flag showing if the request yielded a successful response.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.HttpGETResponseData.Content">
            <summary>
            The received data content of the response.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.HttpGETResponseData.Value">
            <summary>
            Get the <see cref="F:Battlegrounds.Networking.Communication.HttpGETResponseData.Content"/> parsed as a string.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.HttpGETResponseData.StatusCode">
            <summary>
            The received status code.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpGETResponseData.#ctor(System.Boolean,System.IO.Stream,System.Text.Encoding,System.Net.HttpStatusCode)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.HttpGETResponseData"/> instance with fields defined.
            </summary>
            <param name="b">Is the request responded to with a success code.</param>
            <param name="s">The returned body stream content of the response.</param>
            <param name="encoding">The encoding of the received stream content.</param>
            <param name="httpStatus">The status code of the response.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.HttpCom">
            <summary>
            Static extension class for send HTTP requests (GET and POST)
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpCom.POST(System.Net.Http.HttpClient,System.String,System.String,System.Net.Http.HttpContent,System.Int32)">
            <summary>
            Send a POST request to <paramref name="address"/> with <paramref name="data"/>.
            </summary>
            <param name="client">The client to use for sending the request.</param>
            <param name="address">The address of the server to send request to.</param>
            <param name="api">The api to invoke with request.</param>
            <param name="data">The data to post.</param>
            <param name="port">The specific port to use when sending the request.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Communication.HttpPOSTResponseData"/> instance containing the response to the request.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpCom.AsyncPOST(System.Net.Http.HttpClient,System.String,System.String,System.Net.Http.HttpContent,System.Int32)">
            <summary>
            Send a POST request to <paramref name="address"/> with <paramref name="data"/>.
            </summary>
            <param name="client">The client to use for sending the request.</param>
            <param name="address">The address of the server to send request to.</param>
            <param name="api">The api to invoke with request.</param>
            <param name="data">The data to post.</param>
            <param name="port">The specific port to use when sending the request.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Communication.HttpPOSTResponseData"/> instance containing the response to the request.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpCom.GET(System.Net.Http.HttpClient,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Send a GET request to <paramref name="address"/> using specified <paramref name="api"/> query string.
            </summary>
            <param name="client">The client to use for sending the request.</param>
            <param name="address">The address of the server to send request to.</param>
            <param name="api">The api to invoke with request.</param>
            <param name="port">The specific port to use when sending the request.</param>
            <param name="log">Should the runtime log this GET request.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Communication.HttpGETResponseData"/> instance containing the response to the request.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpCom.AsyncGET(System.Net.Http.HttpClient,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Send a GET request to <paramref name="address"/> using specified <paramref name="api"/> query string.
            </summary>
            <param name="client">The client to use for sending the request.</param>
            <param name="address">The address of the server to send request to.</param>
            <param name="api">The api to invoke with request.</param>
            <param name="port">The specific port to use when sending the request.</param>
            <param name="log">Should the runtime log this GET request.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Communication.HttpGETResponseData"/> instance containing the response to the request.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.HttpPayloadMessage">
            <summary>
            Represents a message in a <see cref="T:Battlegrounds.Networking.Communication.HttpPayload"/> object with raw key-value representation of the message.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.HttpPayloadMessage.MessageData">
            <summary>
            Get or set the raw message data.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.HttpPayloadMessage.MessageID">
            <summary>
            Get the associated message ID.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpPayloadMessage.#ctor">
            <summary>
            Initialize an empty payload message.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpPayloadMessage.#ctor(Battlegrounds.Networking.Communication.Messaging.IMessage,System.UInt64)">
            <summary>
            Initialize a payload message.
            </summary>
            <param name="message">The message to convert into its raw representation.</param>
            <param name="id">The associated ID of the message.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.HttpPayloadUnpackedMessage">
            <summary>
            Represents a message in a <see cref="T:Battlegrounds.Networking.Communication.HttpPayload"/> object with an unpacked <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.HttpPayloadUnpackedMessage.Message">
            <summary>
            Get the message that was unpacked.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.HttpPayloadUnpackedMessage.MessageID">
            <summary>
            Get the associated message ID.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpPayloadUnpackedMessage.#ctor(Battlegrounds.Networking.Communication.Messaging.IMessage,System.UInt64)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.HttpPayloadUnpackedMessage"/> with the unpacked message and associated message ID.
            </summary>
            <param name="message">The unpacked message instance.</param>
            <param name="id">The ID associated with the message.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.HttpPayload">
            <summary>
            Represents a payload sent along the HTTP protocol used by <see cref="!:HttpConnection"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.HttpPayload.Messages">
            <summary>
            Get or set the actual messages within the payload
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.HttpPayload.Filter">
            <summary>
            Get or set the user ID filter
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.HttpPayload.Sender">
            <summary>
            Get or set the sender of the payload
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.HttpPayload.FireAndForget">
            <summary>
            Get or set if this message is fire and forget.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.HttpPayload.Broadcast">
            <summary>
            Get or set if this message is to be broadcast
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpPayload.#ctor">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.HttpPayload"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpPayload.#ctor(System.Boolean,System.UInt64,System.UInt64[],Battlegrounds.Networking.Communication.Messaging.IMessage[])">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.HttpPayload"/>.
            </summary>
            <param name="fireAndForget">Is message fire and forget</param>
            <param name="sender"></param>
            <param name="filter">The filter to apply on the server.</param>
            <param name="messages">The messages to send along the payload. The messages are converted into <see cref="T:Battlegrounds.Networking.Communication.HttpPayloadMessage"/> instances with randomly assigned IDs</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpPayload.#ctor(System.Boolean,System.UInt64,System.UInt64[],Battlegrounds.Networking.Communication.HttpPayloadMessage[])">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.HttpPayload"/>.
            </summary>
            <param name="fireAndForget">Is message fire and forget</param>
            <param name="sender">The ID of the sender of the payload.</param>
            <param name="filter">The filter to apply on the server.</param>
            <param name="messages">The messages to send along the payload.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpPayload.#ctor(System.Boolean,System.UInt64,System.UInt64[],Battlegrounds.Networking.Communication.Messaging.IMessage)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.HttpPayload"/>.
            </summary>
            <param name="fireAndForget">Is message fire and forget</param>
            <param name="sender">The ID of the sender of the payload.</param>
            <param name="filter">The filter to apply on the server.</param>
            <param name="message">The single message to attach to the payload.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpPayload.GetPayload">
            <summary>
            Get the payload as <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> representations.
            </summary>
            <returns>An array of <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> instances</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Messaging.Binary.BinaryMessageReader">
            <summary>
            Static utility class for parsing a binary message.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Messaging.Binary.BinaryMessageReader.MessageTypeLookup">
            <summary>
            Byte-ID <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> concrete implementation type lookup.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Battlegrounds.Networking.Communication.Messaging.Binary.BinaryMessageReader.Parse(System.Byte[])" -->
        <!-- Badly formed XML comment ignored for member "M:Battlegrounds.Networking.Communication.Messaging.Binary.BinaryMessageReader.Parse(System.IO.MemoryStream)" -->
        <member name="T:Battlegrounds.Networking.Communication.Messaging.ByteObjectMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Messaging.ByteObjectMessage.BYTEOBJ_BYTE_ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Messaging.ByteObjectMessage.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Messaging.ByteObjectMessage.Object">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Messaging.ByteObjectMessage.ObjectConstructor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Messaging.ByteObjectMessage.ObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.ByteObjectMessage.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.ByteObjectMessage.#ctor(Battlegrounds.Networking.Remoting.Objects.ISendableObject)">
            <summary>
            
            </summary>
            <param name="sendableObject"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.ByteObjectMessage.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.ByteObjectMessage.SetChunk(System.Int32,Battlegrounds.Networking.Communication.Messaging.Binary.BinaryChunkReader)">
            <summary>
            
            </summary>
            <param name="chunk"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.ByteObjectMessage.ToJson">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Messaging.EnumMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.EnumMessage.GetEnumValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Messaging.IMessage">
            <summary>
            Represents a message that can be sent between clients.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Messaging.IMessage.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.IMessage.GetBytes">
            <summary>
            Convert the <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> into its binary form.
            </summary>
            <returns>An array of bytes representing the <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.IMessage.SetChunk(System.Int32,Battlegrounds.Networking.Communication.Messaging.Binary.BinaryChunkReader)">
            <summary>
            
            </summary>
            <param name="chunk"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.IMessage.ToJson">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Messaging.IntroMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Messaging.IntroMessage.INTRO_BYTE_ID">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Messaging.PingMessage">
            <summary>
            Represents a ping message
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Messaging.PingMessage.PING_BYTE_ID">
            <summary>
            Constant byte ID identifier of a byte message.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Messaging.QueryMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Messaging.QueryMessage.QUERY_BTYE_ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Messaging.QueryMessage.Query">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Messaging.QueryMessage.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.QueryMessage.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.QueryMessage.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.QueryMessage.SetChunk(System.Int32,Battlegrounds.Networking.Communication.Messaging.Binary.BinaryChunkReader)">
            <summary>
            
            </summary>
            <param name="chunk"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.QueryMessage.ToJson">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Messaging.RemoteCallMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Messaging.RemoteCallMessage.REMOTECALL_BYTE_ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Messaging.RemoteCallMessage.ObjectdID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Messaging.RemoteCallMessage.Mangled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Messaging.RemoteCallMessage.Arguments">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.RemoteCallMessage.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.RemoteCallMessage.#ctor(System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="objId"></param>
            <param name="mangledString"></param>
            <param name="args"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.RemoteCallMessage.UpdateArguments(Battlegrounds.Networking.Remoting.Objects.IObjectPool)">
            <summary>
            
            </summary>
            <param name="objectPool"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.RemoteCallMessage.GetBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.RemoteCallMessage.SetChunk(System.Int32,Battlegrounds.Networking.Communication.Messaging.Binary.BinaryChunkReader)">
            <summary>
            
            </summary>
            <param name="chunk"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.RemoteCallMessage.ToJson">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Messaging.StringMessage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Messaging.StringMessage.STRING_BYTE_ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Messaging.StringMessage.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Messaging.VoidMessage">
            <summary>
            Class representing a void return-value message.
            </summary>
            <remarks>
            Implements <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/>.
            </remarks>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Messaging.VoidMessage.VOID_BYTE_ID">
            <summary>
            The unique byte ID assigned to this message type.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Messaging.VoidMessage.Type">
            <summary>
            Get the unique byte ID assigned to the <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/>.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Sockets.SocketClosed">
            <summary>
            
            </summary>
            <param name="gracefully"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Sockets.ISocket">
            <summary>
            Interface for representing a socket.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.Communication.Sockets.ISocket.OnSocketClosed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Sockets.ISocket.Identifier">
            <summary>
            Get the unique ID identifying this socket in the networking context.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Sockets.ISocket.IsShutdown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Sockets.ISocket.IsConnected">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.Send(System.Byte[])">
            <summary>
            Send <paramref name="data"/> to socket endpoint.
            </summary>
            <param name="data">The binary data to send.</param>
            <returns>The amount of bytes that were sent.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.Receive(System.Byte[])">
            <summary>
            Receive bytes and stor in <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The buffer to store received bytes in.</param>
            <remarks>Blocking method.</remarks>
            <returns>The amount of bytes received.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.ReceiveFull">
            <summary>
            Receive all bytes from external source.
            </summary>
            <remarks>Blocking method.</remarks>
            <returns>A buffer containing the full incoming message.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.ReceiveFull(Battlegrounds.Networking.Communication.Sockets.ISocketAsyncOperation)">
            <summary>
            Receive all bytes from external source.
            </summary>
            <remarks>Async method.</remarks>
            <param name="operationSuccess"></param>
            <returns>An <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocketAsyncOperation"/> object based on the operation.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            Shutdown the <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocket"/> connection using specified <paramref name="shutdownFlag"/>.
            </summary>
            <param name="shutdownFlag">The elements of the socket to shutdown.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.Connect(System.Net.EndPoint)">
            <summary>
            Connect the <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocket"/> to a remote endpoint.
            </summary>
            <param name="endPoint">The endpoint to connect to.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.Close">
            <summary>
            Close the socket completely.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.Dispose">
            <summary>
            Disposes of the socket
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Sockets.AsyncOperationSuccess">
            <summary>
            Delegate that is invoked when an async operation has succeeded in a <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocketAsyncOperation"/> context.
            </summary>
            <param name="socket">The socket used to carry out the async operation.</param>
            <param name="operation">The operation that was successfully executed.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Sockets.ISocketAsyncOperation">
            <summary>
            Interface representing an async operation carried out by an <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocket"/> instance.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Sockets.ISocketAsyncOperation.Success">
            <summary>
            Get the operation success callback handle.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocketAsyncOperation.Wait">
            <summary>
            Wait for the async operation to complete.
            </summary>
            <returns>If no error occured, <see langword="false"/> is returned; Otherwise <see langword="true"/>, signifying there was an error.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocketAsyncOperation.Set(System.Boolean)">
            <summary>
            Set the internal wait handler such that any threads waiting for the async operation can continue.
            </summary>
            <param name="isError">Set if the reason for setting the wait handle is because of an error.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Sockets.TcpAsyncOperation">
            <summary>
            Represents an asynchronous operation performed by a <see cref="T:Battlegrounds.Networking.Communication.Sockets.TcpSocket"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Sockets.TcpAsyncOperation.Success">
            <summary>
            Get the operation success callback handle.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.TcpAsyncOperation.#ctor(Battlegrounds.Networking.Communication.Sockets.AsyncOperationSuccess,System.Threading.ManualResetEventSlim)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.Sockets.TcpAsyncOperation"/> class with specified <see cref="T:Battlegrounds.Networking.Communication.Sockets.AsyncOperationSuccess"/> delegate.
            </summary>
            <param name="onSuccess">The method to handle success events.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.TcpAsyncOperation.Set(System.Boolean)">
            <summary>
            Set the internal wait handler such that any threads waiting for the async operation can continue.
            </summary>
            <param name="isError">Set if the reason for setting the wait handle is because of an error.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.TcpAsyncOperation.Wait">
            <summary>
            Wait for the async operation to complete.
            </summary>
            <returns>If no error occured, <see langword="false"/> is returned; Otherwise <see langword="true"/>, signifying there was an error.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Sockets.TcpSocket">
            <summary>
            Wrapper class for a <see cref="T:System.Net.Sockets.Socket"/> class that is compliant with the <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocket"/> interface and uses the TCP protocl for sending and receiving data.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Sockets.TcpSocket.AddressFamily">
            <summary>
            Get the address family used by the socket.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.TcpSocket.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.Sockets.TcpSocket"/> using specified <paramref name="addressFamily"/>.
            </summary>
            <param name="addressFamily">The address family the socket should use.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.TcpSocket.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.Sockets.TcpSocket"/> using a .NET socket.
            </summary>
            <param name="original">The original <see cref="T:System.Net.Sockets.Socket"/> instance that will handle the actual operations.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.TcpSocket.#ctor(System.Net.Sockets.Socket,System.UInt64)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.Sockets.TcpSocket"/> using a .NET socket with a specified unique ID.
            </summary>
            <param name="original">The original <see cref="T:System.Net.Sockets.Socket"/> instance that will handle the actual operations.</param>
            <param name="identifier">The unique ID identifying the socket.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.TcpSocket.SetIdentifier(System.UInt64)">
            <summary>
            Set the unique identifier of the <see cref="T:Battlegrounds.Networking.Communication.Sockets.TcpSocket"/>.
            </summary>
            <param name="id">The unique ID to assign to the socket.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.StringDirectory">
            <summary>
            Static helper class for converting a string between a directory path and namespace path.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.StringDirectory.GetPathAsNamespaceString(System.String)">
            <summary>
            Get <paramref name="input"/> as a namespace string.
            </summary>
            <param name="input">The input string to convert.</param>
            <returns>A new string instance representing the namespace path of <paramref name="input"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.StringDirectory.GetNamespaceStringAsPath(System.String)">
            <summary>
            Get <paramref name="input"/> as a directory path string.
            </summary>
            <param name="input">The input string to convert.</param>
            <returns>A new string instance representing the directory path of <paramref name="input"/>.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.UniqueMessageService">
            <summary>
            Static utility class for generating a unique ID for messages.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.UniqueMessageService.GetMessageId(System.Int32)">
            <summary>
            Get a unique message ID based on <paramref name="seed"/> and partial GUID.
            </summary>
            <param name="seed">The random seed to help generate a random ID.</param>
            <returns>A random ID that can be used to identify messages.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.DataStructures.FixedLengthStack`1">
            <summary>
            Class representing a stack of fixed length with extended stack manipulation functionality.
            </summary>
            <typeparam name="T">The type of the object being stored within the stack.</typeparam>
        </member>
        <member name="P:Battlegrounds.Networking.DataStructures.FixedLengthStack`1.Top">
            <summary>
            Get the current index of the top-stack pointer.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.DataStructures.FixedLengthStack`1.Length">
            <summary>
            Get the fixed length of the stack.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.DataStructures.FixedLengthStack`1.Count">
            <summary>
            Get the current amount of items on the stack.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.FixedLengthStack`1.#ctor(System.Int32)">
            <summary>
            Initialise a new and empty <see cref="T:Battlegrounds.Networking.DataStructures.FixedLengthStack`1"/> instance of fixed-length <paramref name="stackSize"/>.
            </summary>
            <param name="stackSize">The size of the stack.</param>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.FixedLengthStack`1.#ctor(Battlegrounds.Networking.DataStructures.FixedLengthStack{`0})">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.DataStructures.FixedLengthStack`1"/> instance based on the <paramref name="stack"/> instance.
            </summary>
            <param name="stack">The stack to copy stack data from.</param>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.FixedLengthStack`1.Select``1(System.Func{`0,``0})">
            <summary>
            Select all values on the stack using the <paramref name="selector"/> function.
            </summary>
            <typeparam name="V">The result of the selector operation.</typeparam>
            <param name="selector">The function to apply on each element on the stack.</param>
            <returns>An array containing the result of the <paramref name="selector"/> function applied on each stack element.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.FixedLengthStack`1.Clear">
            <summary>
            Clear the stack so no elements remain on the stack.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.FixedLengthStack`1.Push(`0)">
            <summary>
            Push <paramref name="value"/> onto the stack.
            </summary>
            <param name="value">The value to push onto the stack.</param>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.FixedLengthStack`1.Pop">
            <summary>
            Pop the top-level value from the stack.
            </summary>
            <returns>The top-level value.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.FixedLengthStack`1.Pop(System.Int32)">
            <summary>
            Pop <paramref name="count"/> elements from the stack.
            </summary>
            <param name="count">The amount of elements to pop from the stack.</param>
            <returns>An array containing all the popped elements (in order).</returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.FixedLengthStack`1.Peek">
            <summary>
            Get the top-stack value without popping it from the stack.
            </summary>
            <returns>The top value of the stack.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.FixedLengthStack`1.Swap(System.Int32)">
            <summary>
            Swap the current top-level stack value with one further down the stack.
            </summary>
            <param name="stackOffset">The offset from the top of the stack to swap with.</param>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.FixedLengthStack`1.Duplicate">
            <summary>
            Duplicates the current top-stack value.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.DataStructures.ISynchronizedTimer">
            <summary>
            Interface for a synchronized timer.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.OnTimedDown">
            <summary>
            Even triggered when timer has timed down.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.OnStarted">
            <summary>
            Event triggered when timer is started.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.OnCancel">
            <summary>
            Event triggered when timer is cancelled.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.OnPulse">
            <summary>
            Event triggered when timer is set to pulse.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.IsStarted">
            <summary>
            Get if the timer has started.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.GetRemaining">
            <summary>
            Get the remaining amount of time.
            </summary>
            <returns>A <see cref="T:System.TimeSpan"/> describing the reamining time.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.Start">
            <summary>
            Start the timer.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.Cancel(System.Object)">
            <summary>
            Cancel the timer.
            </summary>
            <param name="argument">The argument to pass along when cancelling.</param>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.RegisterEvents(Battlegrounds.Networking.DataStructures.ISynchronizedTimer,System.Action,System.Action,System.Action{System.Object},System.Action{System.TimeSpan})">
            <summary>
            Register relevant timer events for an <see cref="T:Battlegrounds.Networking.DataStructures.ISynchronizedTimer"/> instance.
            </summary>
            <param name="timer">The timer to add event subscriptions to.</param>
            <param name="done">The ondone event.</param>
            <param name="started">The onstarted event.</param>
            <param name="cancel">The oncancel event.</param>
            <param name="pulse">The onpulse event.</param>
        </member>
        <member name="T:Battlegrounds.Networking.DataStructures.SynchronizedTimer">
            <summary>
            Represents a time down object that can time down across multiple machines in a semi-synchronized order.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.DataStructures.SynchronizedTimer.IsStarted">
            <summary>
            Get if the timer has started.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.DataStructures.SynchronizedTimer.ElapsedTime">
            <summary>
            Get the amount of time passed since timer was started.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.DataStructures.SynchronizedTimer.TrackingID">
            <summary>
            Get the ID of the <see cref="T:Battlegrounds.Networking.DataStructures.SynchronizedTimer"/> such that proxy objects can refer to it.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.SynchronizedTimer.OnStarted">
            <summary>
            Event triggered when timer is started.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.SynchronizedTimer.OnTimedDown">
            <summary>
            Even triggered when timer has timed down.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.SynchronizedTimer.OnCancel">
            <summary>
            Event triggered when timer is cancelled.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.SynchronizedTimer.OnPulse">
            <summary>
            Event triggered when timer is set to pulse.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.SynchronizedTimer.#ctor(Battlegrounds.Networking.Requests.IRequestHandler,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.DataStructures.SynchronizedTimer"/> class intended for remote-timing.
            </summary>
            <param name="requestHandler">The request handler that will handle requests.</param>
            <param name="time">The amount of time to time down from.</param>
            <param name="syncDelay">The amount of time to wait before starting the countdown on the host-side.</param>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.SynchronizedTimer.GetRemaining">
            <summary>
            Get the remaining amount of time.
            </summary>
            <returns>A <see cref="T:System.TimeSpan"/> describing the reamining time.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.SynchronizedTimer.Start">
            <summary>
            Start the timer.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.SynchronizedTimer.Cancel(System.Object)">
            <summary>
            Cancel the timer.
            </summary>
            <param name="argument">The argument to pass along when cancelling.</param>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.SynchronizedTimer.SetId(Battlegrounds.Networking.Remoting.Objects.IObjectID)">
            <summary>
            Set the tracking ID of the <see cref="T:Battlegrounds.Networking.DataStructures.SynchronizedTimer"/>.
            </summary>
            <param name="id">The ID assigned to the instance.</param>
        </member>
        <member name="T:Battlegrounds.Networking.DataStructures.ProxySynchronizedTimer">
            <summary>
            Proxy representation of a remote <see cref="T:Battlegrounds.Networking.DataStructures.ISynchronizedTimer"/> instance.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.ProxySynchronizedTimer.OnStarted">
            <summary>
            Event triggered when timer is started.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.ProxySynchronizedTimer.OnTimedDown">
            <summary>
            Even triggered when timer has timed down.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.ProxySynchronizedTimer.OnCancel">
            <summary>
            Event triggered when timer is cancelled.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.ProxySynchronizedTimer.OnPulse">
            <summary>
            Event triggered when timer is set to pulse.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.DataStructures.ProxySynchronizedTimer.RequestHandler">
            <summary>
            Get the request handler of the timer.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.DataStructures.ProxySynchronizedTimer.ObjectID">
            <summary>
            Get the Object ID of the timer.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.DataStructures.ProxySynchronizedTimer.ObjectRole">
            <summary>
            Get the role of the proxy.
            </summary>
            <remarks>
            Role: <see cref="T:Battlegrounds.Networking.DataStructures.ISynchronizedTimer"/>
            </remarks>
        </member>
        <member name="P:Battlegrounds.Networking.DataStructures.ProxySynchronizedTimer.IsStarted">
            <summary>
            Get if the timer has started.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.ProxySynchronizedTimer.#ctor(Battlegrounds.Networking.Remoting.Objects.IObjectID,Battlegrounds.Networking.Requests.IRequestHandler)">
            <summary>
            Create a new <see cref="T:Battlegrounds.Networking.DataStructures.ProxySynchronizedTimer"/> instance.
            </summary>
            <param name="objectID">The ID of the proxy.</param>
            <param name="requestHandler">The request handler for handling communication with remote object.</param>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.ProxySynchronizedTimer.Invoke(System.String,System.Object[])">
            <summary>
            Invoke a method on the <see cref="T:Battlegrounds.Networking.Proxy.IProxy"/>.
            </summary>
            <param name="method">The name of the method to invoke.</param>
            <param name="args">The arguments to pass to the method.</param>
            <returns>The return value of the method. If none is returned, <see langword="null"/> is returned.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.ProxySynchronizedTimer.Start">
            <summary>
            Start the timer.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.ProxySynchronizedTimer.Cancel(System.Object)">
            <summary>
            Cancel the timer.
            </summary>
            <param name="argument">The argument to pass along when cancelling.</param>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.ProxySynchronizedTimer.GetRemaining">
            <summary>
            Get the remaining amount of time.
            </summary>
            <returns>A <see cref="T:System.TimeSpan"/> describing the reamining time.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.DataStructures.VolatileList`1">
            <summary>
            Represents a list of elements that are shared among several threads.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Battlegrounds.Networking.DataStructures.VolatileList`1.Size">
            <summary>
            Get the size of the list.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.#ctor">
            <summary>
            Initialize a new and empty <see cref="T:Battlegrounds.Networking.DataStructures.VolatileList`1"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.Add(`0)">
            <summary>
            Add <paramref name="item"/> to list.
            </summary>
            <param name="item">The new item to add to the list.</param>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.Select(System.Predicate{`0},`0@)">
            <summary>
            Select the first <paramref name="selectPredicate"/> matching element in list.
            </summary>
            <param name="selectPredicate">The predicate to use when determining if element should be selected.</param>
            <param name="element">The element that was selected.</param>
            <returns>If an element was selected <see langword="true"/> is returned; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.Remove(`0)">
            <summary>
            Remove <paramref name="element"/> from list.
            </summary>
            <param name="element">The element to remove from the list.</param>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.Min">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.Max">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.Sum(`0,System.Func{`0,`0,`0})">
            <summary>
            
            </summary>
            <param name="initial"></param>
            <param name="sumFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.ToList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Debugging.Print">
            <summary>
            Static helper class containing functions for debuging code.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Debugging.Print.Printf(System.Object,System.Object[])">
            <summary>
            Print formatted <paramref name="message"/>.
            </summary>
            <param name="message">The message to format and print.</param>
            <param name="args">The arguments to pass to the formatting.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Debugging.Print.PrintfIf(System.Boolean,System.Object,System.Object[])">
            <summary>
            Print formatted <paramref name="message"/> if <paramref name="condition"/>.
            </summary>
            <param name="condition">The condition to check</param>
            <param name="message">The message to format and print.</param>
            <param name="args">The arguments to pass to the formatting.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Debugging.Print.Printuf(System.Object)">
            <summary>
            Print an unformatted <paramref name="message"/>.
            </summary>
            <param name="message">The message to print.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Debugging.TraceRequestHandler">
            <summary>
            Request handler that only traces requests. Will forward to sub-request handler if specified.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Debugging.TraceRequestHandler.ReceivedMessages">
            <summary>
            Get a list of received messages.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Debugging.TraceRequestHandler.SentRequests">
            <summary>
            Get a list of sent requests in string format.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Debugging.TraceRequestHandler.RequestHandler">
            <summary>
            Get or set the actual request handler that will handle requests.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Debugging.TraceRequestHandler.#ctor(Battlegrounds.Networking.Communication.Connections.IConnection)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Debugging.TraceRequestHandler"/> with specified <paramref name="connection"/>.
            </summary>
            <param name="connection">The connection that the request handler will use.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Debugging.TraceRequestHandler.#ctor(Battlegrounds.Networking.Requests.IRequestHandler)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Debugging.TraceRequestHandler"/> with specified <paramref name="requestHandler"/> and underlying <see cref="T:Battlegrounds.Networking.Communication.Connections.IConnection"/>.
            </summary>
            <param name="requestHandler">The request handler that will handle the actual requests.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Memory.CollectionCache`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.CollectionCache`1.Update">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.CollectionCache`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.CollectionCache`1.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.#ctor(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="objectLifeSpan"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.GetCacheEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.Lookup(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.LookupValue(System.Int32,System.Func{`0})">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.LookupValue(System.Int32,System.Object,System.Func{System.Object,`0})">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="arg"></param>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Memory.ObjectCacheChangedEventHandler`1">
            <summary>
            Event handler delegate for handling value changes in a <see cref="T:Battlegrounds.Networking.Memory.ObjectCache`1"/> object.
            </summary>
            <typeparam name="T">The class type being cached.</typeparam>
            <param name="oldValue">The old cached value.</param>
            <param name="newValue">The new cached value.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Memory.ObjectCache">
            <summary>
            Class representing an object that is being cached in memory.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Memory.ObjectCache.m_cachedValue">
            <summary>
            The cached value.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Memory.ObjectCache.m_lastUpdate">
            <summary>
            The date and time of last cache value update
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.ObjectCache.Value">
            <summary>
            Get the current cached value.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.ObjectCache.IsValid">
            <summary>
            Get if the current cached value is considered valid.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.Memory.ObjectCache.CachedValueChanged">
            <summary>
            Event triggered when the cached value is updated.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache.#ctor(System.TimeSpan)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Memory.ObjectCache"/> instance where a value is stored by <paramref name="cacheLifeSpan"/>.
            </summary>
            <param name="cacheLifeSpan">The amount of time to keep a value cached before the value is updated.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache.#ctor(System.Object,System.TimeSpan)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Memory.ObjectCache"/> with time and initial value specified.
            </summary>
            <param name="cacheValue">The value to store in memory.</param>
            <param name="cacheLifeSpan">The amount of time to keep a value cached before the value is updated.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache.GetCachedValue(System.Func{System.Object})">
            <summary>
            Get the cached value or get an updated one through <paramref name="updateMethod"/>.
            </summary>
            <param name="updateMethod">The method to invoke to get an updated cache value.</param>
            <returns>The stored cache value.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache.GetCachedValue(System.Object,System.Func{System.Object,System.Object})">
            <summary>
            Get the cached value or get an updated one through <paramref name="updateMethod"/>.
            </summary>
            <param name="updateArgument">The argument to pass along to the update method.</param>
            <param name="updateMethod">The method to invoke to get an updated cache value.</param>
            <returns>The stored cache value.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache.SetCachedValue(System.Object)">
            <summary>
            Set a new cached value and update lifetime.
            </summary>
            <param name="newValue">The new value to set as cached.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache.Null">
            <summary>
            Set the stored value to null.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Memory.ObjectCache`1">
            <summary>
            Class representing an object that is being cached in memory.
            </summary>
            <typeparam name="T">The type of the stored value.</typeparam>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.ObjectCache`1.Value">
            <summary>
            Get the current cached value.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.Memory.ObjectCache`1.CachedValueChanged">
            <summary>
            Event triggered when the cached value is updated.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache`1.#ctor(System.TimeSpan)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Memory.ObjectCache"/> instance where a value is stored by <paramref name="cacheLifeSpan"/>.
            </summary>
            <param name="cacheLifeSpan">The amount of time to keep a value cached before the value is updated.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache`1.#ctor(System.Object,System.TimeSpan)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Memory.ObjectCache"/> with time and initial value specified.
            </summary>
            <param name="cacheValue">The value to store in memory.</param>
            <param name="cacheLifeSpan">The amount of time to keep a value cached before the value is updated.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache`1.GetCachedValue(System.Func{`0})">
            <summary>
            Get the cached value or get an updated one through <paramref name="updateMethod"/>.
            </summary>
            <param name="updateMethod">The method to invoke to get an updated cache value.</param>
            <returns>The stored cache value.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache`1.GetCachedValue(System.Object,System.Func{System.Object,`0})">
            <summary>
            Get the cached value or get an updated one through <paramref name="updateMethod"/>.
            </summary>
            <param name="updateArgument">The argument to pass along to the update method.</param>
            <param name="updateMethod">The method to invoke to get an updated cache value.</param>
            <returns>The stored cache value.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache`1.SetCachedValue(`0)">
            <summary>
            Set a new cached value and update lifetime.
            </summary>
            <param name="newValue">The new value to set as cached.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Memory.ValueCacheChangedEventHandler`1">
            <summary>
            Event handler delegate for handling value changes in a <see cref="T:Battlegrounds.Networking.Memory.ValueCache`1"/> object.
            </summary>
            <typeparam name="T">The value type being cached.</typeparam>
            <param name="oldValue">The old cached value.</param>
            <param name="newValue">The new cached value.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Memory.ValueCache`1">
            <summary>
            Class representing a value that is being cached in memory.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.ValueCache`1.Value">
            <summary>
            Get the current cached value.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.ValueCache`1.IsValid">
            <summary>
            Get if the current cached value is considered valid.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.Memory.ValueCache`1.CachedValueChanged">
            <summary>
            Event triggered when the cached value is updated.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ValueCache`1.#ctor(System.TimeSpan)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Memory.ObjectCache"/> instance where a value is stored by <paramref name="cacheLifeSpan"/>.
            </summary>
            <param name="cacheLifeSpan">The amount of time to keep a value cached before the value is updated.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ValueCache`1.#ctor(`0,System.TimeSpan)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Memory.ObjectCache"/> with time and initial value specified.
            </summary>
            <param name="cacheValue">The value to store in memory.</param>
            <param name="cacheLifeSpan">The amount of time to keep a value cached before the value is updated.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ValueCache`1.GetCachedValue(System.Func{`0})">
            <summary>
            Get the cached value or get an updated one through <paramref name="updateMethod"/>.
            </summary>
            <param name="updateMethod">The method to invoke to get an updated cache value.</param>
            <returns>The stored cache value.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ValueCache`1.GetCachedValue(`0,System.Func{`0,`0})">
            <summary>
            Get the cached value or get an updated one through <paramref name="updateMethod"/>.
            </summary>
            <param name="updateArgument">The argument to pass along to the update method.</param>
            <param name="updateMethod">The method to invoke to get an updated cache value.</param>
            <returns>The stored cache value.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ValueCache`1.SetCachedValue(`0)">
            <summary>
            Set a new cached value and update lifetime.
            </summary>
            <param name="newValue">The new value to set as cached.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ValueCache`1.op_Implicit(Battlegrounds.Networking.Memory.ValueCache{`0})~`0">
            <summary>
            
            </summary>
            <param name="cache"></param>
        </member>
        <member name="T:Battlegrounds.Networking.NetworkInterface">
            <summary>
            Static class for setting global network interface values
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.TimeoutMilliseconds">
            <summary>
            Get or set the amount of milliseconds to wait for a response (before resending a request)
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.ResendAttempts">
            <summary>
            Get or set the amount of resends to attempt for a response.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.ReceiveBufferSize">
            <summary>
            Get or set the size of the receive buffer.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.SendBufferSize">
            <summary>
            Get or set the size of the send buffer.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.LogDispatchCalls">
            <summary>
            Get or set if dispatching class should be logged.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.LogAPICalls">
            <summary>
            Get or set if API class should be logged.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.AllowLocalServerInstance">
            <summary>
            Get or set if the interface will accept local server instances.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.LocalAddress">
            <summary>
            Get or set the local address
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.APIObject">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Server.ServerAPI"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.NetworkInterface.Setup">
            <summary>
            Setup the network API.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.NetworkInterface.GetBestAddress">
            <summary>
            Get the best server address available.
            </summary>
            <returns>The IP address of the best available address that can be connected to.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.NetworkInterface.PingServer(System.String,System.Int32,System.Int32)">
            <summary>
            Ping specified server at <paramref name="address"/> using <paramref name="port"/>.
            </summary>
            <param name="address">The addres to ping.</param>
            <param name="port">The port to ping.</param>
            <param name="timeout">The amount of milliseconds to wait before timing out the ping request.</param>
            <returns>If a ping response was given, <see langword="true"/>; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.NetworkInterface.HasLocalServer">
            <summary>
            Get if there's a local server instance running.
            </summary>
            <returns><see langword="true"/> if there's a local server instance running; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.NetworkInterface.RegisterConnection(Battlegrounds.Networking.Communication.Connections.IConnection)">
            <summary>
            Register a connection with the interface.
            </summary>
            <param name="connection">The connection instance to register</param>
        </member>
        <member name="M:Battlegrounds.Networking.NetworkInterface.Shutdown">
            <summary>
            Shutdown all active connections.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Proxy.IProxy">
            <summary>
            Interface for implementing a proxy object that represents an object on a non-host side.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Proxy.IProxy.RequestHandler">
            <summary>
            Get the request handler of the proxy.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Proxy.IProxy.ObjectID">
            <summary>
            Get the object ID identifying the remote object the proxy represents.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Proxy.IProxy.ObjectRole">
            <summary>
            Get the role type the proxy is representing.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.IProxy.Invoke(System.String,System.Object[])">
            <summary>
            Invoke a method on the <see cref="T:Battlegrounds.Networking.Proxy.IProxy"/>.
            </summary>
            <param name="method">The name of the method to invoke.</param>
            <param name="args">The arguments to pass to the method.</param>
            <returns>The return value of the method. If none is returned, <see langword="null"/> is returned.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Proxy.IProxyTrackable">
            <summary>
            Interface for non-proxy elements
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Proxy.IProxyTrackable.TrackingID">
            <summary>
            Get the trackable ID associated with the object.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.IProxyTrackable.SetId(Battlegrounds.Networking.Remoting.Objects.IObjectID)">
            <summary>
            Set the ID that the object can use to track itself.
            </summary>
            <param name="id">The ID of the object.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Proxy.IStateCapturable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.IStateCapturable.CaptureState">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Proxy.ProxyCall">
            <summary>
            Static utility class for extending the functionality of a proxy call.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.ProxyCall.GetRemoteProperty``1(Battlegrounds.Networking.Proxy.IProxy,System.String)">
            <summary>
            Sends a request to the remote instance for fetching <paramref name="property"/> value.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="proxy">The proxy object getting the remote property.</param>
            <param name="property">The property to get the value of from remote instance.</param>
            <returns>If request is a success, the remote value of <paramref name="property"/>; Otherwise <see langword="default"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.ProxyCall.SetRemoteProperty``1(Battlegrounds.Networking.Proxy.IProxy,System.String,``0)">
            <summary>
            Sends a request to the remote instance for fetching <paramref name="property"/> value.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="proxy">The proxy object getting the remote property.</param>
            <param name="property">The property to get the value of from remote instance.</param>
            <param name="value">The value to set.</param>
            <returns>If request is a success, the remote value of <paramref name="property"/>; Otherwise <see langword="default"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.ProxyCall.CallRemoteMethod``1(Battlegrounds.Networking.Proxy.IProxy,System.String,System.Object[])">
            <summary>
            Sends an invoke request to the remote instance with given arguments.
            </summary>
            <typeparam name="T">The expected return type.</typeparam>
            <param name="proxy">The proxy object calling remote method.</param>
            <param name="remoteMethodName">The name of the remote method to invoke.</param>
            <param name="args">The arguments to send along with the request.</param>
            <returns>If remote call was executed, the returned value. Otherwise the <see langword="default"/> value of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.ProxyCall.CallRemoteVoidMethod(Battlegrounds.Networking.Proxy.IProxy,System.String,System.Object[])">
            <summary>
            Sends an invoke request to the remote instance with given arguments, expecting no return value.
            </summary>
            <param name="proxy">The proxy object calling remote method.</param>
            <param name="remoteMethodName">The name of the remote method to invoke.</param>
            <param name="args">The arguments to send along with the request.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.ProxyCall.CallRemoteVoidMethodEverywhere(Battlegrounds.Networking.Proxy.IProxy,System.String,System.Object[])">
            <summary>
            Sends a broadcast request to remote instances with given arguments, expecting no return value.
            </summary>
            <param name="proxy">The proxy object calling remote method.</param>
            <param name="remoteMethodName">The name of the remote method to invoke.</param>
            <param name="args">The arguments to send along with the request.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.IStaticInterface">
            <summary>
            Represents a static interface for interacting with static objects.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.IStaticInterface.ObjectPool">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.Objects.IObjectPool"/> which keeps track of the static instances.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.IStaticInterface.Create``1(System.String,System.Object[])">
            <summary>
            Create a new <typeparamref name="T"/> with specified <paramref name="identifier"/>.
            </summary>
            <typeparam name="T">The type of object to instantiate.</typeparam>
            <param name="identifier">The name to use to identify the object.</param>
            <param name="args">The arguments to pass along to the constructor.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Objects.IObjectID"/> returned by the <see cref="T:Battlegrounds.Networking.Remoting.Objects.IObjectPool"/> on register.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.IStaticInterface.FromID(System.String)">
            <summary>
            
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.IStaticInterface.Publish(Battlegrounds.Networking.Requests.IRequestHandler,Battlegrounds.Networking.Proxy.IProxyTrackable)">
            <summary>
            Publish the ID of a static instance to remote clients.
            </summary>
            <param name="handler">The handler to send publish event with.</param>
            <param name="trackable">The trackable object to publish</param>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Mangler">
            <summary>
            Static utility class for mangling and demangling remote call data.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Mangler.PROPERTY_GET">
            <summary>
            Operation ID for getting the value of a property.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Mangler.PROPERTY_SET">
            <summary>
            Operation ID for setting the value of a property.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Mangler.Mangle(System.String,System.String,System.String)">
            <summary>
            Mangle the data into a single string value.
            </summary>
            <param name="objType">The object type.</param>
            <param name="name">The name of the property</param>
            <param name="operation">The operation ID</param>
            <returns>A mangled string describing the remote operation.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Mangler.Demangle(System.String)">
            <summary>
            Demangle a string.
            </summary>
            <param name="mangled">The string to demangle.</param>
            <returns>A tuple of three string values that contains the demangled strings.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Objects.IObjectID">
            <summary>
            Interface for ID of objects that can be accessed remotely.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Objects.IObjectID.ToString">
            <summary>
            Convert the Id into a string representation.
            </summary>
            <returns>A string representation of the ID.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Objects.IObjectID.FromString(System.String)">
            <summary>
            Parse the <paramref name="str"/> input into a <see cref="T:Battlegrounds.Networking.Remoting.Objects.IObjectID"/> representation.
            </summary>
            <param name="str">The string value to convert into a <see cref="T:Battlegrounds.Networking.Remoting.Objects.IObjectID"/> object.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Objects.IObjectPool">
            <summary>
            Interface for representing a pool of objects that are identified by a unique <see cref="T:Battlegrounds.Networking.Remoting.Objects.IObjectID"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Objects.IObjectPool.Register(System.Object)">
            <summary>
            Register a new object in the pool.
            </summary>
            <param name="obj">The instance to register in object pool.</param>
            <returns>The unique ID assigned to the object.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Objects.IObjectPool.RegisterIfNotFound(System.Object)">
            <summary>
            Register a new object in the pool if it is not already registered.
            </summary>
            <param name="obj">The instance to register if not found.</param>
            <returns>The unique ID assigned to the object.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Objects.IObjectPool.Get(Battlegrounds.Networking.Remoting.Objects.IObjectID)">
            <summary>
            Get the instance by <paramref name="id"/>.
            </summary>
            <param name="id">The unique ID to get object with.</param>
            <returns>If object exists in pool, then the requested <see cref="T:System.Object"/> is returned; Otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Objects.IObjectPool.Exists(Battlegrounds.Networking.Remoting.Objects.IObjectID)">
            <summary>
            Check if the specified <paramref name="id"/> exists in the pool.
            </summary>
            <param name="id">The unique ID to check.</param>
            <returns>If ID is registered, <see langword="true"/>; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Objects.SendableObjectConstructor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Objects.SendableObjectConstructor.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Objects.SendableObjectConstructor.Binary">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Objects.SendableObjectConstructor.BinaryRequestHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Objects.ISendableObject">
            <summary>
            Interface of an object that can be sent along with an <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Objects.ISendableObject.Constructor">
            <summary>
            Get the method in which the object should be reconstructed.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Objects.ISendableObject.Reconstruct(System.Byte[],Battlegrounds.Networking.Requests.IRequestHandler)">
            <summary>
            Reconstruct the object from its binary representation.
            </summary>
            <param name="data">The binary representation of the object.</param>
            <param name="requestHandler">The request handler to use while deconstructing the object.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Objects.ISendableObject.ToBytes">
            <summary>
            Convert the object into its binary representation.
            </summary>
            <returns>A binary representation of the object.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Objects.ObjectCachedPool">
            <summary>
            Object pool keeping track of <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/> instances optimised for remote-call functionality.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Objects.ObjectCachedPool.#ctor">
            <summary>
            Initialize a new and empty <see cref="T:Battlegrounds.Networking.Remoting.Objects.ObjectCachedPool"/> instance.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Objects.ObjectInstanceHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Objects.ObjectInstanceHandler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Objects.ObjectKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Objects.ObjectKey.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Objects.ObjectKey.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Objects.ObjectKey.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="k"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Objects.ObjectPool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Objects.ObjectPool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Query.CommandQuery">
            <summary>
            Class representing a query consisting of executable command instructions that can be executed locally or remotely through a <see cref="T:Battlegrounds.Networking.Requests.IRequestHandler"/>.
            </summary>
            <remarks>
            Usage motivation: Invoke a sequence of commands remotely, causuing less server communication.
            </remarks>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Query.CommandQuery.Constructor">
            <summary>
            Get the method in which the object should be reconstructed.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Query.CommandQuery.Instructions">
            <summary>
            Get the instructions of the query.
            </summary>
            <remarks>
            This is an internal property!
            </remarks>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQuery.#ctor(System.Byte[],Battlegrounds.Networking.Requests.IRequestHandler)">
            <summary>
            
            </summary>
            <param name="binaryData"></param>
            <param name="requestHandler"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQuery.Execute(Battlegrounds.Networking.Remoting.Objects.IObjectPool)">
            <summary>
            Execute the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/> using the <paramref name="objectPool"/>.
            </summary>
            <param name="objectPool">The object pool to fetch objects from.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResult"/> instance containing the collected query results.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQuery.ExecuteRemote(Battlegrounds.Networking.Requests.IRequestHandler)">
            <summary>
            Execute the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/> instance on a remote instance through the <see cref="T:Battlegrounds.Networking.Requests.IRequestHandler"/>.
            </summary>
            <param name="requestHandler">The request handler to use for sending and receiving the query data.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResult"/> returned by the remote instance.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQuery.CreateQuery(Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder)">
            <summary>
            Create a <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/> instance from a <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> instance.
            </summary>
            <param name="builder">The builder containing the command query instructions.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/> instance based on the data from the <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQuery.Reconstruct(System.Byte[],Battlegrounds.Networking.Requests.IRequestHandler)">
            <summary>
            Reconstruct the object from its binary representation.
            </summary>
            <param name="data">The binary representation of the object.</param>
            <param name="requestHandler">The request handler to use while deconstructing the object.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQuery.ToBytes">
            <summary>
            Convert the object into its binary representation.
            </summary>
            <returns>A binary representation of the object.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder">
            <summary>
            Class that is used for building a <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/> through a series of chained method calls.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.#ctor">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> instance.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.#ctor(Battlegrounds.Networking.Requests.IRequestHandler)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> instance bound to a specific <see cref="T:Battlegrounds.Networking.Requests.IRequestHandler"/>.
            </summary>
            <param name="requestHandler">The reuest handler to bind to the command query.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.#ctor(Battlegrounds.Networking.Remoting.Query.CommandQuery)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> instance based on the existing <paramref name="commandQuery"/>.
            </summary>
            <param name="commandQuery">The command query to construct the new query from.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.Clear">
            <summary>
            Clear the instructions currently defined in the query.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.GetObject(Battlegrounds.Networking.Remoting.Objects.IObjectID)">
            <summary>
            Instruct the query to fetch an object by its <see cref="T:Battlegrounds.Networking.Remoting.Objects.IObjectID"/> and push it onto the stack.
            </summary>
            <param name="objectID">The ID of the object to fetch.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.Load(System.String)">
            <summary>
            Instruct the query to load the value of a stored variable <paramref name="varname"/> onto the stack. If the <paramref name="varname"/> contains <i>%i</i> 
            the instruction will be saved as a <see cref="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.LOAD_INDEXED"/> instruction and will use the index specified by the enclosing loop instruction.
            </summary>
            <remarks>
            This will push to the top-stack value.
            </remarks>
            <param name="varname">The name of the variable to load value from.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.Push(System.Object[])">
            <summary>
            Push the specified constant <paramref name="values"/> onto the top of the stack.
            </summary>
            <remarks>
            The values being pushed should ONLY be simple value types.
            </remarks>
            <param name="values"></param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.Duplicate(System.Int32)">
            <summary>
            Duplicate the value at the top of the stack.
            </summary>
            <remarks>
            This will not pop the original value.
            </remarks>
            <param name="count">The amount of duplicates to produce.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.Call(System.String)">
            <summary>
            Invoke the specified <paramref name="methodName"/> on the top-stack object using the current stack values as arguments.
            </summary>
            <remarks>
            This will <b><i>NOT</i></b> keep the object on the top of the stack.
            </remarks>
            <param name="methodName">The name of the method to invoke.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.Call(System.String,System.Int32)">
            <summary>
            Invoke the specified <paramref name="methodName"/> on the top-stack object using the current stack values as arguments.
            </summary>
            <remarks>
            This will <b><i>NOT</i></b> keep the object on the top of the stack.
            </remarks>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="count">The amount of stack values to pop as arguments</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.GetProperty(System.String)">
            <summary>
            Get the value of the property of the top-stack object.
            </summary>
            <param name="propertyName"></param>
            <remarks>
            This will <b><i>NOT</i></b> keep the object on the top of the stack.
            </remarks>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.GetProperties(System.String[])">
            <summary>
            Get the value of all the specified properties.
            </summary>
            <remarks>
            This will <b><i>NOT</i></b> keep the object on the top of the stack.
            </remarks>
            <param name="propertyNames">The name of all the properties to get the value of.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.SetProperty(System.String)">
            <summary>
            Set the value of the property of the top-stack value with the second top-stack value on the stack.
            </summary>
            <param name="propertyName"></param>
            <remarks>
            This will keep the object on the top of the stack.
            </remarks>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.Pop">
            <summary>
            Pop the top-stack value from the value stack.
            </summary>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.Stringify">
            <summary>
            Pop the top-stack value from the value stack and invoke "ToString" on it. Then push the return value of "ToString" onto the stack.
            </summary>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.Jsonify">
            <summary>
            Pop the top-stack value from the value stack and invoke the json serialiser on it. Then push the return value onto the stack.
            </summary>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.Swap(System.Int32)">
            <summary>
            Swap the current top-stack value with the value of the <paramref name="offset"/> from the top of the stack.
            </summary>
            <param name="offset">The amount of elements to go back from the top of the stack to swap with.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.Store(System.String)">
            <summary>
            Instruct the query to store the current top-stack value in the results object using <paramref name="varname"/>. If the <paramref name="varname"/> contains <i>%i</i>
            the instruction will be saved as a <see cref="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.STORE_INDEXED"/> instruction and will use the index specified by the enclosing loop instruction.
            If the <paramref name="varname"/> starts with <i>$stack-</i> followed by an integer, the instruction will be saved as a <see cref="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.STORE_STACK"/>
            where it will then use the stack value specified by offset as the storage name. If the offset is 0, it will also pop the value from the stack.
            </summary>
            <remarks>
            This will pop the top-stack value.
            </remarks>
            <param name="varname">The name of the variable to store the top-stack value in.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.Loop(System.Func{Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder,Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder},System.Boolean,System.Boolean)">
            <summary>
            Instruct the query to loop over the collection represented by the top-stack value. If <paramref name="indexed"/> is <see langword="true"/>, the execution engine will keep 
            track of the index in the loop; Enabling the usage of indexed operations such as <see cref="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.STORE_INDEXED"/>.
            If <paramref name="parallel"/> is <see langword="true"/>, the execution engine will execute the subqeru in parallel with the looped object, through the
            <see cref="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.LOOP_PARRALLEL"/> instruction. If <paramref name="indexed"/> is also <see langword="true"/>, the 
            <see cref="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.LOOP_INDEXED_PARRALLEL"/> instruction will be used, and an index will be made available for indexed operations.
            </summary>
            <remarks>
            The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/> execution engine guarantees the collection value is pushed to the value stack before the subquery is invoked on the value.
            </remarks>
            <param name="builder">The function to generate the subquery to invoke on each member of collection.</param>
            <param name="indexed">Should the query attempt to loop over the collection using an index. (Top-stack value must be an array).</param>
            <param name="parallel">Should the query run the constructed subqery in parallel. (Should only be done if dataset is known to be large).</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.Vector(System.Int32)">
            <summary>
            Take the specified <paramref name="count"/> from the stack and put them inside a <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector"/> object that can be iterated over and stored as a
            collection of ordered values. This will preserve the stack order, meaning the top-stack value will be the first element in the vector.
            </summary>
            <param name="count">The amount of items to pop from the stack and vectorise.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.CreateIdentifier">
            <summary>
            Take the top stack value and create and identifier for it and push the idenitifer on top of the stack.
            </summary>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.TestNull(System.Func{Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder,Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder},System.Func{Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder,Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder})">
            <summary>
            Pop the top-stack value and test if the value is <see langword="null"/>. If the value is <see langword="null"/>, the sub-query constructed from <paramref name="ifCase"/> will
            be executed. Otherwise the <paramref name="ifNotCase"/> sub-query will be executed, where the non-<see langword="null"/> value is the top-stack element.
            </summary>
            <param name="ifCase">The sub-query constructor for the case where the top-stack value is <see langword="null"/>.</param>
            <param name="ifNotCase">The sub-query constructor for the case where the top-stack value is not <see langword="null"/>.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.TestEqual(System.Func{Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder,Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder},System.Func{Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder,Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder})">
            <summary>
            Pop the two top-stack values and test if they are equal. Two stack values are considered equal if <see cref="M:System.Object.Equals(System.Object,System.Object)"/> yields <see langword="true"/>.
            If both objects are equal, the subquery constructed from <paramref name="ifCase"/> will be executed, with both objects restored to the stack. If they are not equal,
            the subqery from <paramref name="ifNotCase"/> will be executed, with neither object on the stack.
            </summary>
            <param name="ifCase">The subquery to execute if both stack values are equal. This will have both objects on the stack.</param>
            <param name="ifNotCase">The subquery to execute if the stack values are not equal. This will have neither object on the stack.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.TestFlag(System.Func{Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder,Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder},System.Func{Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder,Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder},System.Object)">
            <summary>
            Pop the top-stack value and test if it is equal to <paramref name="flag"/>. Two values are considered equal if <see cref="M:System.Object.Equals(System.Object,System.Object)"/> 
            yields <see langword="true"/>. If the objects are equal, the subquery constructed from <paramref name="ifCase"/> will be executed, with the object restored to the stack. 
            If they are not equal, the subqery from <paramref name="ifNotCase"/> will be executed, with no object on the stack.
            </summary>
            <param name="ifCase">The subquery to execute if stack value is equal to <paramref name="flag"/>. This will the object on the stack.</param>
            <param name="ifNotCase">The subquery to execute if the stack value is not equal to <paramref name="flag"/>.</param>
            <param name="flag">The flag value to test against.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.Optimise">
            <summary>
            Attempt to apply small instructional optimisations to the query to further increase query execution speed.
            </summary>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.Continue(Battlegrounds.Networking.Remoting.Query.CommandQuery,System.Boolean)">
            <summary>
            Instruct the current query to execute the secondary <paramref name="query"/> as a continuation*.
            </summary>
            <remarks>
            * Unless the <paramref name="asParallel"/> flag is set.
            </remarks>
            <param name="query">The query to continue executing after the current query.</param>
            <param name="asParallel">Should the query run as parallel sub-query to encapsulating query.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> that is constructing the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.GetQuery">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/> that can currently be constructed from the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> instance.
            </summary>
            <returns>A <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/> that will execute the specified instructions.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.SendQuery">
            <summary>
            Send the query to the remote query executor.
            </summary>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResult"/> returned from the remote host.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder.GetInstructions">
            <summary>
            Get the currently added <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryInstruction"/> elements added to the query.
            </summary>
            <returns>An array of <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryInstruction"/> elements.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID">
            <summary>
            Enum representing all available opcodes that can be executed by the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/> engine.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.NOP">
            <summary>
            No operation instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.CALL">
            <summary>
            Call instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.LOAD">
            <summary>
            Load value instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.LOAD_INDEXED">
            <summary>
            Load value by index instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.PUSH">
            <summary>
            Push constant value instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.STORE">
            <summary>
            Store stack value instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.STORE_INDEXED">
            <summary>
            Store stack valye by index instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.STORE_STACK">
            <summary>
            Store top-stack value by the name of the name of the specified value.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.GETOBJ">
            <summary>
            Get object from local object pool instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.GETPROP">
            <summary>
            Get property of object instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.SETPROP">
            <summary>
            Set property value of object instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.LOOP">
            <summary>
            Loop over collection instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.LOOP_INDEXED">
            <summary>
            Loop over array instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.LOOP_PARRALLEL">
            <summary>
            Run loop in parallel instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.LOOP_INDEXED_PARRALLEL">
            <summary>
            Run loop in parallel with index instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.POP">
            <summary>
            Pop top-value instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.DUP">
            <summary>
            Duplicate top-value instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.VECTOR">
            <summary>
            Convert the specified stack elements into a vector that can be operated on instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.SWAP">
            <summary>
            Swap two objects on the stack instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.STRINGIFY">
            <summary>
            Get obj as string instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.JSONIFY">
            <summary>
            Get obj as json instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.TESTNULL">
            <summary>
            Test top-stack for null-value instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.TESTEQUAL">
            <summary>
            Test top-stack if equal to second top-stack value instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.TESTFLAG">
            <summary>
            Test if top stack is equal to instruction flag instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.SUBQUERY">
            <summary>
            Execute a query in parallel with parent query instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID.CREATEIDENTITY">
            <summary>
            Create and identifier of the object and push it to the stack instruction.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Query.CommandQueryInstruction">
            <summary>
            Reoresents an instruction that can be executed by a <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstruction.Instruction">
            <summary>
            The instruction to be executed.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstruction.Identifier">
            <summary>
            The associated string identifier for the instruction.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Query.CommandQueryInstruction.Arguments">
            <summary>
            Additional arguments to be used by the instruction.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryInstruction.#ctor(Battlegrounds.Networking.Remoting.Query.CommandQueryInstructionID,System.String,System.Object[])">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryInstruction"/> with values defined.
            </summary>
            <param name="instructionID">The ID of the instruction to invoke.</param>
            <param name="identifier">The non-unique identifier of the instruction.</param>
            <param name="args">The additional arguments of the instruction</param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryInstruction.ToBytes">
            <summary>
            Convert the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryInstruction"/> into a binary representation.
            </summary>
            <returns>The binary representation of the query instruction.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryInstruction.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResult">
            <summary>
            Class representing the results of the execution of a <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Query.CommandQueryResult.Constructor">
            <summary>
            Get the method in which the object should be reconstructed.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Query.CommandQueryResult.WasExecuted">
            <summary>
            Get if the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/> was executed.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Query.CommandQueryResult.QueryResults">
            <summary>
            Get a readonly dictionary over the query results.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResult.#ctor">
            <summary>
            Initialise a new and oped <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResult"/> instance thay can be modified.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResult.#ctor(System.Boolean)">
            <summary>
            Initialise a new and oped <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResult"/> instance thay can NOT be modified.
            </summary>
            <param name="wasExecuted">Flag setting whether the query was executed or not.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResult.Lock">
            <summary>
            Lock the query from further modifications.
            </summary>
            <remarks>
            This will also remove stored results prefixed with 'tmp_'
            </remarks>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Query.CommandQueryResult.Item(System.String)">
            <summary>
            Get or set the stored value of a query key.
            </summary>
            <remarks>
            The value cannot be changed when the query has been locked.
            </remarks>
            <param name="queryKey">The name of the query key to look up.</param>
            <returns>The object associated with <paramref name="queryKey"/> if found; Otherwise <see langword="null"/>.</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResult.Reconstruct(System.Byte[],Battlegrounds.Networking.Requests.IRequestHandler)">
            <summary>
            Reconstruct the object from its binary representation.
            </summary>
            <param name="data">The binary representation of the object.</param>
            <param name="requestHandler">The request handler to use while deconstructing the object.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResult.ToBytes">
            <summary>
            Convert the object into its binary representation.
            </summary>
            <returns>A binary representation of the object.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector">
            <summary>
            Class representing a vector of up to 256 dimensions of collected values in a <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.Constructor">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.Objects.ISendableObject"/> construction method.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.Dimensions">
            <summary>
            Get the dimension count (Length) of the vector.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.Values">
            <summary>
            Get a read-only collection of the vector values
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.#ctor">
            <summary>
            Initialise a new and empty <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector"/> instance.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.#ctor(System.Object[])">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector"/> instance with <paramref name="vector"/> content.
            </summary>
            <param name="vector">The content of the vector.</param>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.Item(System.Int32)">
            <summary>
            Get the vector element found at dimension <paramref name="index"/>.
            </summary>
            <param name="index">The index of the vector dimension.</param>
            <returns>The stored element at <paramref name="index"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.AsArray">
            <summary>
            Get the vector as an array.
            </summary>
            <returns>The underlying array representation of the vector.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.Reverse">
            <summary>
            Get a reversed instance of the result vector.
            </summary>
            <returns>A new <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector"/> containing the result of the reverse operation.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.ToTuple``2">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector"/> as a tuple of 2 elements
            </summary>
            <typeparam name="T1">The type of the first element.</typeparam>
            <typeparam name="T2">The type of the second element.</typeparam>
            <returns>A tuple consisting of 2 elments from the vector.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.ToTuple``3">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector"/> as a tuple of 3 elements
            </summary>
            <typeparam name="T1">The type of the first element.</typeparam>
            <typeparam name="T2">The type of the second element.</typeparam>
            <typeparam name="T3">The type of the third element.</typeparam>
            <returns>A tuple consisting of 3 elments from the vector.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.ToTuple``4">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector"/> as a tuple of 4 elements
            </summary>
            <typeparam name="T1">The type of the first element.</typeparam>
            <typeparam name="T2">The type of the second element.</typeparam>
            <typeparam name="T3">The type of the third element.</typeparam>
            <typeparam name="T4">The type of the fourth element.</typeparam>
            <returns>A tuple consisting of 4 elments from the vector.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.ToTuple``5">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector"/> as a tuple of 5 elements
            </summary>
            <typeparam name="T1">The type of the first element.</typeparam>
            <typeparam name="T2">The type of the second element.</typeparam>
            <typeparam name="T3">The type of the third element.</typeparam>
            <typeparam name="T4">The type of the fourth element.</typeparam>
            <typeparam name="T5">The type of the fifth element.</typeparam>
            <returns>A tuple consisting of 5 elments from the vector.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.ToTuple``6">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector"/> as a tuple of 6 elements
            </summary>
            <typeparam name="T1">The type of the first element.</typeparam>
            <typeparam name="T2">The type of the second element.</typeparam>
            <typeparam name="T3">The type of the third element.</typeparam>
            <typeparam name="T4">The type of the fourth element.</typeparam>
            <typeparam name="T5">The type of the fifth element.</typeparam>
            <typeparam name="T6">The type of the sixth element.</typeparam>
            <returns>A tuple consisting of 6 elments from the vector.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.ToTuple``7">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector"/> as a tuple of 7 elements
            </summary>
            <typeparam name="T1">The type of the first element.</typeparam>
            <typeparam name="T2">The type of the second element.</typeparam>
            <typeparam name="T3">The type of the third element.</typeparam>
            <typeparam name="T4">The type of the fourth element.</typeparam>
            <typeparam name="T5">The type of the fifth element.</typeparam>
            <typeparam name="T6">The type of the sixth element.</typeparam>
            <typeparam name="T7">The type of the seventh element.</typeparam>
            <returns>A tuple consisting of 7 elments from the vector.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.ToTuple``8">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector"/> as a tuple of 8 elements
            </summary>
            <typeparam name="T1">The type of the first element.</typeparam>
            <typeparam name="T2">The type of the second element.</typeparam>
            <typeparam name="T3">The type of the third element.</typeparam>
            <typeparam name="T4">The type of the fourth element.</typeparam>
            <typeparam name="T5">The type of the fifth element.</typeparam>
            <typeparam name="T6">The type of the sixth element.</typeparam>
            <typeparam name="T7">The type of the seventh element.</typeparam>
            <typeparam name="T8">The type of the eighth element.</typeparam>
            <returns>A tuple consisting of 8 elments from the vector.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.Reconstruct(System.Byte[],Battlegrounds.Networking.Requests.IRequestHandler)">
            <summary>
            Reconstruct the object from its binary representation.
            </summary>
            <param name="data">The binary representation of the object.</param>
            <param name="requestHandler">The request handler to use while deconstructing the object.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.ToBytes">
            <summary>
            Convert the object into its binary representation.
            </summary>
            <returns>A binary representation of the object.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryResultVector.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Query.CommandQueryUtil">
            <summary>
            Static utility class for extending the functionality of <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/> objects.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryUtil.GetObjectAsBinary(System.Object)">
            <summary>
            Get <paramref name="obj"/> in a binary form tied to a binary type ID.
            </summary>
            <remarks>
            This can only convert primitive value-types, strings, and <see cref="T:Battlegrounds.Networking.Remoting.Objects.IObjectID"/> values.
            </remarks>
            <param name="obj">The object to convert to binary.</param>
            <returns>A tuple containing the byte ID of the object and the binary representation of <paramref name="obj"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryUtil.GetStringArg(System.String,System.Text.Encoding)">
            <summary>
            Get the string <paramref name="s"/> in a binary form using the specified <paramref name="encoding"/>.
            </summary>
            <param name="s">The string to get binary representation of.</param>
            <param name="encoding">The encoding to use to encode the string in binary.</param>
            <returns>A binary representation of the string, where the first byte defines the length of the string.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryUtil.GetArg(System.Byte,System.IO.BinaryReader)">
            <summary>
            Get the object in a <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryInstruction"/> argument using specified type <paramref name="id"/>.
            </summary>
            <param name="id">The read type ID of the object to read.</param>
            <param name="reader">The reader to use to read the object value.</param>
            <returns>The object representation of the binary value.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryUtil.BeginQuery(System.Object,System.Object[])">
            <summary>
            Begin the construction of command query using the specified <paramref name="obj"/> as first call argument. If <paramref name="obj"/> is an <see cref="T:Battlegrounds.Networking.Proxy.IProxy"/>
            instance it will propogate the call to <see cref="M:Battlegrounds.Networking.Remoting.Query.CommandQueryUtil.BeginQuery(Battlegrounds.Networking.Proxy.IProxy,System.Object[])"/>.
            </summary>
            <param name="obj">The object to use as first argument in a call-sequence.</param>
            <param name="args">The arguments to pass along to the call.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> instance that can be used for constructing a <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Query.CommandQueryUtil.BeginQuery(Battlegrounds.Networking.Proxy.IProxy,System.Object[])">
            <summary>
            Begin the construction of a command query on the <paramref name="proxy"/> object.
            </summary>
            <param name="proxy">The proxy object to invoke the query on.</param>
            <param name="args">The arguments to pass to a first potential CALL, GET or SET property query instruction.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQueryBuilder"/> instance that can be used for constructing a <see cref="T:Battlegrounds.Networking.Remoting.Query.CommandQuery"/>.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Reflection.CacheCreator">
            <summary>
            Static utility class for managing <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile"/> data.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CacheCreator.GetCachedObject(System.Object)">
            <summary>
            Get a new <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/> representing <paramref name="o"/>. If <paramref name="o"/> is a new type, a <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile"/> is created and saved.
            </summary>
            <param name="o">The object to create <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/> instance for.</param>
            <returns>A new <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/> instance representing <paramref name="o"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CacheCreator.CreateDelegate(System.Object,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Create an instance-specific <see cref="T:System.Delegate"/> based on <paramref name="method"/> and <paramref name="argumentTypes"/>.
            </summary>
            <param name="target">The target instance to create <see cref="T:System.Delegate"/> for.</param>
            <param name="method">The method to create <see cref="T:System.Delegate"/> of.</param>
            <param name="argumentTypes">The arguments used by <paramref name="method"/>.</param>
            <returns>A new <see cref="T:System.Delegate"/> that's instance specified for <paramref name="target"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CacheCreator.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Create a type-specific <see cref="T:System.Delegate"/> based on <paramref name="method"/> and <paramref name="argumentTypes"/>.
            </summary>
            <param name="objectType">The <see cref="T:System.Type"/> that the delegate should be targetting.</param>
            <param name="method">The method to create <see cref="T:System.Delegate"/> of.</param>
            <param name="argumentTypes">The arguments used by <paramref name="method"/>.</param>
            <returns>A new <see cref="T:System.Delegate"/> that can be invoked with any instance of <paramref name="objectType"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Reflection.CachedMethod">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedMethod.#ctor(System.Delegate,System.Type,System.Type[])">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <param name="returnType"></param>
            <param name="args"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject">
            <summary>
            Represents an object where reflection data has been cached. This class cannot be inheritted.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Reflection.CachedObject.Source">
            <summary>
            Get the source object of the <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Reflection.CachedObject.Type">
            <summary>
            Get the type represented by the <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.#ctor(System.Object,Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile)">
            <summary>
            Create a new <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/> instance representing the <paramref name="source"/> object through a predefined <paramref name="profile"/>.
            </summary>
            <param name="source">The source object to cache.</param>
            <param name="profile">The profile the cached object will read reflection data from.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.#ctor(System.Object)">
            <summary>
            Create a new <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/> instance representing the <paramref name="source"/> object through instance-specific reflection data.
            </summary>
            <remarks>
            Please use <see cref="M:Battlegrounds.Networking.Remoting.Reflection.CacheCreator.GetCachedObject(System.Object)"/> instead of this method.
            <br/>
            <br/>
            The object created with this method will not have support for properties.
            </remarks>
            <param name="source"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.InvokeAsMethod(System.String,System.Object[])">
            <summary>
            Invoke the method on the source object using instance delegate.
            </summary>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="args">The arguments to invoke the method with.</param>
            <returns>The returned value of the invoked method.</returns>
            <remarks>
            Please consider using <see cref="M:Battlegrounds.Networking.Remoting.Reflection.CacheCreator.GetCachedObject(System.Object)"/> and <see cref="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.InvokeAsFunction(System.String,System.Object[])"/> instead of this.
            </remarks>
            <exception cref="T:System.Reflection.TargetParameterCountException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.InvokeAsFunction(System.String,System.Object[])">
            <summary>
            Invoke the method on the source object using a static call delegate where the first argument is the <see langword="this"/> instance. (Handled implicitly).
            </summary>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="args">The arguments to invoke the method with. (Without <see cref="P:Battlegrounds.Networking.Remoting.Reflection.CachedObject.Source"/> object)</param>
            <returns>If a non-<see langword="void"/> method is invoked, the result of the invoked method; Otherwise <see langword="null"/> is returned.</returns>
            <exception cref="T:System.MethodAccessException"/>
            <exception cref="T:System.Reflection.TargetParameterCountException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.SetProperty(System.String,System.Object)">
            <summary>
            Set the value of <paramref name="propertyName"/>.
            </summary>
            <param name="propertyName">The name of the property to set value of.</param>
            <param name="arg">The new value of the property.</param>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.GetProperty(System.String)">
            <summary>
            Get the current value of <paramref name="propertyName"/>.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>The value of <paramref name="propertyName"/>.</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.HasProperty(System.String)">
            <summary>
            Checks if <paramref name="propertyName"/> is either a valid setter or getter property.
            </summary>
            <param name="propertyName">The name of the property to find.</param>
            <returns>If <paramref name="propertyName"/> is cached, <see langword="true"/> is returned; Otherwise false.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.GetMethodCount(System.String)">
            <summary>
            Get the amount of methods with <paramref name="methodName"/>.
            </summary>
            <param name="methodName">The name to method name collisions with.</param>
            <returns>The amount of functions with <paramref name="methodName"/>. If none, -1 is returned.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.Obj``1">
            <summary>
            Get the underlying source object as its proper type.
            </summary>
            <typeparam name="T">The expected type of the source object.</typeparam>
            <returns>The source object as <typeparamref name="T"/>. If invalid type conversion, <see langword="default"/> value is returned.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile">
            <summary>
            Represents a profile over methods and property data that can be invoked by a <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile.Methods">
            <summary>
            Get all the methods defined for the profile of specific name. ('<see langword="this"/>' must be given as an argument in given <see cref="T:System.Delegate"/>).
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile.Setters">
            <summary>
            Get the property setter method defined for the profile. ('<see langword="this"/>' must be given as an argument in given <see cref="T:System.Delegate"/>).
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile.Getters">
            <summary>
            Get the property getter method defined for the profile. ('<see langword="this"/>' must be given as an argument in given <see cref="T:System.Delegate"/>).
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile.#ctor">
            <summary>
            Create a new and empty <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile"/>.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Reflection.RemotablePropertyAttribute">
            <summary>
            Informs the <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CacheCreator"/> that a property may be used in a remote context.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Reflection.RemotablePropertyAttribute.GetOnly">
            <summary>
            Get or set if the remote-end may only get the value of the property.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.RemoteAccessDeniedException">
            <summary>
            Represents errors that occur when a proxy object attempts to execute remotely-accessed code.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.RemoteAccessDeniedException.Reason">
            <summary>
            Get the given remote-access exception reason.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.RemoteAccessDeniedException.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Battlegrounds.Networking.Remoting.RemoteAccessDeniedException"/> class with unspecified reason.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.RemoteAccessDeniedException.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Battlegrounds.Networking.Remoting.RemoteAccessDeniedException"/> class with specified <paramref name="reason"/>.
            </summary>
            <param name="reason">The reason given as to why remote access was denied.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.RemoteMarshal">
            <summary>
            Static helper class for marshalling remote values.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.RemoteMarshal.MarshalToMessage(System.Object,Battlegrounds.Networking.Remoting.Objects.IObjectPool)">
            <summary>
            Marshal an object into the best <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> representation.
            </summary>
            <param name="marshalValue">The value to marshal into message.</param>
            <param name="pool">The object pool to use if the marshalled value is to be proxified.</param>
            <returns>The best possible <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> representation of the <paramref name="marshalValue"/>.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.VoidValue">
            <summary>
            Represents a void value returned by calling a method returning void.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.VoidValue.Void">
            <summary>
            Static readonly instance of the void variable.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.HostRequestHandler">
            <summary>
            Request handler for handling host-related requests.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Requests.HostRequestHandler.m_connection">
            <summary>
            The connection instance.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Requests.HostRequestHandler.Connection">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Communication.Connections.IConnection"/> instance handling connection between the host and the server.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Requests.HostRequestHandler.ObjectPool">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.Objects.IObjectPool"/> that keeps track of objects.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Requests.HostRequestHandler.ServerInterface">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.IStaticInterface"/> that handles static objects used across the connection session.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.HostRequestHandler.#ctor(Battlegrounds.Networking.Communication.Connections.IConnection,Battlegrounds.Networking.Remoting.IStaticInterface,Battlegrounds.Networking.Remoting.Objects.IObjectPool)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Requests.HostRequestHandler"/> class with a connection, static interface, and object pool.
            </summary>
            <param name="connection">The connection the request handler will use to handle requests.</param>
            <param name="staticInterface">The static interface a server may interface with.</param>
            <param name="objectPool">The object pool that keeps track of proxy objects.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.HostRequestHandler.HandleRequest(Battlegrounds.Networking.Communication.Messaging.IMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.HostRequestHandler.DispatchCall(System.String,System.String,System.Object[])">
            <summary>
            Dispatch a remote call to the proper object.
            </summary>
            <param name="objID">The string ID of the object to invoke method on.</param>
            <param name="mangled">The mangled string containing the actual dispatch information.</param>
            <param name="args">The arguments to pass along to the called method.</param>
            <returns>The returned value of the invoked method in <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> form.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.HostRequestHandler.SendRequest(System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="objectID"></param>
            <param name="objectType"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.HostRequestHandler.SendAndForgetRequest(System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="objectID"></param>
            <param name="objectType"></param>
            <param name="args"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.HostRequestHandler.NotifyBroker(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="informationKey"></param>
            <param name="informationValue"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.HostRequestHandler.CloseHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.HostRequestHandler.BroadcastRequest(System.UInt64[],System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="objectID"></param>
            <param name="objectType"></param>
            <param name="args"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.HostRequestHandler.CloseOutgoingHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.HostRequestHandler.CloseIncomingHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.IIncomingRequestHandler">
            <summary>
            Interface for handling incoming requests.
            </summary>    
        </member>
        <member name="P:Battlegrounds.Networking.Requests.IIncomingRequestHandler.Connection">
            <summary>
            Get the connection to the remote object.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.IIncomingRequestHandler.HandleRequest(Battlegrounds.Networking.Communication.Messaging.IMessage)">
            <summary>
            Handle a <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> request and respond to it with a <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/>.
            </summary>
            <param name="message">The <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> containing the request to handle.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> result to send back to requestor.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.IIncomingRequestHandler.CloseIncomingHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.IManagingRequestHandler">
            <summary>
            Interface extension of <see cref="T:Battlegrounds.Networking.Requests.IRequestHandler"/> intended for the host/managing side of the extended broker pattern.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Requests.IManagingRequestHandler.ObjectPool">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.Objects.IObjectPool"/> containing proxied objects.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Requests.IManagingRequestHandler.ServerInterface">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.IStaticInterface"/> object that the server can interface with.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.IOutgoingRequestHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.IOutgoingRequestHandler.SendRequest(System.String,System.String,System.Object[])">
            <summary>
            Send a request to a remote <see cref="T:Battlegrounds.Networking.Requests.IRequestHandler"/>.
            </summary>
            <remarks>
            Blocking call until request has received a response.
            </remarks>
            <param name="objectID">The object ID to send with request.</param>
            <param name="objectType">The object type to send with request.</param>
            <param name="args">The call arguments to send with request</param>
            <returns>Demarshalled object containing the result of the request.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.IOutgoingRequestHandler.SendAndForgetRequest(System.String,System.String,System.Object[])">
            <summary>
            Send a request to a remote <see cref="T:Battlegrounds.Networking.Requests.IRequestHandler"/> but do not expect a response.
            </summary>
            <remarks>
            This will still wait for a response but the response content will be ignored.
            </remarks>
            <param name="objectID">The object ID to send with request.</param>
            <param name="objectType">The object type to send with request.</param>
            <param name="args">The call arguments to send with request</param>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.IOutgoingRequestHandler.BroadcastRequest(System.UInt64[],System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="objectID"></param>
            <param name="objectType"></param>
            <param name="args"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.IOutgoingRequestHandler.CloseOutgoingHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.IRequestHandler">
            <summary>
            Interface for a request handler that can send and receive requests.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.IRequestHandler.CloseHandler">
            <summary>
            Gracefully closes the connection to the broker.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.ISingleInstanceHandler">
            <summary>
            Interface for handling single-instance type registers of <see cref="T:Battlegrounds.Networking.Proxy.IProxy"/> instances.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.ISingleInstanceHandler.RegisterInstance(Battlegrounds.Networking.Proxy.IProxy)">
            <summary>
            Register a specific single-instance.
            </summary>
            <param name="proxyObject">The specific instance.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.ISingleInstanceHandler.GetInstance(System.String)">
            <summary>
            Get the instance implementing <paramref name="proxyObjectType"/>.
            </summary>
            <param name="proxyObjectType">The role object type to find instance implementation of.</param>
            <returns>The matching <see cref="T:Battlegrounds.Networking.Proxy.IProxy"/> instance.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.ISingleInstanceHandler.GetInstance``1(System.String)">
            <summary>
            Get the instance implementing <paramref name="proxyObjectType"/>.
            </summary>
            <typeparam name="T">The actual <see cref="T:Battlegrounds.Networking.Proxy.IProxy"/> instance registered with the handler.</typeparam>
            <param name="proxtObjectType">The role object type to find instance implementation of.</param>
            <returns>The matching <see cref="T:Battlegrounds.Networking.Proxy.IProxy"/> instance.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.TypeInjectorDelegate">
            <summary>
            Delegate for type injection for <see cref="T:Battlegrounds.Networking.Proxy.IProxy"/> instances.
            </summary>
            <param name="remoteType">The name of the remote type that should be type-injected.</param>
            <param name="id">The ID of the remote object.</param>
            <param name="requestHandler">The handler that will handle the created object request</param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.ObjectPublishedHandler">
            <summary>
            Delegate for handling when a remote host publishes a new object of immediate importance.
            </summary>
            <param name="proxy">The proxy object that was published.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.ParticipantRequestHandler">
            <summary>
            Request handler for participants of remote-ended system.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Requests.ParticipantRequestHandler.SingleInstanceHandler">
            <summary>
            Get the single-instance handler that keeps track of remote-retrievable instances.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Requests.ParticipantRequestHandler.DependencyInjector">
            <summary>
            Get or set the context-defined type injector method.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Requests.ParticipantRequestHandler.ObjectPublished">
            <summary>
            Get or set the object published handler
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.ParticipantRequestHandler.#ctor(Battlegrounds.Networking.Communication.Connections.IConnection,Battlegrounds.Networking.Requests.ISingleInstanceHandler)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="instanceHandler"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Server.APIException">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.APIException.API">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Server.APIException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="apicall"></param>
            <param name="message"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Server.UploadException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Server.UploadException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Server.UploadException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="api"></param>
            <param name="serverMessage"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Server.DownloadException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Server.DownloadException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Server.DownloadException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="api"></param>
            <param name="serverMessage"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerAPIResponseStringTranslator">
            <summary>
            Delegate function for translating server string values.
            </summary>
            <param name="rawTextInput">The raw server string that was received.</param>
            <param name="propertyName">The property name storing the raw string value.</param>
            <returns>A translated string of the server-stored value.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerAPIUploadCallback">
            <summary>
            
            </summary>
            <param name="currentChunk"></param>
            <param name="chunkCount"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerAPIDownloadCallback">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="downloadedData"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerAPI">
            <summary>
            API instance for interacting with the server.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.HasGUID">
            <summary>
            Get the a lobby GUID has been given to the server API to simplify method calls.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.#ctor(System.String)">
            <summary>
            Initialise a new server API client for targetted <paramref name="address"/>.
            </summary>
            <param name="address">The address of the API.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.Ping">
            <summary>
            Ping the TCP server.
            </summary>
            <returns>If pinged back, <see langword="true"/>; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.SetLobbyGuid(System.UInt64)">
            <summary>
            Set the lobby guid to use when requesting lobby-specific information.
            </summary>
            <param name="guid">The GUID of the lobby to use.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.GetLobbies">
            <summary>
            Get all currently active lobbies on the server.
            </summary>
            <returns>A list of all active lobbies.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.UploadResults(Battlegrounds.Networking.Server.ServerMatchResults)">
            <summary>
            
            </summary>
            <param name="matchResults"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.GetLobby(System.String)">
            <summary>
            Get a specific lobby instance from the server.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <returns>If lobby was returned, a <see cref="T:Battlegrounds.Networking.Server.ServerLobby"/> API representation; Otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.UploadCompany(System.String,System.UInt64,System.String,Battlegrounds.Networking.Server.ServerAPIUploadCallback)">
            <summary>
            Upload company json data to specified lobby.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="playerID">The player who owns the company.</param>
            <param name="jsonContent">The json content of the company.</param>
            <param name="callback">The callback function to update on upload progress. (Optional)</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.UploadResult"/> value describing the result of the upload operation.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.UploadCompany(System.UInt64,System.String,Battlegrounds.Networking.Server.ServerAPIUploadCallback)">
            <summary>
            Upload company json data to specified lobby.
            </summary>
            <param name="playerID">The player who owns the company.</param>
            <param name="jsonContent">The json content of the company.</param>
            <param name="callback">The callback function to update on upload progress. (Optional)</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.UploadResult"/> value describing the result of the upload operation.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.DownloadCompany(System.String,System.UInt64,Battlegrounds.Networking.Server.ServerAPIDownloadCallback)">
            <summary>
            Download company file from lobby.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="playerID">The ID of the player who owns the desired company.</param>
            <param name="callback">The callback function to handle on successful download.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.DownloadResult"/> value indicating the result of the download API call.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.DownloadCompany(System.UInt64,Battlegrounds.Networking.Server.ServerAPIDownloadCallback)">
            <summary>
            Download company file from lobby.
            </summary>
            <param name="playerID">The ID of the player who owns the desired company.</param>
            <param name="callback">The callback function to handle on successful download.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.DownloadResult"/> value indicating the result of the download API call.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.PlayerHasCompany(System.String,System.UInt64)">
            <summary>
            Get if <paramref name="playerID"/> has a company file registered.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="playerID">The ID of the player who owns the desired company.</param>
            <returns>If company exists true; Otherwise false.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.PlayerHasCompany(System.UInt64)">
            <summary>
            Get if <paramref name="playerID"/> has a company file registered.
            </summary>
            <param name="playerID">The ID of the player who owns the desired company.</param>
            <returns>If company exists true; Otherwise false.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.UploadGamemode(System.String,System.Byte[],Battlegrounds.Networking.Server.ServerAPIUploadCallback)">
            <summary>
            Upload gamemode .sga file to lobby.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="binary">The binary .sga contents</param>
            <param name="callback">The callback function to update on upload progress. (Optional)</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.UploadResult"/> value describing the result of the upload operation.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.UploadGamemode(System.Byte[],Battlegrounds.Networking.Server.ServerAPIUploadCallback)">
            <summary>
            Upload gamemode .sga file to lobby.
            </summary>
            <param name="binary">The binary .sga contents</param>
            <param name="callback">The callback function to update on upload progress. (Optional)</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.UploadResult"/> value describing the result of the upload operation.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.DownloadGamemode(System.String,Battlegrounds.Networking.Server.ServerAPIDownloadCallback)">
            <summary>
            Download the uploaded gamemode file for the lobby.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="callback">The callback function to handle on successful download.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.DownloadResult"/> value indicating the result of the download API call.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.DownloadGamemode(Battlegrounds.Networking.Server.ServerAPIDownloadCallback)">
            <summary>
            Download the uploaded gamemode file for the lobby.
            </summary>
            <param name="callback">The callback function to handle on successful download.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.DownloadResult"/> value indicating the result of the download API call.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.HasGamemode(System.String)">
            <summary>
            
            </summary>
            <param name="lobbyGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.HasGamemode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Server.UploadResult">
            <summary>
            Enum describing the result of an upload file API call.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_SUCCESS">
            <summary>
            File was uploaded.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_INVALIDGUID">
            <summary>
            Request had invalid GUID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_INVALIDPLAYER">
            <summary>
            Request had invalid player ID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_MISSINGGUID">
            <summary>
            Request had no GUID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_MISSINGPLAYER">
            <summary>
            Request had no Player ID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_INVALIDFILETYPE">
            <summary>
            Attempt to upload invalid filetype.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_ACCESS_DENIED">
            <summary>
            Atttempt to upload file without proper access.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_ERROR_UNDEFINED">
            <summary>
            Upload failed for unknown reasons
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Server.DownloadResult">
            <summary>
            Enum describing the result of a download API call
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.DownloadResult.DOWNLOAD_SUCCESS">
            <summary>
            Requested file was successfully downloaded
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.DownloadResult.DOWNLOAD_INVALIDGUID">
            <summary>
            Request had invalid GUID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.DownloadResult.DOWNLOAD_INVALIDPLAYER">
            <summary>
            Request had invalid player ID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.DownloadResult.DOWNLOAD_MISSINGGUID">
            <summary>
            Request had no GUID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.DownloadResult.DOWNLOAD_MISSINGPLAYER">
            <summary>
            Request had no Player ID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.DownloadResult.DOWNLOAD_ACCESS_DENIED">
            <summary>
            Access was denied
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.DownloadResult.DOWNLOAD_ERROR_UNDEFINED">
            <summary>
            Unknown error occured
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerMatchResultsOutcome">
            <summary>
            Enum describing the outcome of a match.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.ServerMatchResultsOutcome.UNDEFINED">
            <summary>
            Outcome is unknown or undefined.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.ServerMatchResultsOutcome.AXIS_WIN">
            <summary>
            Axis win (WEH or OKW)
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.ServerMatchResultsOutcome.ALLIES_WIN">
            <summary>
            Allied wis (AEF, UKF, or SOV)
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.ServerMatchResultsOutcome.NO_WIN">
            <summary>
            No winners => No losers
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.ServerMatchResultsOutcome.SCAR_ERROR">
            <summary>
            Fatal Scar Error occured
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.ServerMatchResultsOutcome.BUGSPLAT_ERROR">
            <summary>
            One or more parties crashed
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerLobby">
            <summary>
            API representation of a server lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.Name">
            <summary>
            Get (or set) the actual name of the server lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.Type">
            <summary>
            Get (or set) the numeric type 
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.Members">
            <summary>
            Get (or set) the current amount of active members in the lobby (includes AI).
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.Capacity">
            <summary>
            Get (or set) the current capacity of the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.State">
            <summary>
            Get (or set) the current state of the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.TranslatedState">
            <summary>
            Get the translated version of <see cref="P:Battlegrounds.Networking.Server.ServerLobby.State"/>.
            </summary>
            <remarks>
            Returns <see cref="P:Battlegrounds.Networking.Server.ServerLobby.State"/> raw if <see cref="P:Battlegrounds.Networking.Server.ServerLobby.StringTranslator"/> is not defined.
            <br/>
            This is not saved in json.
            </remarks>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.Mode">
            <summary>
            Get (or set) the current mode played by the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.TranslatedMode">
            <summary>
            Get the translated version of <see cref="P:Battlegrounds.Networking.Server.ServerLobby.Mode"/>.
            </summary>
            <remarks>
            Returns <see cref="P:Battlegrounds.Networking.Server.ServerLobby.Mode"/> raw if <see cref="P:Battlegrounds.Networking.Server.ServerLobby.StringTranslator"/> is not defined.
            <br/>
            This is not saved in json.
            </remarks>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.UID">
            <summary>
            Get (or set) the GUID associated with the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.HasPassword">
            <summary>
            Get (or set) if the lobby is password-protected.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.CapacityString">
            <summary>
            Get the string describing the filled slots of the lobby.
            </summary>
            <remarks>
            This is not serialised in Json.
            </remarks>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.StringTranslator">
            <summary>
            Get or set the translator functionality that will translate the server-stored value.
            </summary>
            <remarks>
            This is not serialised in Json and must be defined by the local machine.
            </remarks>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerMatchResults">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.LengthTicks">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.TotalKills">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.TotalLosses">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.Outcome">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.Gamemode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.Option">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.Map">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
