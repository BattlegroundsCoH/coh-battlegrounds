<?xml version="1.0"?>
<doc>
    <assembly>
        <name>coh2-battlegrounds-networking</name>
    </assembly>
    <members>
        <member name="T:Battlegrounds.Networking.Communication.Connections.IConnection">
            <summary>
            Represents a connection between two endpoints.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.IConnection.IsConnected">
            <summary>
            Get if the connection is connected to endpoint.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.IConnection.Shutdown">
            <summary>
            Make the connection shutdown communications.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Connections.ConnectionLostHandler">
            <summary>
            Event handler for when a connection is lost unexpectedly.
            </summary>
            <param name="remoteTerminated">Flag marking if terminated remotely.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Connections.MessageReceivedHandler">
            <summary>
            Event handler for receiving messages.
            </summary>
            <param name="messageIdentifier">The identifier of the message chain. Use when responding to message.</param>
            <param name="messageSender">The ID of the remote sender.</param>
            <param name="messageContent">The actual message content.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Connections.ServerConnection">
            <summary>
            Represents a connection to a server endpoint from local machine. Implements <see cref="T:Battlegrounds.Networking.Communication.Connections.IConnection"/>. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.ServerConnection.IsConnected">
            <summary>
            Get if the connection is connected to remote endpoint.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.ServerConnection.MessageReceived">
            <summary>
            Get or set the handler for receiving messages. Can only be handled by one method at a time.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.Communication.Connections.ServerConnection.OnConnectionLost">
            <summary>
            Event triggered when the underlying socket connection is lost.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Connections.ServerConnection.SelfID">
            <summary>
            Get the ID of this machine used for remote identification.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.ServerConnection.Shutdown">
            <summary>
            Shutdown server connection. Will attempt to inform remote endpoint before shutting down.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.ServerConnection.StopListen">
            <summary>
            Stop listening to remote endpoint.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.ServerConnection.SendMessage(Battlegrounds.Networking.Communication.Golang.Message)">
            <summary>
            Send a <see cref="T:Battlegrounds.Networking.Communication.Golang.Message"/> to remote endpoint.
            </summary>
            <param name="msg">The message to send.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.ServerConnection.GetReply(System.UInt32,System.UInt64,System.Boolean)">
            <summary>
            Get a reply to a message chain from a specific remote sender.
            </summary>
            <param name="cid">The message ID to listen for.</param>
            <param name="from">The sender to expect message from.</param>
            <param name="blockAwait">Set if the call should block execution until a response is received.</param>
            <returns>If a reply is received or found, then the <see cref="T:Battlegrounds.Networking.Communication.Golang.ContentMessage"/>; Otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.ServerConnection.SendAndAwaitReply(Battlegrounds.Networking.Communication.Golang.Message)">
            <summary>
            Send a message and await a reply to the message.
            </summary>
            <param name="msg">The message to send.</param>
            <returns>The received <see cref="T:Battlegrounds.Networking.Communication.Golang.ContentMessage"/> if any; Otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Connections.ServerConnection.ConnectToServer(System.String,System.Int32,Battlegrounds.Networking.Communication.Golang.IntroMessage,System.UInt64@)">
            <summary>
            Attempt to connect to remote server.
            </summary>
            <param name="ipaddress">The address of the remote server to connect to.</param>
            <param name="port">The port to try and connect on.</param>
            <param name="introduction">The introduction message to send to the server.</param>
            <param name="lobbyID">[Out] The ID of the lobby that was hosted/joined. Only valid if return value is not <see langword="null"/>.</param>
            <returns>If connection was established a <see cref="T:Battlegrounds.Networking.Communication.Connections.ServerConnection"/> instance; Otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Golang.GoMarshal">
            <summary>
            Static utility class for handling marshalling between the server and client.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.GoMarshal.MSG_FIXED_SIZE">
            <summary>
            The fixed size of the message header.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.GoMarshal.JsonMarshal(System.Object)">
            <summary>
            Marshal <paramref name="obj"/> into the binary UTF-8 json representation.
            </summary>
            <param name="obj">The object to marshal.</param>
            <returns>The binary json representation of <paramref name="obj"/>.</returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.GoMarshal.JsonUnmarshal``1(System.Byte[])">
            <summary>
            Unmarshal <paramref name="input"/> into its .net representation.
            </summary>
            <typeparam name="T">The type to unmarshal to.</typeparam>
            <param name="input">The binary representation of the marshalled object.</param>
            <returns>The unmarshalled object.</returns>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.Text.Json.JsonException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.GoMarshal.BytesUnmarshal(System.Byte[],System.Byte[]@)">
            <summary>
            Unmarshal the binary representation of a <see cref="T:Battlegrounds.Networking.Communication.Golang.Message"/> instance.
            </summary>
            <param name="input">The binary input to unmarshal.</param>
            <param name="remaining">The binary data that was not read.</param>
            <returns>The first <see cref="T:Battlegrounds.Networking.Communication.Golang.Message"/> instance contained within the <paramref name="input"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Golang.IntroMessage">
            <summary>
            Represents an introduction message to the server.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.IntroMessage.Host">
            <summary>
            Get or init if intro message is to host or join a lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.IntroMessage.LobbyName">
            <summary>
            Get or init the name of the lobby to join
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.IntroMessage.LobbyPassword">
            <summary>
            Get or init the password to use when joining. Set as <see cref="F:System.String.Empty"/> when no password is expected.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.IntroMessage.LobbyUID">
            <summary>
            Get or init the UID of the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.IntroMessage.LobbyType">
            <summary>
            Get or init the lobby type. For now 1 is sufficient (Match-Lobby)
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.IntroMessage.PlayerUID">
            <summary>
            Get or init the Steam ID of the player connecting (Must be set!)
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.IntroMessage.PlayerName">
            <summary>
            Get or init the display name of the player connecting.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Golang.MessageMode">
            <summary>
            Represents the message target mode.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.MessageMode.Forward">
            <summary>
            Message should be forwared to specified recipient. (Obsolete)
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.MessageMode.Broadcast">
            <summary>
            Message should be broadcast to all. (Obsolete)
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.MessageMode.Broker">
            <summary>
            Message is direct communication with broker.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.MessageMode.BrokerCall">
            <summary>
            Message is direct call to logic to be invoked by the broker.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Golang.Message">
            <summary>
            Represents a message that can be sent or received over a <see cref="T:Battlegrounds.Networking.Communication.Connections.ServerConnection"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.Message.Mode">
            <summary>
            Get or init the message target mode.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.Message.CID">
            <summary>
            Get or init the unique message chain ID.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.Message.Target">
            <summary>
            Get or init the recipient of the message.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.Message.Sender">
            <summary>
            Get or init the sender of the message (Should be self when sending!).
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.Message.ContentLength">
            <summary>
            Get the length of the content of the message.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.Message.Content">
            <summary>
            Get or init the content of the message.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Golang.BrokerRequestMessage">
            <summary>
            Represents a direct request to the broker.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.BrokerRequestMessage.Request">
            <summary>
            Get or init the request type.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.BrokerRequestMessage.First">
            <summary>
            Get or init the first broker value to set.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.BrokerRequestMessage.Second">
            <summary>
            Get or init the value of the broker value.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.BrokerRequestMessage.Bytes">
            <summary>
            Get the request message as byte array.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Golang.BrokerRequestType">
            <summary>
            Represents the request type that can be sent to the broker.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.BrokerRequestType.Disconnect">
            <summary>
            Disconnect from broker.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.BrokerRequestType.Update">
            <summary>
            Update broker lobby value.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Golang.BrokerFirstVal">
            <summary>
            Represents the value to ask broker to update.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.BrokerFirstVal.Capacity">
            <summary>
            The capacity value
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.BrokerFirstVal.Mode">
            <summary>
            The mode value
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.BrokerFirstVal.Status">
            <summary>
            The status value
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.BrokerFirstVal.Members">
            <summary>
            The member value
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Golang.ContentMessageArg">
            <summary>
            Represents an argument in a <see cref="T:Battlegrounds.Networking.Communication.Golang.ContentMessage"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.ContentMessageArg.DotNetType">
            <summary>
            Get or init the .NET type string name.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.ContentMessageArg.Value">
            <summary>
            Get or init the binary value of the argument.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.ContentMessageArg.Encode(System.Object)">
            <summary>
            Encode argument as a <see cref="T:Battlegrounds.Networking.Communication.Golang.ContentMessageArg"/> instance.
            </summary>
            <param name="val">The argument to encode.</param>
            <returns>The encoded object as a <see cref="T:Battlegrounds.Networking.Communication.Golang.ContentMessageArg"/> instance.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.ContentMessageArg.Decode(Battlegrounds.Networking.Communication.Golang.ContentMessageArg)">
            <summary>
            Decode a <see cref="T:Battlegrounds.Networking.Communication.Golang.ContentMessageArg"/> to its .NET value.
            </summary>
            <param name="val">The content message argument to decode.</param>
            <returns>The .NET value of the argument if type is valid; Otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Golang.ContentMessgeType">
            <summary>
            Represents the message type of a <see cref="T:Battlegrounds.Networking.Communication.Golang.ContentMessage"/>.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.ContentMessgeType.Error">
            <summary>
            Message is error
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.ContentMessgeType.OK">
            <summary>
            Message is OK
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.ContentMessgeType.Disconnect">
            <summary>
            Message is a disconnect
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.ContentMessgeType.Join">
            <summary>
            Message is a join
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.ContentMessgeType.RemoteCall">
            <summary>
            Message is a remote broker call.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.ContentMessgeType.RemoteCallResponse">
            <summary>
            Message is a response to a remote broker call. 
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.ContentMessgeType.GetRemoteID">
            <summary>
            Message is a request to get a remote ID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.ContentMessgeType.GetRemoteIDResponse">
            <summary>
            Message is a response to a request to get a remote ID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.ContentMessgeType.ExecQuery">
            <summary>
            Execute a query message.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.ContentMessgeType.ExecQueryResponse">
            <summary>
            Response to query execute message.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.Golang.ContentMessgeType.SendChatMessage">
            <summary>
            Message is to send a chat message
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Golang.ContentMessage">
            <summary>
            Represents a message containing content.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.ContentMessage.MessageType">
            <summary>
            Get or init the content message type.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.ContentMessage.StrMsg">
            <summary>
            Get or init the raw string message.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.ContentMessage.Who">
            <summary>
            Get or init who this message is concerning.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.ContentMessage.Kick">
            <summary>
            Get or init if the kick flag of the message is set.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.ContentMessage.Static">
            <summary>
            Get or init if the static flag of the message is set.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.ContentMessage.DotNetType">
            <summary>
            Get or init the .NET type associated with the message.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.ContentMessage.DotNetTarget">
            <summary>
            Get or init the .NET target of the meesage.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.ContentMessage.RemoteAction">
            <summary>
            Get or init the remote action associated with this message (get, set, or call)
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.ContentMessage.Arguments">
            <summary>
            Get or init the additionally associated arguments with the message.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.ContentMessage.Raw">
            <summary>
            Get or init a raw array of bytes.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage">
            <summary>
            Represents a message that invoke methods on a remote machine.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Method">
            <summary>
            Get or initialise the method to invoke.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Arguments">
            <summary>
            Get or initialise the arguments to give in string form.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``1">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T">First tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``2">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``3">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``4">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <typeparam name="T4">Fourth tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``5">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <typeparam name="T4">Fourth tuple type.</typeparam>
            <typeparam name="T5">Fifth tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``6">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <typeparam name="T4">Fourth tuple type.</typeparam>
            <typeparam name="T5">Fifth tuple type.</typeparam>
            <typeparam name="T6">Sixth tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``7">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <typeparam name="T4">Fourth tuple type.</typeparam>
            <typeparam name="T5">Fifth tuple type.</typeparam>
            <typeparam name="T6">Sixth tuple type.</typeparam>
            <typeparam name="T7">Seventh tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``8">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <typeparam name="T4">Fourth tuple type.</typeparam>
            <typeparam name="T5">Fifth tuple type.</typeparam>
            <typeparam name="T6">Sixth tuple type.</typeparam>
            <typeparam name="T7">Seventh tuple type.</typeparam>
            <typeparam name="T8">Eigth tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``9">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <typeparam name="T4">Fourth tuple type.</typeparam>
            <typeparam name="T5">Fifth tuple type.</typeparam>
            <typeparam name="T6">Sixth tuple type.</typeparam>
            <typeparam name="T7">Seventh tuple type.</typeparam>
            <typeparam name="T8">Eigth tuple type.</typeparam>
            <typeparam name="T9">Ninth tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Golang.RemoteCallMessage.Decode``10">
            <summary>
            Decode the remote call message to specified arguments.
            </summary>
            <typeparam name="T1">First tuple type.</typeparam>
            <typeparam name="T2">Second tuple type.</typeparam>
            <typeparam name="T3">Third tuple type.</typeparam>
            <typeparam name="T4">Fourth tuple type.</typeparam>
            <typeparam name="T5">Fifth tuple type.</typeparam>
            <typeparam name="T6">Sixth tuple type.</typeparam>
            <typeparam name="T7">Seventh tuple type.</typeparam>
            <typeparam name="T8">Eigth tuple type.</typeparam>
            <typeparam name="T9">Ninth tuple type.</typeparam>
            <typeparam name="T10">Tenth tuple type.</typeparam>
            <returns>Decoded argument tuple.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.HttpPOSTResponseData">
            <summary>
            Represents HTTP response data to a POST request.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.HttpPOSTResponseData.Success">
            <summary>
            Flag showing if the request yielded a successful response.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.HttpPOSTResponseData.Status">
            <summary>
            The status string of the response.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.HttpPOSTResponseData.Content">
            <summary>
            The received data content of the response.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpPOSTResponseData.#ctor(System.Boolean,System.String,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.HttpPOSTResponseData"/> instance with fields defined.
            </summary>
            <param name="b">Is the request responded to with a success code.</param>
            <param name="s">The status code of the response.</param>
            <param name="p">The content sent with the response.</param>
            <param name="encoding">The encoding of the response data.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.HttpGETResponseData">
            <summary>
            Represents HTTP response data to a GET request.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.HttpGETResponseData.Success">
            <summary>
            Flag showing if the request yielded a successful response.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.HttpGETResponseData.Content">
            <summary>
            The received data content of the response.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.HttpGETResponseData.Value">
            <summary>
            Get the <see cref="F:Battlegrounds.Networking.Communication.HttpGETResponseData.Content"/> parsed as a string.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.HttpGETResponseData.StatusCode">
            <summary>
            The received status code.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpGETResponseData.#ctor(System.Boolean,System.IO.Stream,System.Text.Encoding,System.Net.HttpStatusCode)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.HttpGETResponseData"/> instance with fields defined.
            </summary>
            <param name="b">Is the request responded to with a success code.</param>
            <param name="s">The returned body stream content of the response.</param>
            <param name="encoding">The encoding of the received stream content.</param>
            <param name="httpStatus">The status code of the response.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.HttpCom">
            <summary>
            Static extension class for send HTTP requests (GET and POST)
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpCom.POST(System.Net.Http.HttpClient,System.String,System.String,System.Net.Http.HttpContent,System.Int32)">
            <summary>
            Send a POST request to <paramref name="address"/> with <paramref name="data"/>.
            </summary>
            <param name="client">The client to use for sending the request.</param>
            <param name="address">The address of the server to send request to.</param>
            <param name="api">The api to invoke with request.</param>
            <param name="data">The data to post.</param>
            <param name="port">The specific port to use when sending the request.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Communication.HttpPOSTResponseData"/> instance containing the response to the request.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpCom.AsyncPOST(System.Net.Http.HttpClient,System.String,System.String,System.Net.Http.HttpContent,System.Int32)">
            <summary>
            Send a POST request to <paramref name="address"/> with <paramref name="data"/>.
            </summary>
            <param name="client">The client to use for sending the request.</param>
            <param name="address">The address of the server to send request to.</param>
            <param name="api">The api to invoke with request.</param>
            <param name="data">The data to post.</param>
            <param name="port">The specific port to use when sending the request.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Communication.HttpPOSTResponseData"/> instance containing the response to the request.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpCom.GET(System.Net.Http.HttpClient,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Send a GET request to <paramref name="address"/> using specified <paramref name="api"/> query string.
            </summary>
            <param name="client">The client to use for sending the request.</param>
            <param name="address">The address of the server to send request to.</param>
            <param name="api">The api to invoke with request.</param>
            <param name="port">The specific port to use when sending the request.</param>
            <param name="log">Should the runtime log this GET request.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Communication.HttpGETResponseData"/> instance containing the response to the request.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpCom.AsyncGET(System.Net.Http.HttpClient,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Send a GET request to <paramref name="address"/> using specified <paramref name="api"/> query string.
            </summary>
            <param name="client">The client to use for sending the request.</param>
            <param name="address">The address of the server to send request to.</param>
            <param name="api">The api to invoke with request.</param>
            <param name="port">The specific port to use when sending the request.</param>
            <param name="log">Should the runtime log this GET request.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Communication.HttpGETResponseData"/> instance containing the response to the request.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.HttpCom.DELETE(System.Net.Http.HttpClient,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Send a DELETE request to <paramref name="address"/> using specified <paramref name="api"/> query string.
            </summary>
            <param name="client">The client to use for sending the request.</param>
            <param name="address">The address of the server to send request to.</param>
            <param name="api">The api to invoke with request.</param>
            <param name="port">The specific port to use when sending the request.</param>
            <param name="log">Should the runtime log this GET request.</param>
            <returns>If server returns a success code, <see langword="true"/>; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Debugging.Print">
            <summary>
            Static helper class containing functions for debuging code.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Debugging.Print.Printf(System.Object,System.Object[])">
            <summary>
            Print formatted <paramref name="message"/>.
            </summary>
            <param name="message">The message to format and print.</param>
            <param name="args">The arguments to pass to the formatting.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Debugging.Print.PrintfIf(System.Boolean,System.Object,System.Object[])">
            <summary>
            Print formatted <paramref name="message"/> if <paramref name="condition"/>.
            </summary>
            <param name="condition">The condition to check</param>
            <param name="message">The message to format and print.</param>
            <param name="args">The arguments to pass to the formatting.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Debugging.Print.Printuf(System.Object)">
            <summary>
            Print an unformatted <paramref name="message"/>.
            </summary>
            <param name="message">The message to print.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Memory.CollectionCache`1">
            <summary>
            Represents a collection of cached elements. Implements <see cref="T:System.Collections.Generic.ICollection`1"/>. This class cannot be inherited.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.CollectionCache`1.Update">
            <summary>
            Get or set the update function to update collection.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.CollectionCache`1.Count">
            <summary>
            Get the amount of cached items in the collection.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.CollectionCache`1.IsReadOnly">
            <summary>
            Get if collection is readonly.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.#ctor(System.TimeSpan)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Memory.CollectionCache`1"/> instance with a specified cached lifespan.
            </summary>
            <param name="objectLifeSpan">The lifespan of cached items.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.Add(`0)">
            <summary>
            Add a <typeparamref name="T"/> item to the cached collection.
            </summary>
            <param name="item">Cached item to add to collection.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.Clear">
            <summary>
            Clear the cached collection.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.Contains(`0)">
            <summary>
            Check if any element is contained within the collection.
            </summary>
            <param name="item">The element to check for containment.</param>
            <returns>If element is found <see langword="true"/>; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy all elements to <paramref name="array"/> starting at <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The array to copy elements to.</param>
            <param name="arrayIndex">The index to start inserting values at.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.Remove(`0)">
            <summary>
            Remove item from collection.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>If item was removed <see langword="true"/>; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.GetEnumerator">
            <summary>
            Returns an enumerator that can enumerate all elements in collection.
            </summary>
            <returns>An enumerator that can be used to enumerate through all elements in collection.</returns>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.GetCacheEnumerator">
            <summary>
            Returns an enumerator can can enumerate all cached elements in collection.
            </summary>
            <returns>An enumerator that can be used to enumerate through all cache elements in collection.</returns>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.Lookup(System.Int32)">
            <summary>
            Gets the cached object at specified index.
            </summary>
            <param name="index">The index to lookup value at.</param>
            <returns>The cached value at index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.LookupValue(System.Int32,System.Func{`0})">
            <summary>
            Get the object at specified index.
            </summary>
            <param name="index">The index to lookup value at.</param>
            <param name="update">The method to use if an update is required.</param>
            <returns>The value stored at index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.CollectionCache`1.LookupValue(System.Int32,System.Object,System.Func{System.Object,`0})">
            <summary>
            Get the object at specified index.
            </summary>
            <param name="index">The index to lookup value at.</param>
            <param name="arg">The argument to give the update function.</param>
            <param name="update">The update function to invoke if cached value needs updating.</param>
            <returns>The value stored at index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="T:Battlegrounds.Networking.Memory.ObjectCacheChangedEventHandler`1">
            <summary>
            Event handler delegate for handling value changes in a <see cref="T:Battlegrounds.Networking.Memory.ObjectCache`1"/> object.
            </summary>
            <typeparam name="T">The class type being cached.</typeparam>
            <param name="oldValue">The old cached value.</param>
            <param name="newValue">The new cached value.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Memory.ObjectCache">
            <summary>
            Class representing an object that is being cached in memory.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Memory.ObjectCache.m_cachedValue">
            <summary>
            The cached value.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Memory.ObjectCache.m_lastUpdate">
            <summary>
            The date and time of last cache value update
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.ObjectCache.Value">
            <summary>
            Get the current cached value.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.ObjectCache.IsValid">
            <summary>
            Get if the current cached value is considered valid.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.Memory.ObjectCache.CachedValueChanged">
            <summary>
            Event triggered when the cached value is updated.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache.#ctor(System.TimeSpan)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Memory.ObjectCache"/> instance where a value is stored by <paramref name="cacheLifeSpan"/>.
            </summary>
            <param name="cacheLifeSpan">The amount of time to keep a value cached before the value is updated.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache.#ctor(System.Object,System.TimeSpan)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Memory.ObjectCache"/> with time and initial value specified.
            </summary>
            <param name="cacheValue">The value to store in memory.</param>
            <param name="cacheLifeSpan">The amount of time to keep a value cached before the value is updated.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache.GetCachedValue(System.Func{System.Object})">
            <summary>
            Get the cached value or get an updated one through <paramref name="updateMethod"/>.
            </summary>
            <param name="updateMethod">The method to invoke to get an updated cache value.</param>
            <returns>The stored cache value.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache.GetCachedValue(System.Object,System.Func{System.Object,System.Object})">
            <summary>
            Get the cached value or get an updated one through <paramref name="updateMethod"/>.
            </summary>
            <param name="updateArgument">The argument to pass along to the update method.</param>
            <param name="updateMethod">The method to invoke to get an updated cache value.</param>
            <returns>The stored cache value.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache.SetCachedValue(System.Object)">
            <summary>
            Set a new cached value and update lifetime.
            </summary>
            <param name="newValue">The new value to set as cached.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache.Null">
            <summary>
            Set the stored value to null.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Memory.ObjectCache`1">
            <summary>
            Class representing an object that is being cached in memory.
            </summary>
            <typeparam name="T">The type of the stored value.</typeparam>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.ObjectCache`1.Value">
            <summary>
            Get the current cached value.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.Memory.ObjectCache`1.CachedValueChanged">
            <summary>
            Event triggered when the cached value is updated.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache`1.#ctor(System.TimeSpan)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Memory.ObjectCache"/> instance where a value is stored by <paramref name="cacheLifeSpan"/>.
            </summary>
            <param name="cacheLifeSpan">The amount of time to keep a value cached before the value is updated.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache`1.#ctor(System.Object,System.TimeSpan)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Memory.ObjectCache"/> with time and initial value specified.
            </summary>
            <param name="cacheValue">The value to store in memory.</param>
            <param name="cacheLifeSpan">The amount of time to keep a value cached before the value is updated.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache`1.GetCachedValue(System.Func{`0})">
            <summary>
            Get the cached value or get an updated one through <paramref name="updateMethod"/>.
            </summary>
            <param name="updateMethod">The method to invoke to get an updated cache value.</param>
            <returns>The stored cache value.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache`1.GetCachedValue(System.Object,System.Func{System.Object,`0})">
            <summary>
            Get the cached value or get an updated one through <paramref name="updateMethod"/>.
            </summary>
            <param name="updateArgument">The argument to pass along to the update method.</param>
            <param name="updateMethod">The method to invoke to get an updated cache value.</param>
            <returns>The stored cache value.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ObjectCache`1.SetCachedValue(`0)">
            <summary>
            Set a new cached value and update lifetime.
            </summary>
            <param name="newValue">The new value to set as cached.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Memory.Slice`1">
            <summary>
            Represents a slice of an array from a start position to an end position.
            </summary>
            <typeparam name="T">The slice element type.</typeparam>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.Slice`1.Length">
            <summary>
            Get the length of the slice.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.Slice`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Initialise a new slice instance, slicing data from <paramref name="source"/> starting at <paramref name="startIndex"/> and ending at <paramref name="endIndex"/>.
            </summary>
            <param name="source">The source array to slice data from.</param>
            <param name="startIndex">The index of the start position of the slice.</param>
            <param name="endIndex">The end index of the slice.</param>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.Slice`1.Item(System.Int32)">
            <summary>
            Get or set element in slice.
            </summary>
            <param name="index">The index to pick element from.</param>
            <returns>The element specified within the slice range.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.Slice`1.GetSlice">
            <summary>
            Get the slice as a new array.
            </summary>
            <returns>Fresh array containing elements from source array within slice range.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.Slice`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates through the <see cref="T:Battlegrounds.Networking.Memory.Slice`1"/>.
            </summary>
            <returns>An enumerator for the <see cref="T:Battlegrounds.Networking.Memory.Slice`1"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.Slice`1.op_Implicit(Battlegrounds.Networking.Memory.Slice{`0})~`0[]">
            <summary>
            Implicit conversion from slice to array.
            </summary>
            <param name="slice"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Memory.Slicing">
            <summary>
            Static extension class for adding a .Slice to all array types.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.Slicing.Slice``1(``0[],System.Int32,System.Int32)">
            <summary>
            Create a new slice of an array from specified <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <typeparam name="T">The slice element type.</typeparam>
            <param name="array">The array to slice data from.</param>
            <param name="start">Start index of slice.</param>
            <param name="end">End index of slice.</param>
            <returns>A slice of the <paramref name="array"/>.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Memory.ValueCacheChangedEventHandler`1">
            <summary>
            Event handler delegate for handling value changes in a <see cref="T:Battlegrounds.Networking.Memory.ValueCache`1"/> object.
            </summary>
            <typeparam name="T">The value type being cached.</typeparam>
            <param name="oldValue">The old cached value.</param>
            <param name="newValue">The new cached value.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Memory.ValueCache`1">
            <summary>
            Class representing a value that is being cached in memory.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.ValueCache`1.Value">
            <summary>
            Get the current cached value.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Memory.ValueCache`1.IsValid">
            <summary>
            Get if the current cached value is considered valid.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.Memory.ValueCache`1.CachedValueChanged">
            <summary>
            Event triggered when the cached value is updated.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ValueCache`1.#ctor(System.TimeSpan)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Memory.ObjectCache"/> instance where a value is stored by <paramref name="cacheLifeSpan"/>.
            </summary>
            <param name="cacheLifeSpan">The amount of time to keep a value cached before the value is updated.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ValueCache`1.#ctor(`0,System.TimeSpan)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Memory.ObjectCache"/> with time and initial value specified.
            </summary>
            <param name="cacheValue">The value to store in memory.</param>
            <param name="cacheLifeSpan">The amount of time to keep a value cached before the value is updated.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ValueCache`1.GetCachedValue(System.Func{`0})">
            <summary>
            Get the cached value or get an updated one through <paramref name="updateMethod"/>.
            </summary>
            <param name="updateMethod">The method to invoke to get an updated cache value.</param>
            <returns>The stored cache value.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ValueCache`1.GetCachedValue(`0,System.Func{`0,`0})">
            <summary>
            Get the cached value or get an updated one through <paramref name="updateMethod"/>.
            </summary>
            <param name="updateArgument">The argument to pass along to the update method.</param>
            <param name="updateMethod">The method to invoke to get an updated cache value.</param>
            <returns>The stored cache value.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ValueCache`1.SetCachedValue(`0)">
            <summary>
            Set a new cached value and update lifetime.
            </summary>
            <param name="newValue">The new value to set as cached.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Memory.ValueCache`1.op_Implicit(Battlegrounds.Networking.Memory.ValueCache{`0})~`0">
            <summary>
            Implicit cast operator from <see cref="T:Battlegrounds.Networking.Memory.ValueCache`1"/> to <typeparamref name="T"/>.
            </summary>
            <param name="cache">The value cache to extract value from.</param>
        </member>
        <member name="T:Battlegrounds.Networking.NetworkInterface">
            <summary>
            Static class for setting global network interface values
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.TimeoutMilliseconds">
            <summary>
            Get or set the amount of milliseconds to wait for a response (before resending a request)
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.ResendAttempts">
            <summary>
            Get or set the amount of resends to attempt for a response.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.ReceiveBufferSize">
            <summary>
            Get or set the size of the receive buffer.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.SendBufferSize">
            <summary>
            Get or set the size of the send buffer.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.LogDispatchCalls">
            <summary>
            Get or set if dispatching class should be logged.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.LogAPICalls">
            <summary>
            Get or set if API class should be logged.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.AllowLocalServerInstance">
            <summary>
            Get or set if the interface will accept local server instances.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.LocalAddress">
            <summary>
            Get or set the local address
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.SelfIdentifier">
            <summary>
            Get or set the self identifier
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.NetworkInterface.APIObject">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Server.ServerAPI"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.NetworkInterface.Setup(System.Boolean)">
            <summary>
            Setup the network API.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.NetworkInterface.HasInternetConnection(System.Int32)">
            <summary>
            Determines if the local machine is connected to the internet (can connect to http://www.google.com ) at the time of the call.
            </summary>
            <param name="timeout">The amount of milliseconds to wait before declaring connection timed out.</param>
            <returns>If internet connection was established <see langword="true"/> is returned; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.NetworkInterface.GetBestAddress(System.Int32)">
            <summary>
            Get the best server address available.
            </summary>
            <returns>The IP address of the best available address that can be connected to.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.NetworkInterface.PingServer(System.String,System.Int32,System.Int32)">
            <summary>
            Ping specified server at <paramref name="address"/> using <paramref name="port"/>.
            </summary>
            <param name="address">The addres to ping.</param>
            <param name="port">The port to ping.</param>
            <param name="timeout">The amount of milliseconds to wait before timing out the ping request.</param>
            <returns>If a ping response was given, <see langword="true"/>; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.NetworkInterface.HasLocalServer">
            <summary>
            Get if there's a local server instance running.
            </summary>
            <returns><see langword="true"/> if there's a local server instance running; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.NetworkInterface.RegisterConnection(Battlegrounds.Networking.Communication.Connections.IConnection)">
            <summary>
            Register a connection with the interface.
            </summary>
            <param name="connection">The connection instance to register</param>
        </member>
        <member name="M:Battlegrounds.Networking.NetworkInterface.Shutdown">
            <summary>
            Shutdown all active connections.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.IObjectID">
            <summary>
            Interface for ID of objects that can be accessed remotely.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.IObjectID.ToString">
            <summary>
            Convert the Id into a string representation.
            </summary>
            <returns>A string representation of the ID.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.IObjectID.FromString(System.String)">
            <summary>
            Parse the <paramref name="str"/> input into a <see cref="T:Battlegrounds.Networking.Remoting.IObjectID"/> representation.
            </summary>
            <param name="str">The string value to convert into a <see cref="T:Battlegrounds.Networking.Remoting.IObjectID"/> object.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.ObjectKey">
            <summary>
            Represents an object key backed by an integer value. Implements <see cref="T:Battlegrounds.Networking.Remoting.IObjectID"/>. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.ObjectKey.#ctor">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Remoting.ObjectKey"/> with a value of <see cref="F:System.Int32.MinValue"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.ObjectKey.#ctor(System.Int32)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Remoting.ObjectKey"/> instance from an integer.
            </summary>
            <param name="key">The object key</param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.ObjectKey.#ctor(System.String)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Remoting.ObjectKey"/> instance from a string.
            </summary>
            <param name="k">The object int key in string from.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
            <exception cref="T:System.OverflowException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.ObjectKey.FromString(System.String)">
            <summary>
            Convert the given string into an <see cref="T:System.Int32"/> object key.
            </summary>
            <remarks>
            If <paramref name="str"/> is not a parsable integer, the key is set to -1.
            </remarks>
            <param name="str">The object key string to convert into string.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.ObjectKey.ToString">
            <summary>
            Get the key as a string representation.
            </summary>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.ObjectKey.Equals(System.Object)">
            <summary>
            Checks if <paramref name="obj"/> is equal to the current instance.
            </summary>
            <param name="obj">Object to check against.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> has the same ID as called instance; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.ObjectKey.GetHashCode">
            <summary>
            Get the hash code of the object ID.
            </summary>
            <returns>Returns the hash code of the object.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.StringID">
            <summary>
            Represents a string ID. Implementation of <see cref="T:Battlegrounds.Networking.Remoting.IObjectID"/>. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.StringID.#ctor(System.String)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Remoting.StringID"/> instance with a string identifier.
            </summary>
            <param name="str">The identifier this string object is identifying.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.StringID.FromString(System.String)">
            <summary>
            Get identifier from string.
            </summary>
            <param name="str">The identifier to set.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.StringID.ToString">
            <summary>
            Get the identifier as string.
            </summary>
            <returns>String identifier.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.StringID.Equals(System.Object)">
            <summary>
            Checks if <paramref name="obj"/> is equal to the current instance.
            </summary>
            <param name="obj">Object to check against.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> has the same string ID as called instance; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.StringID.GetHashCode">
            <summary>
            Get the hash code of the string ID.
            </summary>
            <returns>Returns the hash code of the object.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Server.APIException">
            <summary>
            Represents errors casued when invoking the server API.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.APIException.API">
            <summary>
            The API call that caused this exception.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Server.APIException.#ctor(System.String,System.String)">
            <summary>
            Initialise a new instance of the <see cref="T:Battlegrounds.Networking.Server.APIException"/> class with the causing API call and error message.
            </summary>
            <param name="apicall">API call that caused the exception.</param>
            <param name="message">The error message associated with the exception.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Server.APIException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initialise a new instance of the <see cref="T:Battlegrounds.Networking.Server.APIException"/> class with the causing API call and error message. Including the inner exception that triggered this exception.
            </summary>
            <param name="apicall">API call that caused the exception.</param>
            <param name="message">The error message associated with the exception.</param>
            <param name="innerException">The inner exception that caused this exception.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Server.APIConnectionException">
            <summary>
            Represents API connection errors.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Server.APIConnectionException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Server.APIConnectionException"/> instance with a reference to the called API, a custom message and an inner <see cref="T:System.Exception"/>.
            </summary>
            <param name="apicall">API call that caused the exception.</param>
            <param name="message">The error message associated with the exception.</param>
            <param name="innerException">The inner exception that caused this exception.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerAPIResponseStringTranslator">
            <summary>
            Delegate function for translating server string values.
            </summary>
            <param name="rawTextInput">The raw server string that was received.</param>
            <param name="propertyName">The property name storing the raw string value.</param>
            <returns>A translated string of the server-stored value.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerAPIUploadCallback">
            <summary>
            Delegate function for handling upload callback events.
            </summary>
            <param name="currentChunk">The currently uploaded chunk.</param>
            <param name="chunkCount">The total amount of chunks.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerAPIDownloadCallback">
            <summary>
            Delegate function for handling download callback events.
            </summary>
            <param name="result">The download result.</param>
            <param name="downloadedData">The bytes that were downloaded.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerAPI">
            <summary>
            API instance for interacting with the server.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerAPI.PublicMessage">
            <summary>
            Represents a public message from developers regarding the project.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.PublicMessage.Message">
            <summary>
            Get the set of messages tied to specific languages.
            </summary>
            <remarks>
            See <see cref="P:Battlegrounds.Networking.Server.ServerAPI.PublicMessage.DefaultMessage"/> if local language version is not available.
            </remarks>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.PublicMessage.DefaultMessage">
            <summary>
            Get the default message (english)
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.PublicMessage.MessageType">
            <summary>
            Get the message type
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.PublicMessage.MessagePriority">
            <summary>
            Get the message priority
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.PublicMessage.StartTick">
            <summary>
            Get the start date tick
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.PublicMessage.Start">
            <summary>
            Get the local time this message should start appearing from.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.PublicMessage.EndTick">
            <summary>
            Get the end date tick
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.PublicMessage.End">
            <summary>
            Get the local time this message should no longer be displayed from.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.PublicMessage.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32,System.Int64,System.Int64)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Server.ServerAPI.PublicMessage"/> instance with a message and meta data.
            </summary>
            <param name="Message">The localised messages.</param>
            <param name="MessageType">The message type.</param>
            <param name="MessagePriority">The message priority.</param>
            <param name="StartTick">The start tick.</param>
            <param name="EndTick">The end tick.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerAPI.LatestVersion">
            <summary>
            Represents the latest up-to-date version data from the server.
            </summary>
            <remarks>
            Should be used to compare against own version.
            </remarks>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.LatestVersion.Branch">
            <summary>
            Get the name of the latest server branch.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.LatestVersion.Version">
            <summary>
            Get the numeric version (as a string).
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.LatestVersion.VersionTitle">
            <summary>
            Get the title given to the version. (May be empty).
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.LatestVersion.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialise a new <see cref="T:Battlegrounds.Networking.Server.ServerAPI.LatestVersion"/> instance with branch, version and title.
            </summary>
            <param name="Branch">The latest version branch.</param>
            <param name="Version">The numeric version representation.</param>
            <param name="VersionTitle">The title of the version.</param>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.HasGUID">
            <summary>
            Get the a lobby GUID has been given to the server API to simplify method calls.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.SafeMode">
            <summary>
            Get or set whether this <see cref="T:Battlegrounds.Networking.Server.ServerAPI"/> instance should behave in an exception safe mode.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.GUID">
            <summary>
            Get the GUID associated with the <see cref="T:Battlegrounds.Networking.Server.ServerAPI"/> instance.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.#ctor(System.String,System.Boolean)">
            <summary>
            Initialise a new server API client for targetted <paramref name="address"/>.
            </summary>
            <param name="address">The address of the API.</param>
            <param name="safeMode">Should API calls cause exceptions or return default values.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.SetLobbyGuid(System.UInt64)">
            <summary>
            Set the lobby guid to use when requesting lobby-specific information.
            </summary>
            <param name="guid">The GUID of the lobby to use.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.GetLobbies">
            <summary>
            Get all currently active lobbies on the server.
            </summary>
            <returns>A list of all active lobbies.</returns>
            <exception cref="T:Battlegrounds.Networking.Server.APIException"/>
            <exception cref="T:Battlegrounds.Networking.Server.APIConnectionException"/>
            <exception cref="T:System.InvalidProgramException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.GetPublicMessages">
            <summary>
            Get all public messages.
            </summary>
            <returns>A list of <see cref="T:Battlegrounds.Networking.Server.ServerAPI.PublicMessage"/> instances in unoredered form.</returns>
            <exception cref="T:Battlegrounds.Networking.Server.APIException"/>
            <exception cref="T:Battlegrounds.Networking.Server.APIConnectionException"/>
            <exception cref="T:System.InvalidProgramException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.GetLatestVersionInfo">
            <summary>
            Get information object of latest version.
            </summary>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.ServerAPI.LatestVersion"/> instance.</returns>
            <exception cref="T:Battlegrounds.Networking.Server.APIException"/>
            <exception cref="T:Battlegrounds.Networking.Server.APIConnectionException"></exception>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.UploadResults(Battlegrounds.Networking.Server.ServerMatchResults)">
            <summary>
            Upload results to the server.
            </summary>
            <param name="matchResults">Server match data to upload as results.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.GetLobby(System.String)">
            <summary>
            Get a specific lobby instance from the server.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <returns>If lobby was returned, a <see cref="T:Battlegrounds.Networking.Server.ServerLobby"/> API representation; Otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.UploadCompany(System.String,System.UInt64,System.String,Battlegrounds.Networking.Server.ServerAPIUploadCallback)">
            <summary>
            Upload company json data to specified lobby.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="playerID">The player who owns the company.</param>
            <param name="jsonContent">The json content of the company.</param>
            <param name="callback">The callback function to update on upload progress. (Optional)</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.UploadResult"/> value describing the result of the upload operation.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.UploadCompany(System.UInt64,System.String,Battlegrounds.Networking.Server.ServerAPIUploadCallback)">
            <summary>
            Upload company json data to specified lobby.
            </summary>
            <param name="playerID">The player who owns the company.</param>
            <param name="jsonContent">The json content of the company.</param>
            <param name="callback">The callback function to update on upload progress. (Optional)</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.UploadResult"/> value describing the result of the upload operation.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.DownloadCompany(System.String,System.UInt64,Battlegrounds.Networking.Server.ServerAPIDownloadCallback)">
            <summary>
            Download company file from lobby.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="playerID">The ID of the player who owns the desired company.</param>
            <param name="callback">The callback function to handle on successful download.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.DownloadResult"/> value indicating the result of the download API call.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.DownloadCompany(System.UInt64,Battlegrounds.Networking.Server.ServerAPIDownloadCallback)">
            <summary>
            Download company file from lobby.
            </summary>
            <param name="playerID">The ID of the player who owns the desired company.</param>
            <param name="callback">The callback function to handle on successful download.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.DownloadResult"/> value indicating the result of the download API call.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.PlayerHasCompany(System.String,System.UInt64)">
            <summary>
            Get if <paramref name="playerID"/> has a company file registered.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="playerID">The ID of the player who owns the desired company.</param>
            <returns>If company exists true; Otherwise false.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.PlayerHasCompany(System.UInt64)">
            <summary>
            Get if <paramref name="playerID"/> has a company file registered.
            </summary>
            <param name="playerID">The ID of the player who owns the desired company.</param>
            <returns>If company exists true; Otherwise false.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.DeleteCompany(System.String,System.UInt64)">
            <summary>
            Delete the server company file.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="playerID">The ID of the player who owns the desired company.</param>
            <returns>If company was deleted, <see langword="true"/>; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.DeleteCompany(System.UInt64)">
            <summary>
            Delete the server company file.
            </summary>
            <param name="playerID">The ID of the player who owns the desired company.</param>
            <returns>If company was deleted, <see langword="true"/>; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.UploadGamemode(System.String,System.Byte[],Battlegrounds.Networking.Server.ServerAPIUploadCallback)">
            <summary>
            Upload gamemode .sga file to lobby.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="binary">The binary .sga contents</param>
            <param name="callback">The callback function to update on upload progress. (Optional)</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.UploadResult"/> value describing the result of the upload operation.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.UploadGamemode(System.Byte[],Battlegrounds.Networking.Server.ServerAPIUploadCallback)">
            <summary>
            Upload gamemode .sga file to lobby.
            </summary>
            <param name="binary">The binary .sga contents</param>
            <param name="callback">The callback function to update on upload progress. (Optional)</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.UploadResult"/> value describing the result of the upload operation.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.DownloadGamemode(System.String,Battlegrounds.Networking.Server.ServerAPIDownloadCallback)">
            <summary>
            Download the uploaded gamemode file for the lobby.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="callback">The callback function to handle on successful download.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.DownloadResult"/> value indicating the result of the download API call.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.DownloadGamemode(Battlegrounds.Networking.Server.ServerAPIDownloadCallback)">
            <summary>
            Download the uploaded gamemode file for the lobby.
            </summary>
            <param name="callback">The callback function to handle on successful download.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Server.DownloadResult"/> value indicating the result of the download API call.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.HasGamemode(System.String)">
            <summary>
            Get if specified lobby has gamemode file.
            </summary>
            <param name="lobbyGuid">The lobby GUID to check.</param>
            <returns>If server reports gamemode file exists, <see langword="true"/>; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.HasGamemode">
            <summary>
            Get if connected lobby has gamemode file.
            </summary>
            <returns>If server reports gamemode file exists, <see langword="true"/>; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Server.UploadResult">
            <summary>
            Enum describing the result of an upload file API call.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_SUCCESS">
            <summary>
            File was uploaded.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_INVALIDGUID">
            <summary>
            Request had invalid GUID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_INVALIDPLAYER">
            <summary>
            Request had invalid player ID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_MISSINGGUID">
            <summary>
            Request had no GUID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_MISSINGPLAYER">
            <summary>
            Request had no Player ID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_INVALIDFILETYPE">
            <summary>
            Attempt to upload invalid filetype.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_ACCESS_DENIED">
            <summary>
            Atttempt to upload file without proper access.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.UploadResult.UPLOAD_ERROR_UNDEFINED">
            <summary>
            Upload failed for unknown reasons
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Server.DownloadResult">
            <summary>
            Enum describing the result of a download API call
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.DownloadResult.DOWNLOAD_SUCCESS">
            <summary>
            Requested file was successfully downloaded
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.DownloadResult.DOWNLOAD_INVALIDGUID">
            <summary>
            Request had invalid GUID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.DownloadResult.DOWNLOAD_INVALIDPLAYER">
            <summary>
            Request had invalid player ID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.DownloadResult.DOWNLOAD_MISSINGGUID">
            <summary>
            Request had no GUID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.DownloadResult.DOWNLOAD_MISSINGPLAYER">
            <summary>
            Request had no Player ID.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.DownloadResult.DOWNLOAD_ACCESS_DENIED">
            <summary>
            Access was denied
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.DownloadResult.DOWNLOAD_ERROR_UNDEFINED">
            <summary>
            Unknown error occured
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerMatchResultsOutcome">
            <summary>
            Enum describing the outcome of a match.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.ServerMatchResultsOutcome.UNDEFINED">
            <summary>
            Outcome is unknown or undefined.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.ServerMatchResultsOutcome.AXIS_WIN">
            <summary>
            Axis win (WEH or OKW)
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.ServerMatchResultsOutcome.ALLIES_WIN">
            <summary>
            Allied wis (AEF, UKF, or SOV)
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.ServerMatchResultsOutcome.NO_WIN">
            <summary>
            No winners => No losers
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.ServerMatchResultsOutcome.SCAR_ERROR">
            <summary>
            Fatal Scar Error occured
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Server.ServerMatchResultsOutcome.BUGSPLAT_ERROR">
            <summary>
            One or more parties crashed
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerLobby">
            <summary>
            API representation of a server lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.Name">
            <summary>
            Get (or set) the actual name of the server lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.Type">
            <summary>
            Get (or set) the numeric type 
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.Members">
            <summary>
            Get (or set) the current amount of active members in the lobby (includes AI).
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.Capacity">
            <summary>
            Get (or set) the current capacity of the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.State">
            <summary>
            Get (or set) the current state of the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.TranslatedState">
            <summary>
            Get the translated version of <see cref="P:Battlegrounds.Networking.Server.ServerLobby.State"/>.
            </summary>
            <remarks>
            Returns <see cref="P:Battlegrounds.Networking.Server.ServerLobby.State"/> raw if <see cref="P:Battlegrounds.Networking.Server.ServerLobby.StringTranslator"/> is not defined.
            <br/>
            This is not saved in json.
            </remarks>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.Mode">
            <summary>
            Get (or set) the current mode played by the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.TranslatedMode">
            <summary>
            Get the translated version of <see cref="P:Battlegrounds.Networking.Server.ServerLobby.Mode"/>.
            </summary>
            <remarks>
            Returns <see cref="P:Battlegrounds.Networking.Server.ServerLobby.Mode"/> raw if <see cref="P:Battlegrounds.Networking.Server.ServerLobby.StringTranslator"/> is not defined.
            <br/>
            This is not saved in json.
            </remarks>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.UID">
            <summary>
            Get (or set) the GUID associated with the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.HasPassword">
            <summary>
            Get (or set) if the lobby is password-protected.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.CapacityString">
            <summary>
            Get the string describing the filled slots of the lobby.
            </summary>
            <remarks>
            This is not serialised in Json.
            </remarks>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerLobby.StringTranslator">
            <summary>
            Get or set the translator functionality that will translate the server-stored value.
            </summary>
            <remarks>
            This is not serialised in Json and must be defined by the local machine.
            </remarks>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerMatchResults">
            <summary>
            Represents the results of a match that can be interpreted by the server.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.Length">
            <summary>
            Get the length of the match.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.LengthTicks">
            <summary>
            Get or set the length of the match in ticks.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.TotalKills">
            <summary>
            Get or set the amount of total kills in the match.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.TotalLosses">
            <summary>
            Get or set the amount of total losses in the match.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.Outcome">
            <summary>
            Get or set the outcome of the match.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.Gamemode">
            <summary>
            Get or set the played gamemode in the match.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.Option">
            <summary>
            Get or set the played gamemode option in the match.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.Map">
            <summary>
            Get or set the played map.
            </summary>
        </member>
    </members>
</doc>
