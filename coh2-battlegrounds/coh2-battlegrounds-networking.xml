<?xml version="1.0"?>
<doc>
    <assembly>
        <name>coh2-battlegrounds-networking</name>
    </assembly>
    <members>
        <member name="T:Battlegrounds.Networking.AuthObject">
            <summary>
            Represents an authenticator object that can be used to authenticate the identity of a user.
            </summary>    
        </member>
        <member name="P:Battlegrounds.Networking.AuthObject.DisplayName">
            <summary>
            Get the public display name the service has received.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.AuthObject.#ctor(System.UInt64,System.String)">
            <summary>
            Initialize a new authenticator object with <paramref name="identifier"/> and <paramref name="displayName"/>.
            </summary>
            <param name="identifier">The identifier the object will use.</param>
            <param name="displayName">The display name associated with the object.</param>
        </member>
        <member name="M:Battlegrounds.Networking.AuthObject.IsUser(System.UInt64)">
            <summary>
            Verifies if the given identifier is the identify of the <see cref="T:Battlegrounds.Networking.AuthObject"/>.
            </summary>
            <param name="identifier">The identifier to compare against.</param>
            <returns>If valid true; Otherwise false.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.AuthService">
            <summary>
            Networking authenticator service for authenticating the local player.
            </summary>
            <remarks>
            <i>This service is a mock service and is used for "logging in" the local steam profile.</i>
            </remarks>
        </member>
        <member name="P:Battlegrounds.Networking.AuthService.IsLoggedIn">
            <summary>
            Get if the <see cref="T:Battlegrounds.Networking.AuthService"/> is logged in.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.AuthService.Login(System.UInt64,System.String)">
            <summary>
            Log in to the <see cref="T:Battlegrounds.Networking.AuthService"/> using <paramref name="identifier"/> and <paramref name="publicName"/>.
            </summary>
            <param name="identifier">The identifier to use.</param>
            <param name="publicName">The public name to display.</param>
        </member>
        <member name="M:Battlegrounds.Networking.AuthService.Logout">
            <summary>
            Log out of the <see cref="T:Battlegrounds.Networking.AuthService"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.AuthService.AuthInstance``1(System.Nullable{Battlegrounds.Networking.AuthObject},System.Func{Battlegrounds.Networking.AuthObject,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="other"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.AuthenticatorException">
            <summary>
            Represents errors that occur when using the <see cref="T:Battlegrounds.Networking.AuthService"/>.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol">
            <summary>
            Static utility class for sending and reveing Battlegrounds protocol-compliant messages.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ReceiveBufferLength">
            <summary>
            Maximum amount of bytes that will be read into a buffer at a time.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.MessageHeaderSize">
            <summary>
            The size of the protocol message header. (Without size field)
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject">
            <summary>
            Protocol-compliant object keeping track of messages.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject.MessageID">
            <summary>
            The unique ID identidying the object.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject.SenderID">
            <summary>
            The unique ID of the sender.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject.Response">
            <summary>
            The <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> object tied to the object.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject.Filter">
            <summary>
            Get or set the message filter
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject.HasResponse">
            <summary>
            Get if there is a response present in the object.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject.#ctor(System.UInt64)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject"/> instance with a unique message id.
            </summary>
            <param name="mid">The unique message identifier.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject.SetResponse(Battlegrounds.Networking.Communication.Messaging.IMessage)">
            <summary>
            Set the response tied to the object.
            </summary>
            <param name="response">The response message.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.SendAndForget(Battlegrounds.Networking.Communication.Sockets.ISocket,Battlegrounds.Networking.Communication.Messaging.IMessage,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.UInt64[])">
            <summary>
            Send <paramref name="message"/> using <paramref name="socket"/> with a uniqely given <paramref name="messageID"/>.
            </summary>
            <param name="socket">The socket to use when sending the message.</param>
            <param name="message">The message object.</param>
            <param name="messageID">The ID of the message. Define if responding to a remote message.</param>
            <returns>The given message id of the sent message.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.Receive(Battlegrounds.Networking.Communication.Sockets.ISocket)">
            <summary>
            Receive all bytes from <paramref name="socket"/> and try to parse it into a protocol-compliant object.
            </summary>
            <param name="socket">The socket to receive data from.</param>
            <returns>The parsed <see cref="T:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.ProtocolObject"/> from the first-read message.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.BattlegroundsMessageProtocol.GetProtocolObject(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.IConnection">
            <summary>
            Interface for representing a connection from local client to some endpoint.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.IConnection.RequestHandler">
            <summary>
            Get the request handler used by the connection to handle connection requests.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.IConnection.SendMessage(Battlegrounds.Networking.Communication.Messaging.IMessage,System.Boolean)">
            <summary>
            Send a message through the connection.
            </summary>
            <param name="message">The message to send to the connection endpoint.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> instance response from the connection endpoint.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.IConnection.SendBrokerMessage(Battlegrounds.Networking.Communication.Messaging.IMessage,System.Boolean,System.UInt64[])">
            <summary>
            Send a message through the connection directly to the broker.
            </summary>
            <param name="message">The message to send to the broker.</param>
            <returns>A response from the broker.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.IConnection.SetRequestHandler(Battlegrounds.Networking.Requests.IRequestHandler)">
            <summary>
            Set the <see cref="T:Battlegrounds.Networking.Requests.IRequestHandler"/> instance that will handle connection requests.
            </summary>
            <param name="handler">The <see cref="T:Battlegrounds.Networking.Requests.IRequestHandler"/> to serve as request handler.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.IConnection.Shutdown">
            <summary>
            Shutdown connections from send and receiving messages.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.IConnection.Listen">
            <summary>
            Start listening for incoming messages on the connection.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.TunnelDirection">
            <summary>
            Enum for determining the direction of the tunnel.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.TunnelDirection.OneDirection">
            <summary>
            One-directional, only allowing for messages from origin to target.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.TunnelDirection.BiDirection">
            <summary>
            Bi-directional tunnel, meaning both sides may send and receive messages.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.TunnelCloseReason">
            <summary>
            Enum for stating a tunnel close reason.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.TunnelCloseReason.Fatal">
            <summary>
            A fatal error occured which requires termination of tunnel.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.TunnelCloseReason.Inactive">
            <summary>
            No tunnel activity detected for some time.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.TunnelCloseReason.Requested">
            <summary>
            Either end requested the tunnel termination.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.ITunnel">
            <summary>
            Interface representing a tunnel between incoming and outgoing endpoints.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.ITunnel.IncomingEndpoint">
            <summary>
            Get the incoming <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocket"/> that opened the <see cref="T:Battlegrounds.Networking.Communication.ITunnel"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.ITunnel.OutgoingEndpoint">
            <summary>
            Get the outgoing endpoint the incoming <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocket"/> wishes to establish tunnel to.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.ITunnel.Direction">
            <summary>
            Get the message-direction of the tunnel.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.ITunnel.IsOpen">
            <summary>
            Get if the tunnel is currently open.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.ITunnel.OpenTunnel">
            <summary>
            Open the tunnel such that the incomding endpoint can tunnel messages to the outgoing endpoint.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.ITunnel.CloseTunnel(Battlegrounds.Networking.Communication.TunnelCloseReason)">
            <summary>
            Close the tunnel so no messages can be sent.
            </summary>
            <param name="reason">The reason stated for closing the tunnel.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.ITunnel.NotifyEndpoint(System.Boolean,Battlegrounds.Networking.Communication.Messaging.IMessage)">
            <summary>
            
            </summary>
            <param name="incoming"></param>
            <param name="message"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Messaging.Binary.BinaryMessageReader">
            <summary>
            Static utility class for parsing a binary message.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Messaging.Binary.BinaryMessageReader.MessageTypeLookup">
            <summary>
            Byte-ID <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> concrete implementation type lookup.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Battlegrounds.Networking.Communication.Messaging.Binary.BinaryMessageReader.Parse(System.Byte[])" -->
        <!-- Badly formed XML comment ignored for member "M:Battlegrounds.Networking.Communication.Messaging.Binary.BinaryMessageReader.Parse(System.IO.MemoryStream)" -->
        <member name="T:Battlegrounds.Networking.Communication.Messaging.IMessage">
            <summary>
            Represents a message that can be sent between clients.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.IMessage.GetBytes">
            <summary>
            Convert the <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> into its binary form.
            </summary>
            <returns>An array of bytes representing the <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Messaging.IMessage.SetChunk(System.Int32,Battlegrounds.Networking.Communication.Messaging.Binary.BinaryChunkReader)">
            <summary>
            
            </summary>
            <param name="chunk"></param>
            <param name="reader"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Sockets.SocketClosed">
            <summary>
            
            </summary>
            <param name="gracefully"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Sockets.ISocket">
            <summary>
            Interface for representing a socket.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.Communication.Sockets.ISocket.OnSocketClosed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Sockets.ISocket.Identifier">
            <summary>
            Get the unique ID identifying this socket in the networking context.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Sockets.ISocket.IsShutdown">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.Bind(System.Int32)">
            <summary>
            Bind the socket to <paramref name="port"/> for listening.
            </summary>
            <param name="port">The port to listen to.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.Listen(System.Int32)">
            <summary>
            Begin listening for incoming connections.
            </summary>
            <param name="maxClients">The max amount of backlog clients.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.Send(System.Byte[])">
            <summary>
            Send <paramref name="data"/> to socket endpoint.
            </summary>
            <param name="data">The binary data to send.</param>
            <returns>The amount of bytes that were sent.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.Receive(System.Byte[])">
            <summary>
            Receive bytes and stor in <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The buffer to store received bytes in.</param>
            <remarks>Blocking method.</remarks>
            <returns>The amount of bytes received.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.ReceiveFull">
            <summary>
            Receive all bytes from external source.
            </summary>
            <remarks>Blocking method.</remarks>
            <returns>A buffer containing the full incoming message.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.ReceiveFull(Battlegrounds.Networking.Communication.Sockets.AsyncOperationSuccess)">
            <summary>
            Receive all bytes from external source.
            </summary>
            <remarks>Async method.</remarks>
            <param name="operationSuccess"></param>
            <returns>An <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocketAsyncOperation"/> object based on the operation.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            Shutdown the <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocket"/> connection using specified <paramref name="shutdownFlag"/>.
            </summary>
            <param name="shutdownFlag">The elements of the socket to shutdown.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.Connect(System.Net.EndPoint)">
            <summary>
            Connect the <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocket"/> to a remote endpoint.
            </summary>
            <param name="endPoint">The endpoint to connect to.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.Accept">
            <summary>
            Accept socket connection at listening port.
            </summary>
            <remarks>Blocking method.</remarks>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocket.Close">
            <summary>
            Close the socket completely.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Sockets.AsyncOperationSuccess">
            <summary>
            Delegate that is invoked when an async operation has succeeded in a <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocketAsyncOperation"/> context.
            </summary>
            <param name="socket">The socket used to carry out the async operation.</param>
            <param name="operation">The operation that was successfully executed.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Sockets.ISocketAsyncOperation">
            <summary>
            Interface representing an async operation carried out by an <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocket"/> instance.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Sockets.ISocketAsyncOperation.Bytes">
            <summary>
            Get the bytes that have been sent or received during this operation.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Sockets.ISocketAsyncOperation.Success">
            <summary>
            Get the operation success callback handle.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocketAsyncOperation.Wait">
            <summary>
            Wait for the async operation to complete.
            </summary>
            <returns>If no error occured, <see langword="false"/> is returned; Otherwise <see langword="true"/>, signifying there was an error.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.ISocketAsyncOperation.Set(System.Boolean)">
            <summary>
            Set the internal wait handler such that any threads waiting for the async operation can continue.
            </summary>
            <param name="isError">Set if the reason for setting the wait handle is because of an error.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Sockets.TcpAsyncOperation">
            <summary>
            Represents an asynchronous operation performed by a <see cref="T:Battlegrounds.Networking.Communication.Sockets.TcpSocket"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Sockets.TcpAsyncOperation.Bytes">
            <summary>
            Get the bytes that have been sent or received during this operation.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Sockets.TcpAsyncOperation.Success">
            <summary>
            Get the operation success callback handle.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.TcpAsyncOperation.#ctor(Battlegrounds.Networking.Communication.Sockets.AsyncOperationSuccess)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.Sockets.TcpAsyncOperation"/> class with specified <see cref="T:Battlegrounds.Networking.Communication.Sockets.AsyncOperationSuccess"/> delegate.
            </summary>
            <param name="onSuccess">The method to handle success events.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.TcpAsyncOperation.Set(System.Boolean)">
            <summary>
            Set the internal wait handler such that any threads waiting for the async operation can continue.
            </summary>
            <param name="isError">Set if the reason for setting the wait handle is because of an error.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.TcpAsyncOperation.Wait">
            <summary>
            Wait for the async operation to complete.
            </summary>
            <returns>If no error occured, <see langword="false"/> is returned; Otherwise <see langword="true"/>, signifying there was an error.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.Sockets.TcpSocket">
            <summary>
            Wrapper class for a <see cref="T:System.Net.Sockets.Socket"/> class that is compliant with the <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocket"/> interface and uses the TCP protocl for sending and receiving data.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.Sockets.TcpSocket.AddressFamily">
            <summary>
            Get the address family used by the socket.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.TcpSocket.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.Sockets.TcpSocket"/> using specified <paramref name="addressFamily"/>.
            </summary>
            <param name="addressFamily">The address family the socket should use.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.TcpSocket.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.Sockets.TcpSocket"/> using a .NET socket.
            </summary>
            <param name="original">The original <see cref="T:System.Net.Sockets.Socket"/> instance that will handle the actual operations.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.TcpSocket.#ctor(System.Net.Sockets.Socket,System.UInt64)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.Sockets.TcpSocket"/> using a .NET socket with a specified unique ID.
            </summary>
            <param name="original">The original <see cref="T:System.Net.Sockets.Socket"/> instance that will handle the actual operations.</param>
            <param name="identifier">The unique ID identifying the socket.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.Sockets.TcpSocket.SetIdentifier(System.UInt64)">
            <summary>
            Set the unique identifier of the <see cref="T:Battlegrounds.Networking.Communication.Sockets.TcpSocket"/>.
            </summary>
            <param name="id">The unique ID to assign to the socket.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.TcpConnection">
            <summary>
            Represents a TCP-compliant connection between local machine and some endpoint. Implements <see cref="T:Battlegrounds.Networking.Communication.IConnection"/>.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.TcpConnection.RESPONSE_WAIT_TIME">
            <summary>
            The amount of milliseconds to wait for a response (before resending a request)
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Communication.TcpConnection.RESEND_ATTEMPTS">
            <summary>
            The amount of resends to attempt for a response.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Communication.TcpConnection.Socket">
            <summary>
            Get the underlying socket used for sending and retrieving information.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.TcpConnection.#ctor(Battlegrounds.Networking.Communication.Sockets.ISocket)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Communication.TcpConnection"/> with a backing <paramref name="socket"/>.
            </summary>
            <param name="socket">The backing socket that communication will go through.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.TcpConnection.EstablishConnectionTo(System.String,System.Int32,System.UInt64)">
            <summary>
            Establing a connection to endpoint specified by <paramref name="address"/> and <paramref name="port"/>.
            </summary>
            <param name="address">The IP Address to attempt to establish connection to.</param>
            <param name="port">The port to establish connection with.</param>
            <param name="uniqueID">The unique ID to assign to the underlying <see cref="T:Battlegrounds.Networking.Communication.Sockets.ISocket"/> that will help identify the <see cref="T:Battlegrounds.Networking.Communication.TcpConnection"/>.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Communication.TcpConnection"/> if connection was established.</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="T:Battlegrounds.Networking.Communication.UniqueMessageService">
            <summary>
            Static utility class for generating a unique ID for messages.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Communication.UniqueMessageService.GetMessageId(System.Int32)">
            <summary>
            Get a unique message ID based on <paramref name="seed"/> and partial GUID.
            </summary>
            <param name="seed">The random seed to help generate a random ID.</param>
            <returns>A random ID that can be used to identify messages.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.DataStructures.ISynchronizedTimer">
            <summary>
            Interface for a synchronized timer.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.OnTimedDown">
            <summary>
            Even triggered when timer has timed down.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.OnStarted">
            <summary>
            Event triggered when timer is started.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.OnCancel">
            <summary>
            Event triggered when timer is cancelled.
            </summary>
        </member>
        <member name="E:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.OnPulse">
            <summary>
            Event triggered when timer is set to pulse.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.IsStarted">
            <summary>
            Get if the timer has started.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.GetRemaining">
            <summary>
            Get the remaining amount of time.
            </summary>
            <returns>A timespan describing the reamining time.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.Start">
            <summary>
            Start the timer.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.Cancel(System.Object)">
            <summary>
            Cancel the timer.
            </summary>
            <param name="argument">The argument to pass along when cancelling.</param>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.ISynchronizedTimer.RegisterEvents(Battlegrounds.Networking.DataStructures.ISynchronizedTimer,System.Action,System.Action,System.Action{System.Object},System.Action{System.TimeSpan})">
            <summary>
            Register relevant timer events for an <see cref="T:Battlegrounds.Networking.DataStructures.ISynchronizedTimer"/> instance.
            </summary>
            <param name="timer">The timer to add event subscriptions to.</param>
            <param name="done">The ondone event.</param>
            <param name="started">The onstarted event.</param>
            <param name="cancel">The oncancel event.</param>
            <param name="pulse">The onpulse event.</param>
        </member>
        <member name="T:Battlegrounds.Networking.DataStructures.SynchronizedTimer">
            <summary>
            Represents a time down object that can time down across multiple machines in a semi-synchronized order.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.SynchronizedTimer.#ctor(Battlegrounds.Networking.Requests.IRequestHandler,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.DataStructures.SynchronizedTimer"/> class intended for remote-timing.
            </summary>
            <param name="requestHandler">The request handler that will handle requests.</param>
            <param name="time">The amount of time to time down from.</param>
            <param name="syncDelay">The amount of time to wait before starting the countdown on the host-side.</param>
        </member>
        <member name="T:Battlegrounds.Networking.DataStructures.ProxySyncronizedTimer">
            <summary>
            Proxy representation of a remote <see cref="T:Battlegrounds.Networking.DataStructures.ISynchronizedTimer"/> instance.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.DataStructures.VolatileList`1">
            <summary>
            Represents a list of elements that are shared among several threads.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Battlegrounds.Networking.DataStructures.VolatileList`1.Size">
            <summary>
            Get the size of the list.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.#ctor">
            <summary>
            Initialize a new and empty <see cref="T:Battlegrounds.Networking.DataStructures.VolatileList`1"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.Add(`0)">
            <summary>
            Add <paramref name="item"/> to list.
            </summary>
            <param name="item">The new item to add to the list.</param>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.Select(System.Predicate{`0},`0@)">
            <summary>
            Select the first <paramref name="selectPredicate"/> matching element in list.
            </summary>
            <param name="selectPredicate">The predicate to use when determining if element should be selected.</param>
            <param name="element">The element that was selected.</param>
            <returns>If an element was selected <see langword="true"/> is returned; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.Remove(`0)">
            <summary>
            Remove <paramref name="element"/> from list.
            </summary>
            <param name="element">The element to remove from the list.</param>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.Min">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.Max">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.Sum(`0,System.Func{`0,`0,`0})">
            <summary>
            
            </summary>
            <param name="initial"></param>
            <param name="sumFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.DataStructures.VolatileList`1.ToList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Debugging.TraceRequestHandler">
            <summary>
            Request handler that only traces requests. Will forward to sub-request handler if specified.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Debugging.TraceRequestHandler.ReceivedMessages">
            <summary>
            Get a list of received messages.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Debugging.TraceRequestHandler.SentRequests">
            <summary>
            Get a list of sent requests in string format.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Debugging.TraceRequestHandler.RequestHandler">
            <summary>
            Get or set the actual request handler that will handle requests.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Debugging.TraceRequestHandler.#ctor(Battlegrounds.Networking.Communication.IConnection)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Debugging.TraceRequestHandler"/> with specified <paramref name="connection"/>.
            </summary>
            <param name="connection">The connection that the request handler will use.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Debugging.TraceRequestHandler.#ctor(Battlegrounds.Networking.Requests.IRequestHandler)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Debugging.TraceRequestHandler"/> with specified <paramref name="requestHandler"/> and underlying <see cref="T:Battlegrounds.Networking.Communication.IConnection"/>.
            </summary>
            <param name="requestHandler">The request handler that will handle the actual requests.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.HostedLobby">
            <summary>
            Represents a lobby where the local machine is the host.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.HostedLobby.MemberCapacity">
            <summary>
            Get the max capacity for members in the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.HostedLobby.AutoAssignTeams">
            <summary>
            Get or set if the lobby should automatically assign new members to a team.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.HostedLobby.AllowSpectators">
            <summary>
            Get or set if the lobby allows for spectators.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.HostedLobby.#ctor(System.String,Battlegrounds.Networking.Server.ServerAPI)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Lobby.HostedLobby"/> instance with specified <paramref name="lobbyname"/>.
            </summary>
            <param name="lobbyname">The name of the lobby.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.HostedLobby.SetMode(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="scenarioName"></param>
            <param name="gamemode"></param>
            <param name="gamemodeOption"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.IAILobbyMember">
            <summary>
            Interface representing AI members of a lobby. Extends <see cref="T:Battlegrounds.Networking.Lobby.ILobbyMember"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.IAILobbyMember.Difficulty">
            <summary>
            Get the difficulty of the AI.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.IAILobbyMember.GenerateCompany">
            <summary>
            Get if the AI is using a randomly generated company.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.LobbyResultsAvailable">
            <summary>
            
            </summary>
            <param name="companyJson"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.LobbyGamemodeAvailable">
            <summary>
            
            </summary>
            <param name="gamemodeData"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.LobbyMatchStart">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.LobbyGetCompanyHandler">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.LobbySystemNotification">
            <summary>
            
            </summary>
            <param name="notificationText"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.LobbyChatNotification">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.ILobby">
            <summary>
            Interface representing the lobby role.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Lobby.ILobby.GET_COMPANY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Lobby.ILobby.GET_RESULTS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Lobby.ILobby.GET_GAMEMODE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Lobby.ILobby.START_MATCH">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobby.LobbyName">
            <summary>
            Get the name of the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobby.LobbyMap">
            <summary>
            Get the currently selected map in lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobby.LobbyGamemode">
            <summary>
            Get the currently selected gamemode in lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobby.LobbyGamemodeOption">
            <summary>
            Get the currently selected option in lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobby.MemberCount">
            <summary>
            Get the current amount of members in the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobby.Self">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Lobby.ILobbyMember"/> representing the local machine.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobby.AlliesTeam">
            <summary>
            Get the allied team in the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobby.AxisTeam">
            <summary>
            Get the axis team in the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobby.SpectatorTeam">
            <summary>
            Get the spectator team in the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobby.GetCompany">
            <summary>
            Get or set the function to handle getting company data.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobby.StartGame">
            <summary>
            Get or set the function to handle a 'launch game' command.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobby.GamemodeAvailable">
            <summary>
            Get or set the function to handle when the gamemode has been downloaded.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobby.ResultsAvailable">
            <summary>
            Get or set when the results of the gamemode have been made available.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobby.SystemNotification">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobby.ChatNotification">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobby.GetLobbyMember(System.UInt64)">
            <summary>
            Get a lobby member by their ID.
            </summary>
            <param name="memberID">The ID of the lobby member.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Lobby.ILobbyMember"/> instance representing the member or <see langword="null"/> if no member was found.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobby.Join(System.UInt64,System.String)">
            <summary>
            
            </summary>
            <param name="memberID"></param>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobby.JoinAIPlayer(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobby.SendChatMessage(System.String)">
            <summary>
            
            </summary>
            <param name="chatMessage"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobby.SendTeamChatMessage(System.String)">
            <summary>
            
            </summary>
            <param name="chatMessage"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobby.ReceiveChatMessage(Battlegrounds.Networking.Lobby.ILobbyMember,System.String)">
            <summary>
            
            </summary>
            <param name="chatMessage"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobby.MoveTeam(Battlegrounds.Networking.Lobby.ILobbyMember,Battlegrounds.Networking.Lobby.ILobbyTeam)">
            <summary>
            
            </summary>
            <param name="member"></param>
            <param name="team"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobby.SwapPosition(Battlegrounds.Networking.Lobby.ILobbyMember,Battlegrounds.Networking.Lobby.ILobbyMember)">
            <summary>
            
            </summary>
            <param name="memberA"></param>
            <param name="memberB"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobby.StartMatch">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobby.KickPlayer(Battlegrounds.Networking.Lobby.ILobbyMember)">
            <summary>
            
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobby.RemovePlayer(Battlegrounds.Networking.Lobby.ILobbyMember)">
            <summary>
            
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobby.Leave">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobby.NotifyParticipants(System.String,Battlegrounds.Networking.Lobby.ILobbyMember)">
            <summary>
            
            </summary>
            <param name="notification"></param>
            <param name="exclude"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.ILobbyMember">
            <summary>
            Interface representing the lobby member role.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobbyMember.ID">
            <summary>
            Get the unique ID identifying this lobby member.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobbyMember.Name">
            <summary>
            Get the display name used by the lobby member.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobbyMember.Army">
            <summary>
            Get the selected army of the lobby member.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobbyMember.HasCompany">
            <summary>
            Get if the lobby member has selected a company.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobbyMember.CompanyName">
            <summary>
            Get the name of the selected company.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobbyMember.CompanyValue">
            <summary>
            Get the calculated value of selected company.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobbyMember.IsLocalMachine">
            <summary>
            Get if the user is the local user.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobbyMember.SetArmy(System.String)">
            <summary>
            Set the army the player will be using.
            </summary>
            <param name="army">The name of the army to play.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobbyMember.SetCompany(System.String,System.Double)">
            <summary>
            Set the company the player will be using.
            </summary>
            <param name="name">The name of the company.</param>
            <param name="value">The value of the company.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.ILobbyTeam">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobbyTeam.Capacity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobbyTeam.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobbyTeam.TeamIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobbyTeam.HasOpenSlot">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobbyTeam.JoinTeam(Battlegrounds.Networking.Lobby.ILobbyMember)">
            <summary>
            
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobbyTeam.LeaveTeam(Battlegrounds.Networking.Lobby.ILobbyMember)">
            <summary>
            
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobbyTeam.IsMember(Battlegrounds.Networking.Lobby.ILobbyMember)">
            <summary>
            
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobbyTeam.SetCapacity(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobbyTeam.CanSetCapacity(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobbyTeam.GetSlotAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobbyTeam.SwapSlots(Battlegrounds.Networking.Lobby.ILobbyMember,System.Int32)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.ILobbyTeam.SwapSlots(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.LobbyTeamSlotState">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.ILobbyTeamSlot">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobbyTeamSlot.SlotState">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.ILobbyTeamSlot.SlotOccupant">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.LobbyService">
            <summary>
            Represents a clientside lobby service for keeping track of static elements that are retrievable by remote clients.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.LobbyService.Lobby">
            <summary>
            Get the lobby instance associated with this element.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.LobbyService.#ctor(Battlegrounds.Networking.Remoting.IObjectPool)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Lobby.LobbyService"/> with an <paramref name="objectPool"/>.
            </summary>
            <param name="objectPool">The object pool to keep track of static elements.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.Match.LobbyPlayerCompanyFile">
            <summary>
            Represents a company file paired with the company owner.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Lobby.Match.LobbyPlayerCompanyFile.playerID">
            <summary>
            The ID of the player owning the company.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Lobby.Match.LobbyPlayerCompanyFile.playerCompanyData">
            <summary>
            The json data representing the company.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.Match.LobbyPlayerCompanyFile.#ctor(System.UInt64,System.String)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Lobby.Match.LobbyPlayerCompanyFile"/> object.
            </summary>
            <param name="pid">The ID of the player owning the company.</param>
            <param name="company">The json data representing the company.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.Match.ILobbyMatchContext">
            <summary>
            Interface representing a context object for communicating match data.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.Match.ILobbyMatchContext.RequestHandler">
            <summary>
            Get the request handler that handles server communication.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Lobby.Match.ILobbyMatchContext.Lobby">
            <summary>
            Get the lobby tied to the context.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.Match.ILobbyMatchContext.RequestCompanies">
            <summary>
            Request all playing lobby members to upload their company files.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.Match.ILobbyMatchContext.UploadGamemode(System.Byte[])">
            <summary>
            Upload the .sga gamemode to the lobby and instruct lobby members to download it.
            </summary>
            <param name="rawBinaryData">The raw .sga binary data to upload.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.Match.ILobbyMatchContext.UploadResults(Battlegrounds.Networking.Server.ServerMatchResults,Battlegrounds.Networking.Lobby.Match.LobbyPlayerCompanyFile[])">
            <summary>
            Upload the company results following a match.
            </summary>
            <param name="matchResults">Provides additional results for the server to process.</param>
            <param name="results">The relevant company file results.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.Match.ILobbyMatchContext.LaunchMatch">
            <summary>
            Instruct lobby members to start the game. Will also trigger the host StartGame lobby event.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.Match.ILobbyMatchContext.ReportError(System.Int32,System.String)">
            <summary>
            Report an error to the server.
            </summary>
            <param name="errorCode">The error code given to this specifc error instance.</param>
            <param name="errorMessage">The error message to send.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.Match.ILobbyMatchContext.GetPlayerCompany(System.UInt64)">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Lobby.Match.LobbyPlayerCompanyFile"/> for specified player.
            </summary>
            <param name="playerID">The ID of the player to get company file from.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.Match.ILobbyMatchContext.HasAllPlayerCompanies">
            <summary>
            Get if all players have uploaded their company.
            </summary>
            <returns>True iff all playing players have uploaded their company.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.Match.ILobbyMatchContext.GetStartTimer(System.Int32,System.Double)">
            <summary>
            Get a starting timer that can be used to warn lobby members the game is about to start.
            </summary>
            <param name="countdownSeconds">The amount of seconds to count down.</param>
            <param name="syncGraceSeconds">The amount of time (in seconds) to allow for synchronization problems.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.DataStructures.ISynchronizedTimer"/> that can be used to count down.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.Match.OnlineMatchContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Lobby.Match.OnlineMatchContext.#ctor(Battlegrounds.Networking.Lobby.ILobby,Battlegrounds.Networking.Requests.IManagingRequestHandler,Battlegrounds.Networking.Server.ServerAPI)">
            <summary>
            
            </summary>
            <param name="lobby"></param>
            <param name="requestHandler"></param>
            <param name="API"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Lobby.ProxyLobby">
            <summary>
            Proxy instance for some remote <see cref="T:Battlegrounds.Networking.Lobby.ILobby"/> implementation.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Proxy.IProxy">
            <summary>
            Interface for implementing a proxy object that represents an object on a non-host side.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Proxy.IProxy.RequestHandler">
            <summary>
            Get the request handler of the proxy.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Proxy.IProxy.ObjectID">
            <summary>
            Get the object ID identifying the remote object the proxy represents.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Proxy.IProxy.ObjectRole">
            <summary>
            Get the role type the proxy is representing.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.IProxy.Invoke(System.String,System.Object[])">
            <summary>
            Invoke a method on the <see cref="T:Battlegrounds.Networking.Proxy.IProxy"/>.
            </summary>
            <param name="method">The name of the method to invoke.</param>
            <param name="args">The arguments to pass to the method.</param>
            <returns>The return value of the method. If none is returned, <see langword="null"/> is returned.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Proxy.IProxyTrackable">
            <summary>
            Interface for non-proxy elements
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Proxy.IProxyTrackable.TrackingID">
            <summary>
            Get the trackable ID associated with the object.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.IProxyTrackable.SetId(Battlegrounds.Networking.Remoting.IObjectID)">
            <summary>
            Set the ID that the object can use to track itself.
            </summary>
            <param name="id">The ID of the object.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Proxy.ProxyCall">
            <summary>
            Static utility class for extending the functionality of a proxy call.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.ProxyCall.GetRemoteProperty``1(Battlegrounds.Networking.Proxy.IProxy,System.String)">
            <summary>
            Sends a request to the remote instance for fetching <paramref name="property"/> value.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="proxy">The proxy object getting the remote property.</param>
            <param name="property">The property to get the value of from remote instance.</param>
            <returns>If request is a success, the remote value of <paramref name="property"/>; Otherwise <see langword="default"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.ProxyCall.SetRemoteProperty``1(Battlegrounds.Networking.Proxy.IProxy,System.String,``0)">
            <summary>
            Sends a request to the remote instance for fetching <paramref name="property"/> value.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="proxy">The proxy object getting the remote property.</param>
            <param name="property">The property to get the value of from remote instance.</param>
            <param name="value">The value to set.</param>
            <returns>If request is a success, the remote value of <paramref name="property"/>; Otherwise <see langword="default"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.ProxyCall.CallRemoteMethod``1(Battlegrounds.Networking.Proxy.IProxy,System.String,System.Object[])">
            <summary>
            Sends an invoke request to the remote instance with given arguments.
            </summary>
            <typeparam name="T">The expected return type.</typeparam>
            <param name="proxy">The proxy object calling remote method.</param>
            <param name="remoteMethodName">The name of the remote method to invoke.</param>
            <param name="args">The arguments to send along with the request.</param>
            <returns>If remote call was executed, the returned value. Otherwise the <see langword="default"/> value of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.ProxyCall.CallRemoteVoidMethod(Battlegrounds.Networking.Proxy.IProxy,System.String,System.Object[])">
            <summary>
            Sends an invoke request to the remote instance with given arguments, expecting no return value.
            </summary>
            <param name="proxy">The proxy object calling remote method.</param>
            <param name="remoteMethodName">The name of the remote method to invoke.</param>
            <param name="args">The arguments to send along with the request.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.ProxyCall.CallRemoteVoidMethodEverywhere(Battlegrounds.Networking.Proxy.IProxy,System.String,System.Object[])">
            <summary>
            Sends a broadcast request to remote instances with given arguments, expecting no return value.
            </summary>
            <param name="proxy">The proxy object calling remote method.</param>
            <param name="remoteMethodName">The name of the remote method to invoke.</param>
            <param name="args">The arguments to send along with the request.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Proxy.ProxyMethodAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Proxy.ProxyMethodAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="remoteName"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.IObjectPool">
            <summary>
            Interface for representing a pool of objects that are identified by a unique <see cref="T:Battlegrounds.Networking.Remoting.IObjectID"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.IObjectPool.Register(System.Object)">
            <summary>
            Register a new object in the pool.
            </summary>
            <param name="obj">The instance to register in object pool.</param>
            <returns>The unique ID assigned to the object.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.IObjectPool.RegisterIfNotFound(System.Object)">
            <summary>
            Register a new object in the pool if it is not already registered.
            </summary>
            <param name="obj">The instance to register if not found.</param>
            <returns>The unique ID assigned to the object.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.IObjectPool.Get(Battlegrounds.Networking.Remoting.IObjectID)">
            <summary>
            Get the instance by <paramref name="id"/>.
            </summary>
            <param name="id">The unique ID to get object with.</param>
            <returns>If object exists in pool, then the requested <see cref="T:System.Object"/> is returned; Otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.IObjectPool.Exists(Battlegrounds.Networking.Remoting.IObjectID)">
            <summary>
            Check if the specified <paramref name="id"/> exists in the pool.
            </summary>
            <param name="id">The unique ID to check.</param>
            <returns>If ID is registered, <see langword="true"/>; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.ISendableObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.ISendableObject.Reconstruct(System.Byte[],Battlegrounds.Networking.Requests.IRequestHandler)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="requestHandler"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.ISendableObject.ToBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.IStaticInterface">
            <summary>
            Represents a static interface for interacting with static objects.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.IStaticInterface.ObjectPool">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.IObjectPool"/> which keeps track of the static instances.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.IStaticInterface.Create``1(System.String,System.Object[])">
            <summary>
            Create a new <typeparamref name="T"/> with specified <paramref name="identifier"/>.
            </summary>
            <typeparam name="T">The type of object to instantiate.</typeparam>
            <param name="identifier">The name to use to identify the object.</param>
            <param name="args">The arguments to pass along to the constructor.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Remoting.IObjectID"/> returned by the <see cref="T:Battlegrounds.Networking.Remoting.IObjectPool"/> on register.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.IStaticInterface.FromID(System.String)">
            <summary>
            
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.IStaticInterface.Publish(Battlegrounds.Networking.Requests.IRequestHandler,Battlegrounds.Networking.Proxy.IProxyTrackable)">
            <summary>
            Publish the ID of a static instance to remote clients.
            </summary>
            <param name="handler">The handler to send publish event with.</param>
            <param name="trackable">The trackable object to publish</param>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Mangler">
            <summary>
            Static utility class for mangling and demangling remote call data.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Mangler.PROPERTY_GET">
            <summary>
            Operation ID for getting the value of a property.
            </summary>
        </member>
        <member name="F:Battlegrounds.Networking.Remoting.Mangler.PROPERTY_SET">
            <summary>
            Operation ID for setting the value of a property.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Mangler.Mangle(System.String,System.String,System.String)">
            <summary>
            Mangle the data into a single string value.
            </summary>
            <param name="objType">The object type.</param>
            <param name="name">The name of the property</param>
            <param name="operation">The operation ID</param>
            <returns>A mangled string describing the remote operation.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Mangler.Demangle(System.String)">
            <summary>
            Demangle a string.
            </summary>
            <param name="mangled">The string to demangle.</param>
            <returns>A tuple of three string values that contains the demangled strings.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.ObjectCachedPool">
            <summary>
            Object pool keeping track of <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/> instances optimised for remote-call functionality.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.ObjectCachedPool.#ctor">
            <summary>
            Initialize a new and empty <see cref="T:Battlegrounds.Networking.Remoting.ObjectCachedPool"/> instance.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.ObjectInstanceHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.ObjectInstanceHandler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.ObjectKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.ObjectKey.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.ObjectKey.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.ObjectKey.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="k"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.ObjectPool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.ObjectPool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Reflection.CacheCreator">
            <summary>
            Static utility class for managing <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile"/> data.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CacheCreator.GetCachedObject(System.Object)">
            <summary>
            Get a new <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/> representing <paramref name="o"/>. If <paramref name="o"/> is a new type, a <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile"/> is created and saved.
            </summary>
            <param name="o">The object to create <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/> instance for.</param>
            <returns>A new <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/> instance representing <paramref name="o"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CacheCreator.CreateDelegate(System.Object,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Create an instance-specific <see cref="T:System.Delegate"/> based on <paramref name="method"/> and <paramref name="argumentTypes"/>.
            </summary>
            <param name="target">The target instance to create <see cref="T:System.Delegate"/> for.</param>
            <param name="method">The method to create <see cref="T:System.Delegate"/> of.</param>
            <param name="argumentTypes">The arguments used by <paramref name="method"/>.</param>
            <returns>A new <see cref="T:System.Delegate"/> that's instance specified for <paramref name="target"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CacheCreator.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Create a type-specific <see cref="T:System.Delegate"/> based on <paramref name="method"/> and <paramref name="argumentTypes"/>.
            </summary>
            <param name="objectType">The <see cref="T:System.Type"/> that the delegate should be targetting.</param>
            <param name="method">The method to create <see cref="T:System.Delegate"/> of.</param>
            <param name="argumentTypes">The arguments used by <paramref name="method"/>.</param>
            <returns>A new <see cref="T:System.Delegate"/> that can be invoked with any instance of <paramref name="objectType"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Reflection.CachedMethod">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedMethod.#ctor(System.Delegate,System.Type,System.Type[])">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <param name="returnType"></param>
            <param name="args"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject">
            <summary>
            Represents an object where reflection data has been cached. This class cannot be inheritted.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Reflection.CachedObject.Source">
            <summary>
            Get the source object of the <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Reflection.CachedObject.Type">
            <summary>
            Get the type represented by the <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/>.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.#ctor(System.Object,Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile)">
            <summary>
            Create a new <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/> instance representing the <paramref name="source"/> object through a predefined <paramref name="profile"/>.
            </summary>
            <param name="source">The source object to cache.</param>
            <param name="profile">The profile the cached object will read reflection data from.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.#ctor(System.Object)">
            <summary>
            Create a new <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/> instance representing the <paramref name="source"/> object through instance-specific reflection data.
            </summary>
            <remarks>
            Please use <see cref="M:Battlegrounds.Networking.Remoting.Reflection.CacheCreator.GetCachedObject(System.Object)"/> instead of this method.
            <br/>
            <br/>
            The object created with this method will not have support for properties.
            </remarks>
            <param name="source"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.InvokeAsMethod(System.String,System.Object[])">
            <summary>
            Invoke the method on the source object using instance delegate.
            </summary>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="args">The arguments to invoke the method with.</param>
            <returns>The returned value of the invoked method.</returns>
            <remarks>
            Please consider using <see cref="M:Battlegrounds.Networking.Remoting.Reflection.CacheCreator.GetCachedObject(System.Object)"/> and <see cref="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.InvokeAsFunction(System.String,System.Object[])"/> instead of this.
            </remarks>
            <exception cref="T:System.Reflection.TargetParameterCountException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.InvokeAsFunction(System.String,System.Object[])">
            <summary>
            Invoke the method on the source object using a static call delegate where the first argument is the <see langword="this"/> instance. (Handled implicitly).
            </summary>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="args">The arguments to invoke the method with. (Without <see cref="P:Battlegrounds.Networking.Remoting.Reflection.CachedObject.Source"/> object)</param>
            <returns>If a non-<see langword="void"/> method is invoked, the result of the invoked method; Otherwise <see langword="null"/> is returned.</returns>
            <exception cref="T:System.MethodAccessException"/>
            <exception cref="T:System.Reflection.TargetParameterCountException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.SetProperty(System.String,System.Object)">
            <summary>
            Set the value of <paramref name="propertyName"/>.
            </summary>
            <param name="propertyName">The name of the property to set value of.</param>
            <param name="arg">The new value of the property.</param>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.GetProperty(System.String)">
            <summary>
            Get the current value of <paramref name="propertyName"/>.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>The value of <paramref name="propertyName"/>.</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.HasProperty(System.String)">
            <summary>
            Checks if <paramref name="propertyName"/> is either a valid setter or getter property.
            </summary>
            <param name="propertyName">The name of the property to find.</param>
            <returns>If <paramref name="propertyName"/> is cached, <see langword="true"/> is returned; Otherwise false.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.GetMethodCount(System.String)">
            <summary>
            Get the amount of methods with <paramref name="methodName"/>.
            </summary>
            <param name="methodName">The name to method name collisions with.</param>
            <returns>The amount of functions with <paramref name="methodName"/>. If none, -1 is returned.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObject.Obj``1">
            <summary>
            Get the underlying source object as its proper type.
            </summary>
            <typeparam name="T">The expected type of the source object.</typeparam>
            <returns>The source object as <typeparamref name="T"/>. If invalid type conversion, <see langword="default"/> value is returned.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile">
            <summary>
            Represents a profile over methods and property data that can be invoked by a <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObject"/>.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile.Methods">
            <summary>
            Get all the methods defined for the profile of specific name. ('<see langword="this"/>' must be given as an argument in given <see cref="T:System.Delegate"/>).
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile.Setters">
            <summary>
            Get the property setter method defined for the profile. ('<see langword="this"/>' must be given as an argument in given <see cref="T:System.Delegate"/>).
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile.Getters">
            <summary>
            Get the property getter method defined for the profile. ('<see langword="this"/>' must be given as an argument in given <see cref="T:System.Delegate"/>).
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile.#ctor">
            <summary>
            Create a new and empty <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CachedObjectProfile"/>.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.Reflection.RemotablePropertyAttribute">
            <summary>
            Informs the <see cref="T:Battlegrounds.Networking.Remoting.Reflection.CacheCreator"/> that a property may be used in a remote context.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.Reflection.RemotablePropertyAttribute.GetOnly">
            <summary>
            Get or set if the remote-end may only get the value of the property.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.RemoteAccessDeniedException">
            <summary>
            Represents errors that occur when a proxy object attempts to execute remotely-accessed code.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Remoting.RemoteAccessDeniedException.Reason">
            <summary>
            Get the given remote-access exception reason.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.RemoteAccessDeniedException.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Battlegrounds.Networking.Remoting.RemoteAccessDeniedException"/> class with unspecified reason.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.RemoteAccessDeniedException.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Battlegrounds.Networking.Remoting.RemoteAccessDeniedException"/> class with specified <paramref name="reason"/>.
            </summary>
            <param name="reason">The reason given as to why remote access was denied.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Remoting.RemoteMarshal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Remoting.RemoteMarshal.MarshalToMessage(System.Object,Battlegrounds.Networking.Remoting.IObjectPool)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="pool"></param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.HostRequestHandler">
            <summary>
            Request handler for handling host-related requests.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.HostRequestHandler.#ctor(Battlegrounds.Networking.Communication.IConnection,Battlegrounds.Networking.Remoting.IStaticInterface,Battlegrounds.Networking.Remoting.IObjectPool)">
            <summary>
            Initialize a new <see cref="T:Battlegrounds.Networking.Requests.HostRequestHandler"/> class with a connection, static interface, and object pool.
            </summary>
            <param name="connection">The connection the request handler will use to handle requests.</param>
            <param name="staticInterface">The static interface a server may interface with.</param>
            <param name="objectPool">The object pool that keeps track of proxy objects.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.HostRequestHandler.DispatchCall(System.String,System.String,System.Object[])">
            <summary>
            Dispatch a remote call to the proper object.
            </summary>
            <param name="objID">The string ID of the object to invoke method on.</param>
            <param name="mangled">The mangled string containing the actual dispatch information.</param>
            <param name="args">The arguments to pass along to the called method.</param>
            <returns>The returned value of the invoked method in <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> form.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.IManagingRequestHandler">
            <summary>
            Interface extension of <see cref="T:Battlegrounds.Networking.Requests.IRequestHandler"/> intended for the host/managing side of the extended broker pattern.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Requests.IManagingRequestHandler.ObjectPool">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.IObjectPool"/> containing proxied objects.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Requests.IManagingRequestHandler.ServerInterface">
            <summary>
            Get the <see cref="T:Battlegrounds.Networking.Remoting.IStaticInterface"/> object that the server can interface with.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.IRequestHandler">
            <summary>
            Interface for a request handler that can send and receive requests.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Requests.IRequestHandler.Connection">
            <summary>
            Get the connection to the remote object.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.IRequestHandler.HandleRequest(Battlegrounds.Networking.Communication.Messaging.IMessage)">
            <summary>
            Handle a <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> request and respond to it with a <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/>.
            </summary>
            <param name="message">The <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> containing the request to handle.</param>
            <returns>The <see cref="T:Battlegrounds.Networking.Communication.Messaging.IMessage"/> result to send back to requestor.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.IRequestHandler.SendRequest(System.String,System.String,System.Object[])">
            <summary>
            Send a request to a remote <see cref="T:Battlegrounds.Networking.Requests.IRequestHandler"/>.
            </summary>
            <remarks>
            Blocking call until request has received a response.
            </remarks>
            <param name="objectID">The object ID to send with request.</param>
            <param name="objectType">The object type to send with request.</param>
            <param name="args">The call arguments to send with request</param>
            <returns>Demarshalled object containing the result of the request.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.IRequestHandler.SendAndForgetRequest(System.String,System.String,System.Object[])">
            <summary>
            Send a request to a remote <see cref="T:Battlegrounds.Networking.Requests.IRequestHandler"/> but do not expect a response.
            </summary>
            <remarks>
            This will still wait for a response but the response content will be ignored.
            </remarks>
            <param name="objectID">The object ID to send with request.</param>
            <param name="objectType">The object type to send with request.</param>
            <param name="args">The call arguments to send with request</param>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.IRequestHandler.BroadcastRequest(System.UInt64[],System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="objectID"></param>
            <param name="objectType"></param>
            <param name="args"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.IRequestHandler.CloseHandler">
            <summary>
            Gracefully closes the connection to the broker.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.ISingleInstanceHandler">
            <summary>
            Interface for handling single-instance type registers of <see cref="T:Battlegrounds.Networking.Proxy.IProxy"/> instances.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.ISingleInstanceHandler.RegisterInstance(Battlegrounds.Networking.Proxy.IProxy)">
            <summary>
            Register a specific single-instance.
            </summary>
            <param name="proxyObject">The specific instance.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.ISingleInstanceHandler.GetInstance(System.String)">
            <summary>
            Get the instance implementing <paramref name="proxyObjectType"/>.
            </summary>
            <param name="proxyObjectType">The role object type to find instance implementation of.</param>
            <returns>The matching <see cref="T:Battlegrounds.Networking.Proxy.IProxy"/> instance.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.ISingleInstanceHandler.GetInstance``1(System.String)">
            <summary>
            Get the instance implementing <paramref name="proxyObjectType"/>.
            </summary>
            <typeparam name="T">The actual <see cref="T:Battlegrounds.Networking.Proxy.IProxy"/> instance registered with the handler.</typeparam>
            <param name="proxtObjectType">The role object type to find instance implementation of.</param>
            <returns>The matching <see cref="T:Battlegrounds.Networking.Proxy.IProxy"/> instance.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.TypeInjectorDelegate">
            <summary>
            Delegate for type injection for <see cref="T:Battlegrounds.Networking.Proxy.IProxy"/> instances.
            </summary>
            <param name="remoteType">The name of the remote type that should be type-injected.</param>
            <param name="id">The ID of the remote object.</param>
            <param name="requestHandler">The handler that will handle the created object request</param>
            <returns></returns>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.ObjectPublishedHandler">
            <summary>
            Delegate for handling when a remote host publishes a new object of immediate importance.
            </summary>
            <param name="proxy">The proxy object that was published.</param>
        </member>
        <member name="T:Battlegrounds.Networking.Requests.ParticipantRequestHandler">
            <summary>
            Request handler for participants of remote-ended system.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Requests.ParticipantRequestHandler.SingleInstanceHandler">
            <summary>
            Get the single-instance handler that keeps track of remote-retrievable instances.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Requests.ParticipantRequestHandler.DependencyInjector">
            <summary>
            Get or set the context-defined type injector method.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Requests.ParticipantRequestHandler.ObjectPublished">
            <summary>
            Get or set the object published handler
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Requests.ParticipantRequestHandler.#ctor(Battlegrounds.Networking.Communication.IConnection,Battlegrounds.Networking.Requests.ISingleInstanceHandler)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="instanceHandler"></param>
        </member>
        <member name="T:Battlegrounds.Networking.Server.IServer">
            <summary>
            Interface representation of a server application
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.IServer.ListenPort">
            <summary>
            Get the port currently being listened to.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.IServer.Tunnels">
            <summary>
            Get the amount of active tunnels
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.IServer.Lobbies">
            <summary>
            Get the amount of active lobbies.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.IServer.IsRunning">
            <summary>
            Get if the server is currently listening for connections
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Server.IServer.Start">
            <summary>
            Start listening for connections
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Server.IServer.Stop">
            <summary>
            Stop listening for connections
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Server.IServerLobby">
            <summary>
            Interface for representing a lobby instance for server purposes.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.IServerLobby.HostEndpoint">
            <summary>
            Get the socket connected to the host of the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.IServerLobby.LobbyName">
            <summary>
            Get the identifying name of the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.IServerLobby.LobbyType">
            <summary>
            Get the identifying type of the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.IServerLobby.LobbyMembers">
            <summary>
            Get the amount of members in the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.IServerLobby.LobbyCapacity">
            <summary>
            Get the max capacity of the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.IServerLobby.LobbyPlayState">
            <summary>
            Get the play state of the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.IServerLobby.LobbyPlaymode">
            <summary>
            Get the play mode of the lobby.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.IServerLobby.LobbyIsProtected">
            <summary>
            Get if the lobby is password protected.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.IServerLobby.LobbyId">
            <summary>
            Get the GUID identifying the lobby.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Server.IServerLobby.CreateTunnel(Battlegrounds.Networking.Communication.Sockets.ISocket,System.String)">
            <summary>
            Create a new tunnel between <paramref name="origin"/> and HostPoint.
            </summary>
            <param name="origin">The socket of the tunnel origin,</param>
            <param name="password">The password to use when attempting to form tunnel.</param>
            <returns>A <see cref="T:Battlegrounds.Networking.Communication.ITunnel"/> instance connecting both sockets.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.IServerLobby.CloseLobby">
            <summary>
            Close the lobby, terminating the host socket.
            </summary>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerAPI">
            <summary>
            API instance for interacting with the server.
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerAPI.HasGUID">
            <summary>
            Get the a lobby GUID has been given to the server API to simplify method calls.
            </summary>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.#ctor(System.String)">
            <summary>
            Initialise a new server API client for targetted <paramref name="address"/>.
            </summary>
            <param name="address">The address of the API.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.SetLobbyGuid(System.String)">
            <summary>
            Set the lobby guid to use when requesting lobby-specific information.
            </summary>
            <param name="guid">The GUID of the lobby to use.</param>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.GetLobbies">
            <summary>
            Get all currently active lobbies on the server.
            </summary>
            <returns>A list of all active lobbies.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.UploadResults(Battlegrounds.Networking.Server.ServerMatchResults)">
            <summary>
            
            </summary>
            <param name="matchResults"></param>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.GetLobby(System.String)">
            <summary>
            Get a specific lobby instance from the server.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <returns>If lobby was returned, a <see cref="T:Battlegrounds.Networking.Server.ServerLobby"/> API representation; Otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.UploadCompany(System.String,System.UInt64,System.String)">
            <summary>
            Upload company json data to specified lobby.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="playerID">The player who owns the company.</param>
            <param name="jsonContent">The json content of the company.</param>
            <returns>If upload was successful, <see cref="F:Battlegrounds.Networking.Server.UploadCompanyResult.UPLOAD_SUCCESS"/>; Otherwise a more descriptive message.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.UploadCompany(System.UInt64,System.String)">
            <summary>
            Upload company json data to specified lobby.
            </summary>
            <param name="playerID">The player who owns the company.</param>
            <param name="jsonContent">The json content of the company.</param>
            <returns>If upload was successful, <see cref="F:Battlegrounds.Networking.Server.UploadCompanyResult.UPLOAD_SUCCESS"/>; Otherwise a more descriptive message.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.DownloadCompany(System.String,System.UInt64)">
            <summary>
            Download company file from lobby.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="playerID">The ID of the player who owns the desired company.</param>
            <returns><see langword="null"/> if no company was found; Otherwise the json representation of the company.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.DownloadCompany(System.UInt64)">
            <summary>
            Download company file from lobby.
            </summary>
            <param name="playerID">The ID of the player who owns the desired company.</param>
            <returns><see langword="null"/> if no company was found; Otherwise the json representation of the company.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.PlayerHasCompany(System.String,System.UInt64)">
            <summary>
            Get if <paramref name="playerID"/> has a company file registered.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="playerID">The ID of the player who owns the desired company.</param>
            <returns>If company exists true; Otherwise false.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.PlayerHasCompany(System.UInt64)">
            <summary>
            Get if <paramref name="playerID"/> has a company file registered.
            </summary>
            <param name="playerID">The ID of the player who owns the desired company.</param>
            <returns>If company exists true; Otherwise false.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.UploadGamemode(System.String,System.Byte[])">
            <summary>
            Upload gamemode .sga file to lobby.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="binary">The binary .sga contents</param>
            <returns>If file was uploaded true; Otherwise false.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.UploadGamemode(System.Byte[])">
            <summary>
            Upload gamemode .sga file to lobby.
            </summary>
            <param name="binary">The binary .sga contents</param>
            <returns>If file was uploaded true; Otherwise false.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.DownloadGamemode(System.String,System.Byte[]@)">
            <summary>
            Download the uploaded gamemode file for the lobby.
            </summary>
            <param name="lobbyGuid">The GUID of the lobby.</param>
            <param name="binary">The binary contents of the downloaded gamemode.</param>
            <returns>If download was successful, true; Otherwise false.</returns>
        </member>
        <member name="M:Battlegrounds.Networking.Server.ServerAPI.DownloadGamemode(System.Byte[]@)">
            <summary>
            Download the uploaded gamemode file for the lobby.
            </summary>
            <param name="binary">The binary contents of the downloaded gamemode.</param>
            <returns>If download was successful, true; Otherwise false.</returns>
        </member>
        <member name="T:Battlegrounds.Networking.Server.ServerMatchResults">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.LengthTicks">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.TotalKills">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.TotalLosses">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.Outcome">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.Gamemode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.Option">
            <summary>
            
            </summary>
        </member>
        <member name="P:Battlegrounds.Networking.Server.ServerMatchResults.Map">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
