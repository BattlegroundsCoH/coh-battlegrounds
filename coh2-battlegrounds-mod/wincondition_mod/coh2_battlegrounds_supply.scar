-- Define supply table
_bg_supply = {
    ammo = {},
    fuel = {},
};

function BGSupply_Setup()
    
    -- Get supply blueprints
    if not BGSupply_GetBlueprints() then
        BGSupply_SetupUI = nil; -- Clear the supply UI
        return
    end

    -- Import supply data
    import("WinConditions/auxiliary_scripts/session_supply.scar");

    -- Create Fuel sgroup
    _bg_supply.fuel_sg = SGroup_CreateIfNotFound("_bg_supply_fuel_sg");

    -- Register spawn callback
    BGAPI_AddUnitSpawnedCallback(BGSupply_NewUnit);

    -- Declare a definitive flag marking the supply system enabled
    _bg_supply_enabled = true;

end

function BGSupply_GetBlueprints()

    local result = true;
    local mod_str = bg_settings.tuning_mod.mod_guid .. ":";

    result, _bg_supply.crit_fuel = pcall(BP_GetCriticalBlueprint, mod_str .. "_bg_out_of_fuel");
    if not result then
        return false;
    end

    result, _bg_supply.crit_ammo = pcall(BP_GetCriticalBlueprint, mod_str .. "_bg_out_of_ammo");
    if not result then
        return false;
    end

    result, _bg_supply.crit_ammo_tw = pcall(BP_GetCriticalBlueprint, mod_str .. "_bg_out_of_ammo_tw");
    return result;

end

function BGSupply_NewUnit(player, squad, data)

    local profile = bgsupplydata_profiles[data.bp_name];
    local sid = Squad_GetGameID(squad);

    if profile.FueldData ~= nil then
        BGSupply_NewFuelUnit(squad, sid, profile.FueldData);
    end

    -- Create ammo profile (if any, and there's at least one clip carried in the profile)
    if profile.WeaponProfiles ~= nil then
        BGSupply_NewAmmoUnit(squad, sid, profile.WeaponProfiles);
    end

end

function BGSupply_NewFuelUnit(squad, id, fuelData)

    -- Create entry
    _bg_supply.fuel[id] = {
        max = fuelData.Fuel,
        current = fuelData.Fuel,
        rate = fuelData.BurnRate
    };

    -- Add squad to sgroup
    SGroup_Add(_bg_supply.fuel_sg, squad);

    if not Rule_Exists(BGSupply_OnFuelUpdate) then
        Rule_AddInterval(BGSupply_OnFuelUpdate, 0.25);
    end

end

function BGSupply_OnFuelUpdate()

    local __update_all_fuel = function(sgroupid, itemindex, squadID)
        if not Squad_HasCritical(squadID, _bg_supply.crit_fuel) then
            local still_mod = 0.05;
            if Squad_IsMoving(squadID) then
                still_mod = 1;
            end
            local target = _bg_supply.fuel[Squad_GetGameID(squadID)];
            target.current = target.current - target.rate * still_mod * 0.25;
            if target.current <= 0.0 then
                Cmd_CriticalHit(Squad_GetPlayerOwner(squadID), squadID, _bg_supply.crit_fuel, 0.0); 
            end
        end
    end

    SGroup_ForEach(_bg_supply.fuel_sg, __update_all_fuel);

end

function BGSupply_NewAmmoUnit(squad, id, ammoData)

    -- Create entry
    _bg_supply.ammo[id] = {
        slots = {},
        weapons = {}
    };

    -- Collect data
    for k, v in pairs(ammoData) do
        if v.SystemSlot > 0 then
            local slot = _bg_supply.ammo[id].slots[v.SystemSlot];
            local max_bullets = v.ClipSize * v.ClipCarried * v.Users;
            if slot == nil then
                _bg_supply.ammo[id].slots[v.SystemSlot] = {
                    max = max_bullets,
                    current = max_bullets,
                    refill = v.ClipSize
                };
            else
                slot.max = slot.max + max_bullets;
                slot.current = slot.current + max_bullets;
                slot.refill = slot.refill + v.ClipSize;
            end
            _bg_supply.ammo[id].weapons[k] = v.FireRate;
        end
    end

end

-- Any weapon within the system must invoke this (Primary weapon)
function ScarEvent_OnWeaponFired(target, executer)
    local weapon = BP_GetName(Entity_GetWeaponBlueprint(executer, 0));
    BGSupply_OnFireEvent(Entity_GetSquad(executer), weapon, 1);
end

-- Any weapon within the system must invoke this (Secondary weapons)
function ScarEvent_OnSecondaryWeaponFired(target, executer)
    local weapon = BP_GetName(Entity_GetWeaponBlueprint(executer, 1));
    BGSupply_OnFireEvent(Entity_GetSquad(executer), weapon, 2);
end

-- Any weapon within the system must invoke this (Tertiary weapon)
function ScarEvent_OnTertiaryWeaponFired(target, executer)
    local weapon = BP_GetName(Entity_GetWeaponBlueprint(executer, 2));
    BGSupply_OnFireEvent(Entity_GetSquad(executer), weapon, 3);
end

-- Any weapon within the system must invoke this (Tertiary weapon)
function ScarEvent_OnTopWeaponFired(target, executer)
    local weapon = BP_GetName(Entity_GetWeaponBlueprint(executer, 2));
    BGSupply_OnFireEvent(Entity_GetSquad(executer), weapon, 4);
end

-- Any weapon within the system must invoke this (Smoke weapon)
function ScarEvent_OnSmokeWeaponFired(target, executer)
    local weapon = BP_GetName(Entity_GetWeaponBlueprint(executer, 0));
    BGSupply_OnFireEvent(Entity_GetSquad(executer), weapon, 5);
end

-- Any weapon within the system must invoke this (HE - or other ammo type weapon)
function ScarEvent_OnHEWeaponFired(target, executer)
    local weapon = BP_GetName(Entity_GetWeaponBlueprint(executer, 0));
    BGSupply_OnFireEvent(Entity_GetSquad(executer), weapon, 6);
end

-- Any weapon within the system must invoke this (Flame weapon)
function ScarEvent_OnFlameWeaponFired(target, executer)
    local weapon = BP_GetName(Entity_GetWeaponBlueprint(executer, 0));
    BGSupply_OnFireEvent(Entity_GetSquad(executer), weapon, 7);
end

-- Any weapon within the system must invoke this (Team weapon)
function ScarEvent_OnSyncWeaponFired(target, executer)
    local weapon = BP_GetName(Entity_GetWeaponBlueprint(executer, 0));
    BGSupply_OnFireEvent(Entity_GetSquad(executer), weapon, 8);
end

function BGSupply_OnFireEvent(squad, weapon, slot)
    local target = _bg_supply.ammo[Squad_GetGameID(squad)];
    if target ~= nil then
        target.slots[slot].current = target.slots[slot].current - (target.weapons[weapon] or 1);
        if target.slots[slot].current <= 0 then
            BGSupply_OnOutOfAmmunition(squad);
        end
    end
end

function BGSupply_OnOutOfAmmunition(squad)
    local crit = _bg_supply.crit_ammo;
    if Squad_HasTeamWeapon(squad) then
        crit = _bg_supply.crit_ammo_tw;
    end
    Cmd_CriticalHit(Squad_GetPlayerOwner(squad), squad, crit, 0.0); 
end

function BGSupplyAE_RefillAll(executer, target)
    
    if scartype(target) == ST_ENTITY then
        target = Entity_GetSquad(target);
        if target == nil then
            return;
        end
    end

    -- Call the two other functiosn dedicated to each type
    BGSupplyAE_RefillAmmo(executer, target);
    BGSupplyAE_RefillFuel(executer, target);

end

function BGSupplyAE_RefillAmmo(executer, target)
    
    -- Get target squad
    if scartype(target) == ST_ENTITY then
        target = Entity_GetSquad(target);
        if target == nil then
            return;
        end
    end

    if Squad_HasCritical(target, _bg_supply.crit_ammo) then
        Squad_RemoveCritical(target, _bg_supply.crit_ammo);
    elseif Squad_HasCritical(target, _bg_supply.crit_ammo_tw) then
        Squad_RemoveCritical(target, _bg_supply.crit_ammo_tw);
    end

    local state = _bg_supply.ammo[Squad_GetGameID(target)];
    if state == nil then
        return;
    end

    for _,slot in pairs(state.slots) do
        if slot.current < slot.max then
            slot.current = slot.current + slot.refill;
            if slot.current > slot.max then
                slot.current = slot.max;
            end
        end
    end

end

function BGSupplyAE_RefillFuel(executer, target)
    
    if scartype(target) == ST_ENTITY then
        target = Entity_GetSquad(target);
        if target == nil then
            return;
        end
    end

    if Squad_HasCritical(target, _bg_supply.crit_fuel) then
        Squad_RemoveCritical(target, _bg_supply.crit_fuel);
    end

    local state = _bg_supply.fuel[Squad_GetGameID(target)];
    if state == nil or state.current >= state.max then
        return;
    end

    state.current = state.current + (state.rate * 2);
    if state.current > state.max then
        state.current = state.max;
    end

end
