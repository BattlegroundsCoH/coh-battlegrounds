_bg_AISettings = {
    thresholds = {
        [1] = {
            smart_thinking = 4,
            trigger_callin = 9,
            max_deployed = 12, -- max deployed at a time
        },
        [2] = {
            smart_thinking = 3,
            trigger_callin = 7,
            max_deployed = 14,
        },
        [3] = {
            smart_thinking = 2,
            trigger_callin = 4,
            max_deployed = 20,
        },
        [4] = {
            smart_thinking = 1,
            trigger_callin = 3,
            max_deployed = 24,
        }
    },
    modifiers = {
        [1] = {
            aggressive_factor = 1,
            call_mod = 2.75,
            manpower_income = 1.1,
            munitions_income = 1.3,
            fuel_income = 1.1,
        },
        [2] = {
            aggressive_factor = 1.5,
            call_mod = 2.1,
            manpower_income = 1.2,
            munitions_income = 1.6,
            fuel_income = 1.3,
        },
        [3] = {
            aggressive_factor = 2.5,
            call_mod = 1.2,
            manpower_income = 1.4,
            munitions_income = 2.1,
            fuel_income = 2.3,
        },
        [4] = {
            aggressive_factor = 3.25,
            call_mod = 0.9,
            manpower_income = 1.6,
            munitions_income = 2.3,
            fuel_income = 2.8,
        }
    }
};

function BGAI_RegisterAIPlayer(index, player)

    -- Get the difficulty
    local difficulty = BGAI_GetDifficultyFromValue(_bg_aiData[index].difficulty);

    -- Set the difficulty
    AI_SetDifficulty(player, difficulty);

    -- Set some basics
    _bg_aiData[index].demand_vehicle = 0;
    _bg_aiData[index].demand_heavy = 0;
    _bg_aiData[index].demand_support = 0;
    _bg_aiData[index].demand_any = 1;

    -- Apply resource modifiers
    _bg_aiData[index].resource_mods = {
        manpower_mod = Modify_PlayerResourceRate(player, RT_Manpower, _bg_AISettings.modifiers[_bg_aiData[index].difficulty].manpower_income),
        munitions_mod = Modify_PlayerResourceRate(player, RT_Munition, _bg_AISettings.modifiers[_bg_aiData[index].difficulty].munitions_income),
        fuel_mod = Modify_PlayerResourceRate(player, RT_Fuel, _bg_AISettings.modifiers[_bg_aiData[index].difficulty].fuel_income),
    };

    -- Get the update time
    local updateTime = 60 - (_bg_aiData[index].difficulty * 14.5);

    -- Set update interval
    _bg_aiData[index].update_interval = updateTime;
    _bg_aiData[index].update_time = updateTime + (_bg_aiData[index].aiIndex * 5); -- index * 5 ==> Update offset

    -- Add AI update if none
    if not Rule_Exists(BGAI_UpdateAIPlayers) then
        Rule_AddInterval(BGAI_UpdateAIPlayers, 5);
    end

    -- Add the AI oneshot (if none)
    if not Rule_Exists(BGAI_EvalAllInitial) then
        Rule_AddOneShot(BGAI_EvalAllInitial, 5);
    end

end

function BGAI_GetDifficultyFromValue(d)
    if d == 1 then
        return AD_Easy;
    elseif d == 2 then
        return AD_Standard;
    elseif d == 3 then
        return AD_Hard;
    else
        return AD_Hardest;
    end
end

function BGAI_GetAIPlayerID(player)
    for i=1, #_bg_aiData do
        if _bg_aiData[i].player == player then
            return i;
        end
    end
    return -1;
end

function BGAI_EvalAllInitial()
    for i=1, #_bg_aiData do
        BGAI_EvalProduction(i);
    end
end

function BGAI_UpdateAIPlayers()

    for i=1, #_bg_aiData do

        _bg_aiData[i].update_time = _bg_aiData[i].update_time - 5;

        if _bg_aiData[i].update_time <= 0 then

            -- Evaluate own units
            BGAI_EvalUnits(i);

            -- Evaluate production
            BGAI_EvalProduction(i);

            -- Reset update interval
            _bg_aiData[i].update_time = _bg_aiData[i].update_interval;

        end

    end

end

function BGAI_EvalUnits(index)

    local sg_player = Player_GetSquads(_bg_aiData[index].player);

    local sg_aitemp = SGroup_CreateIfNotFound("sg_aitemp");
    SGroup_Clear(sg_aitemp);

    local squad_eval = function(sgroupid, itemindex, squadID)

        if Squad_IsUnderAttack(squadID, 5) then
            Squad_GetLastAttackers(squadID, sg_aitemp, 5);
        end

    end

    SGroup_ForEach(sg_player, squad_eval);

    if SGroup_Count(sg_aitemp) > 0 then
        BGAI_EvalAttackers(index, sg_aitemp);
    end

    -- Always increase the demand for something
    _bg_aiData[index].demand_any = _bg_aiData[index].demand_any + (1 * _bg_AISettings.modifiers[_bg_aiData[index].difficulty].aggressive_factor);

end

function BGAI_EvalAttackers(index, attackGroup)

    local attacker_eval = function(sgroupid, itemindex, squadID) -- Increase demand for specific unit counters
        if Squad_HasTeamWeapon(squadID) then
            _bg_aiData[index].demand_vehicle = _bg_aiData[index].demand_vehicle + (0.5 *_bg_AISettings.modifiers[_bg_aiData[index].difficulty].aggressive_factor);
            _bg_aiData[index].demand_support = _bg_aiData[index].demand_support + (0.75 *_bg_AISettings.modifiers[_bg_aiData[index].difficulty].aggressive_factor);
        elseif Squad_IsVehicleSquad(squadID) then
            _bg_aiData[index].demand_vehicle = _bg_aiData[index].demand_vehicle + (1.75 *_bg_AISettings.modifiers[_bg_aiData[index].difficulty].aggressive_factor);
            _bg_aiData[index].demand_support = _bg_aiData[index].demand_support + (0.35 *_bg_AISettings.modifiers[_bg_aiData[index].difficulty].aggressive_factor);
            _bg_aiData[index].demand_heavy = _bg_aiData[index].demand_heavy + (0.25 *_bg_AISettings.modifiers[_bg_aiData[index].difficulty].aggressive_factor);
        end
    end

    SGroup_ForEach(attackGroup, attacker_eval);

end

function BGAI_EvalProduction(index)

    local squadCount = Player_GetSquadCount(_bg_aiData[index].player);

    if (squadCount <= _bg_AISettings.thresholds[_bg_aiData[index].difficulty].smart_thinking) then -- The 'Get something unto the field' threshold

        if not BGAI_BuySomething(index, "infantry") then -- always try to buy infantry
            if not BGAI_BuySomething(index, "vehicle") then -- Then vehicles
                if not BGAI_BuySomething(index, "vehicle", true) then  -- Then heavy vehicles
                    BGAI_BuySomething(index, "team_weapon"); -- Then team weapons
                end
            end
        end

    elseif squadCount <= _bg_AISettings.thresholds[_bg_aiData[index].difficulty].max_deployed then

        if _bg_aiData[index].demand_any > _bg_AISettings.thresholds[_bg_aiData[index].difficulty].trigger_callin then

            local skipHeavyVehicle = false;
            local skipVehicle = false;
            local skipSupport = false;
            local pCounter = 0;

            local triggerThreshold = (_bg_AISettings.thresholds[_bg_aiData[index].difficulty].trigger_callin * _bg_AISettings.modifiers[_bg_aiData[index].difficulty].call_mod);

            while pCounter < 10 do

                if _bg_aiData[index].demand_heavy > triggerThreshold + 5 and not skipHeavyVehicle then
                    if BGAI_BuySomething(index, "vehicle", true) then
                        _bg_aiData[index].demand_heavy = 0;
                        break;
                    else
                        skipHeavyVehicle = true;
                    end
                elseif _bg_aiData[index].demand_vehicle > triggerThreshold + 2 and not skipVehicle then
                    if BGAI_BuySomething(index, "vehicle") then
                        _bg_aiData[index].demand_vehicle = 0;
                        break;
                    else
                        skipVehicle = true;
                    end
                elseif _bg_aiData[index].demand_support > triggerThreshold + 1 and not skipSupport then
                    if BGAI_BuySomething(index, "team_weapon") then
                        _bg_aiData[index].demand_support = 0;
                        break;
                    else
                        skipSupport = true;
                    end
                else
                    local randomVal = World_GetRand(1,10);
                    if randomVal <= 4 then
                        if BGAI_BuySomething(index, "infantry") then
                            _bg_aiData[index].demand_vehicle = _bg_aiData[index].demand_vehicle + 1.5;
                            break;
                        end
                    elseif randomVal <= 7 then
                        if BGAI_BuySomething(index, "vehicle") then
                            _bg_aiData[index].demand_support = _bg_aiData[index].demand_support + 1.5;
                            break;
                        end
                    else
                        if BGAI_BuySomething(index, "team_weapon") then
                            _bg_aiData[index].demand_vehicle = _bg_aiData[index].demand_vehicle + 0.35;
                            break;
                        end
                    end
                end

                pCounter = pCounter + 1;

            end

            _bg_aiData[index].demand_any = 0;

        end

    end

end

function BGAI_BuySomething(index, type, heavy)

    local affordable_units = BGAI_FindAffordableUnits(index, type, heavy);

    if bg_set:size(affordable_units) > 0 then
        BGAI_BuyRandom(index, affordable_units);
        return true;
    else
        return false;
    end

end

function BGAI_FindAffordableUnits(index, type, heavy)

    local manpower = Player_GetResource(_bg_aiData[index].player, RT_Manpower);
    local munitions = Player_GetResource(_bg_aiData[index].player, RT_Munition);
    local fuel = Player_GetResource(_bg_aiData[index].player, RT_Fuel);
    local affordable_set = {}

    if heavy == nil then
        heavy = false;
    end

    for _, unit in pairs(_bg_aiData[index].company.units) do

        local heavyProperty = unit.heavy or false;
        local heavyCondition = (heavy and heavyProperty) or (heavy == false and not heavyProperty);

        if (not unit.spawned) and (type == nil or unit.category == type) and heavyCondition then

            local costManpower = unit.cost.manpower or 0;
            local costMunitions = unit.cost.munitions or 0;
            local costFuel = unit.cost.fuel or 0;

            if manpower >= costManpower and munitions >= costMunitions and fuel >= costFuel then
                bg_set:add(affordable_set, unit);
            end

        end

    end

    return affordable_set;

end

function BGAI_BuyRandom(index, set)

    -- Get the index of random unit
    local i = World_GetRand(1, bg_set:size(set));

    -- Get basic data to use
    local player = _bg_aiData[index].player;
    local gotopos = Player_GetStartingPosition(player);
    local spawnfrom = Player_GetNearestMapEntry(player, gotopos);

    -- Call in the unit
    BG_CallInUnit(set[i], player, gotopos, spawnfrom);

end

-- Note: The AI will ignore call-in phases
