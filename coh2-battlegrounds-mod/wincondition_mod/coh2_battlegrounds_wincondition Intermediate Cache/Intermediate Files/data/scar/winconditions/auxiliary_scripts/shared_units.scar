function BG_HookUnitSystem()

    -- Call every tick...
    --Rule_Add(BG_UpdateUnitCounts);

end

function BG_UpdateUnitCounts()

    -- Loop through all players
    for i=1, #_bg_playerData do

        -- Get the new units (if any)
        local unitset = bg_set:from_sgroup(Player_GetSquads(_bg_playerData[i].player));
        local newunits = bg_set:diff(unitset, _bg_playerData[i].squads);

        -- Apply updates if needed
        if (#newunits > 0) then

            -- Add new squads
            for j=1, #newunits do
                --BG_AddSquad(_bg_playerData[i].player, newunits[j]);
            end

            -- Update set
            _bg_playerData[i].squads = unitset;

        end

    end

end

--function BG_AddSquad(player, sid)
--
--    -- Retrieve basic data
--    local squad = Squad_FromWorldID(sid);
--    local pbgid = BP_GetName(Squad_GetBlueprint(squad));
--
--end

function BG_FindSquadInCompany(playerID, unitID)
    for i=1, #_bg_playerData[playerID].company.units do
        if (_bg_playerData[playerID].company.units[i].company_id == unitID) then
            return _bg_playerData[playerID].company.units[i];
        end
    end
    return nil;
end

function BG_DeploySquad(player, unit_id)

    -- Get the player reference id
    local playerRefID = BG_GetPlayerID(player);

    -- Get unit data
    local unit_data = BG_FindSquadInCompany(playerRefID, unit_id);

    -- Not a valid unit for us to spawn
    if unit_data == nil then
        return;
    end

    -- Make sure we don't spawn in something twice
    if not unit_data.spawned then

        -- Get position data
        local gotopos = Player_GetStartingPosition(player);
        local spawnfrom = Player_GetNearestMapEntry(player, gotopos);

        -- Create the squad
        local squad = Squad_CreateAndSpawnToward(BP_GetSquadBlueprint(unit_data.bp_name), player, 0, spawnfrom, gotopos );
        local sg_temp = SGroup_FromSquad(squad);

        -- Give move order
        Command_SquadPos(player, sg_temp, SCMD_Move, gotopos, false )

        -- Apply veterancy rank
        if (unit_data.veterancy_rank > 0) then
            Squad_IncreaseVeterancyRank(squad, unit_data.veterancy_rank, true );
        end

        -- Apply veterancy progress
        if (unit_data.veterancy_progress > 0) then
            Squad_IncreaseVeterancyExperience(squad, unit_data.veterancy_progress, true, true );
        end

        -- Add upgrades
        for i=1, #unit_data.upgrades do
            Command_SquadUpgrade(player, sg_temp, BP_GetUpgradeBlueprint(unit_data.upgrades[i].bp), true, false );
        end

        -- Add slot_items
        for i=1, #unit_data.slot_items do
            -- TODO: Implement
        end

        -- Add modifiers
        for i=1, #unit_data.modifiers do
            -- TODO: Implement
        end

        -- Register the unit
        _bg_playerData[playerRefID].deployed[Squad_GetGameID(squad)] = unit_data.company_id;

        -- Broadcast that a unit was spawned
        Command_PlayerBroadcastMessage(Game_GetLocalPlayer(), Game_GetLocalPlayer(), _bg_message_type_no_actions_required, "D["..unit_data.company_id.."]");

        -- Add events
        Rule_AddSquadEvent(BG_OnSquadDeath, squad, GE_SquadKilled);
        Rule_AddSquadEvent(BG_OnSquadUpgrade, squad, GE_UpgradeComplete);

        -- Mark spawned
        unit_data.spawned = true;

        -- Was it the local player who spawned this unit?
        if player == Game_GetLocalPlayer() then
            BG_RefreshCompanyView();
        end

    end

end

function BG_OnSquadDeath(squad)

    -- Get required info
    local playerOwner = Squad_GetPlayerOwner(squad);
    local playerRefID = BG_GetPlayerID(playerOwner);
    local id = Squad_GetGameID(squad);

    -- Broadcast that the unit was killed
    Command_PlayerBroadcastMessage(Game_GetLocalPlayer(), Game_GetLocalPlayer(), _bg_message_type_no_actions_required, "K[" .. _bg_playerData[playerRefID].deployed[id] .. "]")

end

function BG_OnSquadUpgrade(squad)

    -- Get required info
    local playerOwner = Squad_GetPlayerOwner(squad);
    local playerRefID = BG_GetPlayerID(playerOwner);
    local id = Squad_GetGameID(squad);

    -- Broadcast that the unit was killed
    Command_PlayerBroadcastMessage(Game_GetLocalPlayer(), Game_GetLocalPlayer(), _bg_message_type_no_actions_required, "U[" .. _bg_playerData[playerRefID].deployed[id] .. "]")

end

function BG_RecallSquad(player, unit_id)



end

function BG_SurrenderSquad(squad)

end

function BG_SaveSquad(squad)

end
