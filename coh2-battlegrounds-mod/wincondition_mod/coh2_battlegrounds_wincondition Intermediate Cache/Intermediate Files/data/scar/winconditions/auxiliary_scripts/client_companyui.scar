local _bg_local_category = "infantry";
local _bg_local_companyIsVisible = false;
local _bg_local_category_page = 1;
local _bg_local_category_page_max = 1;

_BG_UI_CompanyViewX = 0;
_BG_UI_CompanyViewY = -616;

_BG_UI_UpdateInterval = 0.25;

_BG_UI_UNIT_CARD_CLICKED = 42;
_BG_UI_UNIT_CARD_CANCEL_CLICKED = 43;

function BG_CreateCallInUI(player)

    -- Player ID
    bgPlayerID = BG_GetPlayerID(player);

    -- The position
    local callinPos = UI_BottomRight(355, 334);

    -- Create the root panel
    bg_call_ui = RootPanel();
    bg_call_ui:setPos(UI_UnpackPosition(callinPos));

    -- Create 'Show Company' button
    BG_CreateShowCompanyButon();

    -- Create the company view
    BG_CreateCompanyView();

    -- Create Special Company abilities selector
    BG_CreateCompanyAbilityView(_bg_playerData[bgPlayerID].company);

    -- Add a function update deployment
    Rule_AddInterval(BG_UpdateCompanyUIValues, _BG_UI_UpdateInterval);

end

function BG_CreateShowCompanyButon()

    local show_deployment_bkg = Panel();
    show_deployment_bkg:setBounds(0, 0, 360, 72);
    show_deployment_bkg:add(Icon("ModIcons_6a0a13b89555402ca75b85dc30f5cb04_button_background", 360, 72, 0, 0));

    -- Button for show/hide deployment menu
    bg_show_company = Button(Util_CreateLocString(_bg_playerData[BG_GetPlayerID(Game_GetLocalPlayer())].company.name), "ModIcons_6a0a13b89555402ca75b85dc30f5cb04_button_simple");
    bg_show_company:setBounds(24, 12, 310, 32);
    bg_show_company:setCallback(function()
        _bg_local_companyIsVisible = not _bg_local_companyIsVisible; -- Negate the value
        if (_bg_local_companyIsVisible) then -- Should we show it?
            BG_ShowCompanyCategory(_bg_local_category); -- This will also show it
        else -- Hide it
            BG_HideCompanyView();
        end
    end);

    -- Add callin button
    show_deployment_bkg:add(bg_show_company);

    -- Add callin button
    bg_call_ui:add(show_deployment_bkg);

end

function BG_CreateCompanyView()

    -- The panel containing the stuff
    bg_companyView = Panel();
    bg_companyView:setPos(_BG_UI_CompanyViewX, _BG_UI_CompanyViewY);

    -- The background
    bg_companyView:add(Icon("ModIcons_6a0a13b89555402ca75b85dc30f5cb04_company_overview_clean", 360, 576, 0, 53));

    -- Create the company categories
    BG_CreateCompanyCategories();

    -- Create the company container
    bg_company_container = Panel();
    bg_company_container:setPos(24, 76); -- y = 56 + 20
    bg_companyView:add(bg_company_container);

    -- Create page controller panel
    bg_company_pageController = Panel();
    bg_company_pageController:setBounds(360 - 152, 576 + 53 - 44, 130, 36);
    bg_company_pageController:add(Icon("ModIcons_6a0a13b89555402ca75b85dc30f5cb04_company_page_bkg", 130, 36, 0, 0));

    -- The next page
    bg_company_pageController.next_page = function(tag)
        if _bg_local_category_page + 1 <= _bg_local_category_page_max then
            _bg_local_category_page = _bg_local_category_page + 1;
            BG_ShowCompanyPage(_bg_playerData[BG_GetPlayerID(Game_GetLocalPlayer())].company.units, _bg_local_category);
            if _bg_local_category_page == _bg_local_category_page_max then
                bg_company_pageControllerRight:setEnabled(false);
            end
            bg_company_pageControllerLeft:setEnabled(true);
        end
    end

    -- The previous page
    bg_company_pageController.previous_page = function(tag)
        if _bg_local_category_page - 1 >= 1 then
            _bg_local_category_page = _bg_local_category_page - 1;
            BG_ShowCompanyPage(_bg_playerData[BG_GetPlayerID(Game_GetLocalPlayer())].company.units, _bg_local_category);
            if _bg_local_category_page == 1 then
                bg_company_pageControllerLeft:setEnabled(false);
            end
            bg_company_pageControllerRight:setEnabled(true);
        end
    end

    bg_company_pageControllerLeft = Button(Util_CreateLocString(""), "ModIcons_6a0a13b89555402ca75b85dc30f5cb04_gameover_left_button");
    bg_company_pageControllerLeft:setBounds(10, 6, 24, 22);
    bg_company_pageControllerLeft:setCallback(bg_company_pageController.previous_page);
    bg_company_pageController:add(bg_company_pageControllerLeft);

    bg_company_pageControllerRight = Button(Util_CreateLocString(""), "ModIcons_6a0a13b89555402ca75b85dc30f5cb04_gameover_right_button");
    bg_company_pageControllerRight:setBounds(130 - 34, 6, 24, 22);
    bg_company_pageControllerRight:setCallback(bg_company_pageController.next_page);
    bg_company_pageController:add(bg_company_pageControllerRight);

    bg_company_pageControllerLabel = Label(Util_CreateLocString("1/1"));
    bg_company_pageControllerLabel:setBounds(UI_CentreAlignWidth(68, 130), 6, 68, 28);
    bg_company_pageControllerLabel:setFontSize(11.0);
    bg_company_pageControllerLabel:setColor(Color.White);
    bg_company_pageControllerLabel:setHorizontalAlignment(LAH_Center);
    bg_company_pageController:add(bg_company_pageControllerLabel);

    bg_companyView:add(bg_company_pageController);

    -- Add panel
    bg_call_ui:add(bg_companyView);

    -- And we'll hide it
    BG_HideCompanyView(); -- When not being debugged...

end

function BG_CreateCompanyCategories()

    -- The categories background
    bg_companyView:add(Icon("ModIcons_6a0a13b89555402ca75b85dc30f5cb04_button_background", 360, 72, 0, 0));

    -- Infantry category
    bg_company_infantry_category = Button(Util_CreateLocString(""), "ModIcons_6a0a13b89555402ca75b85dc30f5cb04_button_inf");
    bg_company_infantry_category:setBounds(20, 11, 104, 30);
    bg_company_infantry_category:setTag("infantry");
    bg_company_infantry_category:setCallback(BG_ShowCompanyCategory);
    bg_companyView:add(bg_company_infantry_category);

    -- Team Weapon category
    bg_company_tw_category = Button(Util_CreateLocString(""), "ModIcons_6a0a13b89555402ca75b85dc30f5cb04_button_tw");
    bg_company_tw_category:setBounds(126, 11, 104, 30);
    bg_company_tw_category:setTag("team_weapon");
    bg_company_tw_category:setCallback(BG_ShowCompanyCategory);
    bg_companyView:add(bg_company_tw_category);

    -- Tank/Vehicle category
    bg_company_vehicle_category = Button(Util_CreateLocString(""), "ModIcons_6a0a13b89555402ca75b85dc30f5cb04_button_tank");
    bg_company_vehicle_category:setBounds(234, 11, 104, 30);
    bg_company_vehicle_category:setTag("vehicle");
    bg_company_vehicle_category:setCallback(BG_ShowCompanyCategory);
    bg_companyView:add(bg_company_vehicle_category);

end

function BG_ShowCompanyCategory(category)

    -- Do this locally for the player
    Player_CallLocal(Game_GetLocalPlayer(), function(player)

        -- Show the view
        bg_companyView:setPos(_BG_UI_CompanyViewX, _BG_UI_CompanyViewY);

        -- Get player ID
        local bgPlayerID = BG_GetPlayerID(player);

        -- Set max to show
        _bg_local_category_page = 1;

        -- Show the company page for the category
        BG_ShowCompanyPage(_bg_playerData[bgPlayerID].company.units, category);

        -- Update the category
        _bg_local_category = category;

    end);

end

function BG_HideCompanyView()
    bg_companyView:setPos(-9999, -9999);
end

function BG_CreateCompanyAbilityView(playerData) -- For special abilities requiring modal phases

    local specialPanel = Panel();
    specialPanel:setPos(-34, 0);
    specialPanel:add(Icon("ModIcons_6a0a13b89555402ca75b85dc30f5cb04_special_bkg", 38, 103, 0, 0));
    -- TODO: Implement sized-icons etc. such that the player can't select a building with no available abilities.
    local xOffset = 8;
    local yOffset = 12;
    local icoSize = 28;

    playerData.specials.artilleryButton = Button(nil, "ModIcons_6a0a13b89555402ca75b85dc30f5cb04_icon_artillery");
    playerData.specials.artilleryButton:setBounds(xOffset, yOffset, icoSize, icoSize);
    playerData.specials.artilleryButton:setTag("artillery_support");
    playerData.specials.artilleryButton:setCallback(BG_SpecialAbilitiesClicked);
    specialPanel:add(playerData.specials.artilleryButton);
    yOffset = yOffset + icoSize - 2;

    playerData.specials.airButton = Button(nil, "ModIcons_6a0a13b89555402ca75b85dc30f5cb04_icon_air_support");
    playerData.specials.airButton:setBounds(xOffset, yOffset, icoSize, icoSize);
    playerData.specials.airButton:setTag("air_support");
    playerData.specials.airButton:setCallback(BG_SpecialAbilitiesClicked);
    specialPanel:add(playerData.specials.airButton);
    yOffset = yOffset + icoSize - 2;

    playerData.specials.reinforcementsButton = Button(nil, "ModIcons_6a0a13b89555402ca75b85dc30f5cb04_icon_paratrooper");
    playerData.specials.reinforcementsButton:setBounds(xOffset, yOffset, icoSize, icoSize);
    playerData.specials.reinforcementsButton:setTag("air_reinforcements");
    playerData.specials.reinforcementsButton:setCallback(BG_SpecialAbilitiesClicked);
    specialPanel:add(playerData.specials.reinforcementsButton);
    yOffset = yOffset + icoSize - 2;

    bg_call_ui:add(specialPanel);

end

function BG_ShowCompanyPage(units, category)

    -- Clear the container
    bg_company_container:clear();

    -- Keep track of the y-offset
    local yOffset = 0.0

    -- Update page indices
    BG_UpdatePageIndex(units, category);

    -- For each unit in company unit
    for i=1, #units do
        if units[i].page_index == _bg_local_category_page then
            local unitcard = BG_CreateUnitcard(units[i], yOffset); -- SUGGESTION: Precache most of this
            bg_company_container:add(unitcard);
            yOffset = yOffset + 36;
        end
    end

    -- Update page buttons
    if _bg_local_category_page_max == 1 then
        bg_company_pageControllerLeft:setEnabled(false);
        bg_company_pageControllerRight:setEnabled(false);
    else
        bg_company_pageControllerLeft:setEnabled(_bg_local_category_page > 1);
        bg_company_pageControllerRight:setEnabled(_bg_local_category_page < _bg_local_category_page_max);
    end

    -- Update page label
    bg_company_pageControllerLabel:setText(Util_CreateLocString(_bg_local_category_page.."/".._bg_local_category_page_max));

end

function BG_UpdatePageIndex(units, category)

    local counter = 1;
    local page = 1;

    for i = 1, #units do
        if units[i].category == category and units[i].phase <= _bg_custom.phase_current and not units[i].spawned then
            units[i].page_index = page;
            counter = counter + 1;
            if counter > 14 then
                counter = 1;
                page = page + 1;
            end
        else
            units[i].page_index = -1;
        end
    end

    -- Update the page count
    _bg_local_category_page_max = page;

end

function BG_CreateUnitcard(unit, yoffset)

    -- Create the card container panel
    local cardPanel = Panel();
    cardPanel:setPos(0, yoffset);

    -- Add clickable background
    local backgroundBttn = Button(Util_CreateLocString(""), "ModIcons_6a0a13b89555402ca75b85dc30f5cb04_unitbackground");
    backgroundBttn:setBounds(0, 0, 312, 40);
    backgroundBttn:setTag(unit.company_id);
    backgroundBttn:setCallback(BG_UnitCardClicked);
    cardPanel:add(backgroundBttn);

    local symbolBttn = Button(Util_CreateLocString(""), unit.symbol);
    symbolBttn:setBounds(3, 3, 36, 36);
    symbolBttn:setTag(unit.company_id);
    symbolBttn:setCallback(BG_UnitCardClicked);
    cardPanel:add(symbolBttn);

    local xPositiveOffset = 40;

    -- If the unit has transport...
    if unit.transport ~= nil then
        local transport_symbol = Icon(unit.transport.symbol, 36, 36, xPositiveOffset - 2, 2);
        cardPanel:add(transport_symbol);
        xPositiveOffset = xPositiveOffset + 38;
    end

    -- Display manpower
    if (unit.cost.manpower ~= nil and unit.cost.manpower > 0) then
        xPositiveOffset = BG_CreateCost("ModIcons_6a0a13b89555402ca75b85dc30f5cb04_manpower_24x24", xPositiveOffset, 6, unit.cost.manpower, cardPanel);
    end

    -- Display munitions
    if (unit.cost.munitions ~= nil and unit.cost.munitions > 0) then
        xPositiveOffset = BG_CreateCost("ModIcons_6a0a13b89555402ca75b85dc30f5cb04_munitions_24x24", xPositiveOffset, 6, unit.cost.munitions, cardPanel);
    end
    
    -- Display fuel
    if (unit.cost.fuel ~= nil and unit.cost.fuel > 0) then
        xPositiveOffset = BG_CreateCost("ModIcons_6a0a13b89555402ca75b85dc30f5cb04_fuel_24x24", xPositiveOffset, 6, unit.cost.fuel, cardPanel);
    end

    if unit.isDeploying == true then
        BG_CreateUnitDeployProgress(unit, cardPanel);
    elseif unit.isRecallDelayed == true then
        BG_CreateUnitRecallProgress(unit, cardPanel);
    else
        BG_CreateUnitStats(unit, cardPanel);
    end

    -- Return the card
    return cardPanel;

end

function BG_CreateUnitStats(unit, card)

    -- The x-offset in the "negative direction"
    local xNegativeOffset = 268;

    -- If any veterancy
    if (unit.veterancy_rank > 0) then
        local vetstar_ico = Icon(BG_GetVStar(unit.veterancy_rank), 36, 22, xNegativeOffset, 7);
        card:add(vetstar_ico);
        xNegativeOffset = xNegativeOffset - 24;
    end

    -- Weapon symbol to display
    local wpn_symbol = BG_GetUnitItemIcon(unit);

    -- Do we have a weapon symbol to display?
    if (wpn_symbol ~= nil) then
        xNegativeOffset = xNegativeOffset - 34;
        local vetstar_ico = Icon(wpn_symbol, 48, 16, xNegativeOffset, 12);
        card:add(vetstar_ico);
    end

end

function BG_CreateCost(iconName, x, y, price, owner)

    local ico = Icon(iconName, 24, 24, x, y);
    owner:add(ico);
    x = x + 24;

    local cost = Label(Util_CreateLocString(price));
    cost:setBounds(x, y, 46, 28);
    cost:setFontSize(12.0);
    cost:setColor(Color.White);
    owner:add(cost);

    x = x + 28;

    return x;

end

function BG_CreateUnitDeployProgress(unit, card)

    local progress_frame = Icon("ModIcons_6a0a13b89555402ca75b85dc30f5cb04_progress_bar_small_frame", 135, 28, 180, 6);
    card:add(progress_frame);

    unit.deploy_visual = Icon("ModIcons_6a0a13b89555402ca75b85dc30f5cb04_progress_bar_small", BG_GetDeploytimeBar(unit), 12, 194, 12);
    card:add(unit.deploy_visual);

    -- Add clickable background
    local cancelBttn = Button(Util_CreateLocString(""), "ModIcons_6a0a13b89555402ca75b85dc30f5cb04_cancel_button");
    cancelBttn:setBounds(284, 0, 38, 38);
    cancelBttn:setTag(unit.company_id);
    cancelBttn:setCallback(BG_UnitCardCancelClicked);
    card:add(cancelBttn);

end

function BG_CreateUnitRecallProgress(unit, card)

    local progress_frame = Icon("ModIcons_6a0a13b89555402ca75b85dc30f5cb04_progress_bar_small_frame", 135, 28, 180, 6);
    card:add(progress_frame);

    unit.recall_visual = Icon("ModIcons_6a0a13b89555402ca75b85dc30f5cb04_progress_bar_small", BG_GetRecallTimeBar(unit), 12, 194, 12);
    card:add(unit.recall_visual);

end

function BG_UnitCardClicked(tag)
    -- Make sure we can click it
    if not UI_ButtonCheck(_BG_UI_UNIT_CARD_CLICKED) then
        return;
    end
    if not BG_AllowDeployment() then
        BG_ShowTooManyFieldedUnitsWarning();
        return;
    end
    local refPlayerID = BG_GetPlayerID(Game_GetLocalPlayer());
    for i=1, #_bg_playerData[refPlayerID].company.units do
        if _bg_playerData[refPlayerID].company.units[i].company_id == tonumber(tag) then
            if BG_VerifyPurchase(_bg_playerData[refPlayerID].company.units[i].cost) then
                _bg_playerData[refPlayerID].company.units[i].isDeploying = true;
                _bg_playerData[refPlayerID].company.units[i].deploy_time = _bg_playerData[refPlayerID].company.units[i].cost.fieldtime;
                BG_RefreshCompanyView();
                Game_SendMessage(_bg_message_type_player_request_deploy, tag); -- Publish we've requested this unit
                local ps = Battlegrounds_FormatResources(_bg_playerData[refPlayerID].company.units[i].cost, true);
                Game_SendMessage(_bg_message_type_player_resource, ps); -- Subtrack the resources
            else
                BG_ShowInsufficientFundsWarning();
            end
            break;
        end
    end
end

function BG_UnitCardCancelClicked(tag)
    -- Make sure we can click it
    if not UI_ButtonCheck(_BG_UI_UNIT_CARD_CANCEL_CLICKED) then
        return;
    end
    local refPlayerID = BG_GetPlayerID(Game_GetLocalPlayer());
    for i=1, #_bg_playerData[refPlayerID].company.units do
        if _bg_playerData[refPlayerID].company.units[i].company_id == tonumber(tag) and _bg_playerData[refPlayerID].company.units[i].isDeploying == true then
            _bg_playerData[refPlayerID].company.units[i].isDeploying = false;
            _bg_playerData[refPlayerID].company.units[i].deploy_time = nil;
            BG_RefreshCompanyView();
            Game_SendMessage(_bg_message_type_player_cancel_deploy, tag); -- Published we've cancelled this unit
            local ps = Battlegrounds_FormatResources(_bg_playerData[refPlayerID].company.units[i].cost, false);
            Game_SendMessage(_bg_message_type_player_resource, ps); -- Get our resources back
            break;
        end
    end
end

function BG_UpdateCompanyUIValues()
    Player_CallLocal(Game_GetLocalPlayer(), function(player)

        -- The player ID
        local refPlayerID = BG_GetPlayerID(player);

        for i=1, #_bg_playerData[refPlayerID].company.units do
            if _bg_playerData[refPlayerID].company.units[i].deploy_time ~= nil then
                _bg_playerData[refPlayerID].company.units[i].deploy_time = _bg_playerData[refPlayerID].company.units[i].deploy_time - _BG_UI_UpdateInterval;
                if _bg_playerData[refPlayerID].company.units[i].deploy_time <= 0 then
                    Command_PlayerBroadcastMessage(Game_GetLocalPlayer(), Game_GetLocalPlayer(), _bg_message_type_player_deploy, tostring(_bg_playerData[refPlayerID].company.units[i].company_id));
                    _bg_playerData[refPlayerID].company.units[i].deploy_time = nil;
                    _bg_playerData[refPlayerID].company.units[i].isDeploying = false;
                    BG_RefreshCompanyView();
                else
                    if _bg_local_companyIsVisible and _bg_playerData[refPlayerID].company.units[i].deploy_visual ~= nil then
                        local p = BG_GetDeploytimeBar(_bg_playerData[refPlayerID].company.units[i]);
                        _bg_playerData[refPlayerID].company.units[i].deploy_visual:setSize(p, 12);
                    end
                end
            elseif _bg_playerData[refPlayerID].company.units[i].isRecallDelayed == true then
                _bg_playerData[refPlayerID].company.units[i].recall_wait_time = _bg_playerData[refPlayerID].company.units[i].recall_wait_time - _BG_UI_UpdateInterval;
                if _bg_playerData[refPlayerID].company.units[i].recall_wait_time <= 0 then
                    _bg_playerData[refPlayerID].company.units[i].recall_wait_time = nil;
                    _bg_playerData[refPlayerID].company.units[i].isRecallDelayed = false;
                    BG_RefreshCompanyView();
                else
                    if _bg_local_companyIsVisible and _bg_playerData[refPlayerID].company.units[i].recall_visual ~= nil then
                        local p = BG_GetRecallTimeBar(_bg_playerData[refPlayerID].company.units[i]);
                        _bg_playerData[refPlayerID].company.units[i].recall_visual:setSize(p, 12);
                    end
                end
            end
        end

        -- Update the company button
        BG_UpdateCompanyButtonView(_bg_playerData[refPlayerID].player, _bg_playerData[refPlayerID].company.name);

    end)
end

function BG_GetDeploytimeBar(unit)
    if unit.isDeploying then
        local maxTime = unit.cost.fieldtime;
        return (maxTime - unit.deploy_time) / maxTime * 94;
    else
        return 0;
    end
end

function BG_GetRecallTimeBar(unit)
    if unit.isRecallDelayed then
        local maxTime = unit.recall_wait_time_max;
        return unit.recall_wait_time / maxTime * 102;
    else
        return 0;
    end
end

function BG_RefreshCompanyView()
    if _bg_local_companyIsVisible then
        BG_ShowCompanyCategory(_bg_local_category); -- Trigger a complete redraw
    end
end

function BG_VerifyPurchase(cost, player)
    if player == nil then
        player = Game_GetLocalPlayer();
    end
    return Player_CanBuy(player, cost.manpower or 0, cost.munitions or 0, cost.fuel or 0);
end

function BG_AllowDeployment(player)
    if player == nil then
        player = Game_GetLocalPlayer();
    end
    return Player_GetSquadCount(player) < _bg_custom.max_squad_count;
end

function BG_ShowInsufficientFundsWarning()
    if g_uiWarningIndex == nil then
        BG_ClearWarnings();
        g_uiWarningIndex = UIWarning_Show(BG_LocString(3));
        if not Rule_Exists(BG_ClearWarnings) then
            Rule_AddOneShot(BG_ClearWarnings, 5);
        end
    end
end

function BG_ShowTooManyFieldedUnitsWarning()
    if g_uiWarningIndex == nil then
        BG_ClearWarnings();
        g_uiWarningIndex = UIWarning_Show(BG_LocString(18));
        if not Rule_Exists(BG_ClearWarnings) then
            Rule_AddOneShot(BG_ClearWarnings, 5);
        end
    end
end

function BG_ClearWarnings()
    if g_uiWarningIndex ~= nil then
        UI_TitleDestroy(g_uiWarningIndex);
        Rule_RemoveIfExist(BG_ClearWarnings);
        g_uiWarningIndex = nil;
    end
end

function BG_UpdateCompanyButtonView(player, name)
    bg_show_company:setText(Util_CreateLocString(name .. " (" .. tostring(Player_GetSquadCount(player)) .. "/" .. tostring(_bg_custom.max_squad_count) ..")"));
end

function BG_SpecialAbilitiesClicked(type)
    local pid = BG_GetPlayerID(Game_GetLocalPlayer());
    if pid ~= -1 then
        local e = _bg_playerData[pid].special_ability_entities[type];
        if e ~= nil then
            Misc_SelectEntity(e);
        end
    end
end
