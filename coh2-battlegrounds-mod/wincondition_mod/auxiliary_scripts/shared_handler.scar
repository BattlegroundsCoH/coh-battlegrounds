------------------------------------------------------------------------------------
-- Important Constants
------------------------------------------------------------------------------------
_bg_guid = "6a0a13b89555402ca75b85dc30f5cb04"; -- GUID for the mod

_bg_custom = {}; -- Custom data

_bg_playerData = {};

_bg_message_type_no_actions_required = 42.0;
_bg_message_type_player_surrender = 43.0;
_bg_message_type_player_deploy = 44.0;
_bg_message_type_team_withdraw = 45.0;

------------------------------------------------------------------------------------
-- Imports
------------------------------------------------------------------------------------
import("WinConditions/auxiliary_scripts/session.scar");
import("WinConditions/auxiliary_scripts/shared_companyloader.scar");
import("WinConditions/auxiliary_scripts/shared_units.scar");
import("WinConditions/auxiliary_scripts/shared_util.scar");
import("WinConditions/auxiliary_scripts/api_ui.scar");
import("WinConditions/auxiliary_scripts/client_companyui.scar");
import("WinConditions/auxiliary_scripts/client_overrideui.scar");

function BG_Init()

    local j = 1;

    -- Create player data (for relevant players)
    for i = 1, World_GetPlayerCount() do
        local player = World_GetPlayerAt(i);
        if not AI_IsAIPlayer(player) then -- Make sure it's a player ==> Don't care for AI players
            _bg_playerData[j] = {};
            _bg_playerData[j].player = player;
            _bg_playerData[j].name = Player_GetDisplayName(player)[1];
            _bg_playerData[j].playerID = Player_GetID(player);
            _bg_playerData[j].squads = {};
            _bg_playerData[j].entities = {};
            _bg_playerData[j].deployed = {};
            j = j + 1;
        end
    end

    -- Load the player companies
    local companyError = BG_LoadCompanies();

    -- Check to see if a company error was found
    if companyError ~= true then
        BG_CreateAndShowMatchError(companyError);
        return;
    end

    -- Verify match validity
    local matchValidity = BG_VerifyMatch();

    -- Did the match validifier fail?
    if matchValidity ~= true then
        BG_CreateAndShowMatchError(matchValidity);
        return;
    end

    -- Activate the unit system
    BG_HookUnitSystem();

    -- Create the UI
    UI_AddSetupFunction(function()
        BG_CreateCallInUI(Game_GetLocalPlayer()); -- Call-in / Deploy UI
        BG_CreateAndDisplayMultiplayerActionsScreenOverride(Game_GetLocalPlayer()); -- Game actions (Vote on withdraw, Surrender)
    end);

    Rule_AddOneShot(dummy_spawn, 5); -- Disable when not testing callin functionality

    -- Add overrides to victory
    Rule_AddOneShot(BG_OverrideGameEndingFunctionCalls, 1);

    -- Hide the CP meter (Perhaps display company name and statistics here...)
    UI_SetCPMeterVisibility(false);

    -- Add the broadcast event callback
    Rule_AddGlobalEvent(BG_GameBroadcastMessageReceived, GE_BroadcastMessage);

end

Scar_AddInit(BG_Init);

function BG_VerifyMatch()

    -- Get the scenario name
    local name = Stats_GetScenarioName();
    if (name ~= bg_settings.map) then
        --return "The played map does not match the selected map!"; -- TODO: Localize
    end

    -- Return true, match verified
    return true;

end

function dummy_spawn()

    -- Test the deploy squad function
    BG_DeploySquad(_bg_playerData[1].player, 0);
    BG_DeploySquad(_bg_playerData[1].player, 1);
    BG_DeploySquad(_bg_playerData[1].player, 2);
    BG_DeploySquad(_bg_playerData[1].player, 3);
    BG_DeploySquad(_bg_playerData[1].player, 4);

end

function BG_GetPlayerID(player)
    for i=1, #_bg_playerData do
        if _bg_playerData[i].player == player then
            return i;
        end
    end
    return -1;
end

function BG_BroadcastVictory(player)
    local refp = BG_GetPlayerID(player);
    if (refp ~= -1) then
        Command_PlayerBroadcastMessage(Game_GetLocalPlayer(), Game_GetLocalPlayer(), _bg_message_type_no_actions_required, "V["..BG_GetPlayerID(player).."]");
    end
end

function BG_OverrideGameEndingFunctionCalls()

    -- Create a backup "pointer" just in case
    BG_WorldSetTeamWin = World_SetTeamWin;

    -- Override the game function (Any call to this)
    World_SetTeamWin = function(team)

        -- Stop the fighting
        BG_StopAll();

        -- Collect end of match data (vet rank, progress etc)
        BG_CollectEndofMatchData();

        -- Broadcast victory for each player
        Team_ForEachPlayer(team, BG_BroadcastVictory);

        -- Create and display gameover message
        BG_CreateAndDisplayGameOverScreenOverride(Game_GetLocalPlayer(), BG_SaveAndExit);

    end

end

function BG_StopAll()

    -- Set global flag
    _bg_matchStopped = true;

    -- TODO: Force-stop fighting

end

function BG_SaveAndExit()

    -- TODO: Experiment with winning - but then force-shutting the game

    -- Quit the game (No rematches --> Let the app handle the rest)
    Game_QuitApp();

end

function BG_PlayerSurrender(player)

    -- The player surrenders
    -- Some % of units are "lost" --> They surrender to the enemy, the rest withdraw safely

end

function BG_TeamWithdraw(player)

    -- The "objective" of the game changes --> The team must withdraw as many units as possible

end

function BG_CollectEndofMatchData()

end

function BG_GameBroadcastMessageReceived(sender, messageType, message)
    if messageType == _bg_message_type_player_deploy then
        BG_DeploySquad(sender, tonumber(message));
    end
end
