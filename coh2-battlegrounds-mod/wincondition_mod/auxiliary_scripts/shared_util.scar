------------------------------------------------------------
-- Math Set Functionality
------------------------------------------------------------
bg_set = {
    from_sgroup = function(self, sgroupTarget)
        local set = {};
        local __sgeach = function(sgroupid, itemindex, squadID)
            table.insert(set, Squad_GetGameID(squadID));
        end
        SGroup_ForEach(sgroupTarget, __sgeach);
        return set;
    end,
    add = function(self, a, e)
        if not self:contains(a, e) then
            table.insert(a, e);
        end
    end,
    union = function(self, a, b)
        local set = {};
        for i=1, #a do
            table.insert(set, a[i]);
        end
        for i=1, #b do
            if not self:contains(set, b[i]) then
                table.insert(set, b[i]);
            end
        end
        return set;
    end,
    intersect = function(self, a, b)
        local set = {};
        for i=1, #a do
            if self:contains(b, a[i]) then
                table.insert(set, a[i]);
            end
        end
        return set;
    end,
    diff = function(self, a, b)
        local set = {};
        for i=1, #a do
            if not self:contains(b, a[i]) then
                table.insert(set, a[i]);
            end
        end
        return set;
    end,
    contains = function(self, set, element)
        for i=1, #set do
            if (set[i] == element) then
                return true;
            end
        end
        return false;
    end,
    select = function(self, set, selector)
        local selected = {};
        for i=1, #set do
            selected[i] = selector(set[i]);
        end
        return selected;
    end,
    size = function(self, set)
        return #set;
    end,
};
------------------------------------------------------------
-- Vector (Position) Functionality
------------------------------------------------------------
vec3funcs = { -- Add additional mutable functions --> Less copy and assignment operations (Could be critial regarding the towing system)
    add = function(self, other)
        return Vec3(self.x + other.x, self.y + other.y, self.z + other.z);
    end,
    sub = function(self, other)
        return Vec3(other.x - self.x, other.y - self.y, other.z - self.z);
    end,
    mul = function(self, v)
        return Vec3(self.x * v, self.y * v, self.z * v);
    end,
    negate = function(self)
        return Vec3(-self.x, -self.y, -self.z);
    end,
    length = function(self)
        return math.sqrt(self.x^2 + self.y^2 + self.z^2);
    end,
    unit = function(self)
        local len = self:length();
        return Vec3(self.x / len, self.y / len, self.z / len);
    end,
    towards = function(self, other, t)
        local lx = math.lerp(self.x, other.x, t);
        local ly = math.lerp(self.y, other.y, t);
        local lz = math.lerp(self.z, other.z, t);
        return Vec3(lx, ly, lz);
    end,
    lookat = function(self, target)
        return self:sub(target);
    end,
    eq = function(self, other)
        return self.x == other.x and self.y == other.y and self.z == other.z;
    end,
    dot = function(self, other)
        return self.x * other.x + self.y * other.y + self.z * other.z;
    end,
    cross = function(self, other)
        local cx = self.y * other.z - self.z * other.y;
        local cy = self.z * other.x - self.x * other.z;
        local cz = self.x * other.y - self.y * other.x;
        return Vec3(cx, cy, cz);
    end,
    toscar = function(self)
        return World_Pos(self.x, self.y, self.z);
    end,
}
function Vec3(_x, _y, _z)
    local vec = Table_Copy(vec3funcs);
    vec.x = _x;
    vec.y = _y;
    vec.z = _z;
    return vec;
end

function Vec3Scar(pos)
    return Vec3(pos.x, pos.y, pos.z);
end
------------------------------------------------------------
-- Lua Helper functions
------------------------------------------------------------

function Table_ContainsAny(table, predicate)
    for k,v in pairs(table) do
        if predicate(v) then
            return true;
        end
    end
    return false;
end

table.pack = function(...)
    local pack = {};
    for i, v in ipairs(arg) do
        pack[i] = v;
    end
    return pack;
end

math.lerp = function(a, b, t)
    return (b - a) * t + a;
end

math.lerpf = function(a,b,t)
    if t > 1.0 then t = 1.0 elseif t < 0.0 then t = 0.0 end
    return math.lerp(a,b,t);
end

math.range = function(min, max, v)
    return math.max(min, math.min(max, v));
end

------------------------------------------------------------
-- SGroup functions
------------------------------------------------------------

function SGroup_FromSquad(squad, temp_name)
    if temp_name == nil then
        temp_name = "sg_temp";
    end
    sg_temp = SGroup_CreateIfNotFound(temp_name);
    SGroup_Clear(sg_temp);
    SGroup_Add(sg_temp, squad);
    return sg_temp;
end

__removewhennear = {}

function SGroup_MoveAndDespawn(squad, pos, callback)

    -- Tell the squad to stop first.
    Cmd_Stop(squad);

    -- Move to the position
    Cmd_Move(squad, pos);

    -- Add to near table
    table.insert(__removewhennear, { target = squad, location = pos, callbackfunc = callback });

    if not Rule_Exists(__SGREMOVE_WHEN_NEAR) then
        Rule_Add(__SGREMOVE_WHEN_NEAR);
    end

end

function __SGREMOVE_WHEN_NEAR()
    if #__removewhennear == 0 then
        Rule_RemoveMe();
    else
        for i=1, #__removewhennear do
            if SGroup_Count(__removewhennear[i].target) == 0 then
                table.remove(__removewhennear, i);
                break;
            else
                if Util_GetDistance(__removewhennear[i].location, SGroup_GetPosition(__removewhennear[i].target)) < 5 then
                    if __removewhennear[i].callbackfunc ~= nil then
                        __removewhennear[i].callbackfunc(__removewhennear[i].target);
                    end
                    SGroup_DestroyAllSquads(__removewhennear[i].target); -- NOTE: We don't despawn, we actually destroy here
                    table.remove(__removewhennear, i);
                    break;
                end
            end
        end
    end
end

------------------------------------------------------------
-- Squad functions
------------------------------------------------------------

function Squad_GetSyncWeapon(squad)
    for i=0, Squad_Count(squad) - 1 do
        local e = Squad_EntityAt(squad, i);
        if (Entity_IsSyncWeapon(e)) then
            return e;
        end
    end
    return nil;
end

function Squad_GetSyncWeaponBlueprint(squad)
    local e = Squad_GetSyncWeapon(squad);
    if e ~= nil then
        return Entity_GetBlueprint(e);
    else
        fatal("Expected team weapon but found other squad type.");
    end
end

function Squad_IsVehicleSquad(squad)
    return Entity_IsVehicle(Squad_EntityAt(squad, 0));
end

function Squad_IsInfantrySquad(squad)
    if Squad_HasTeamWeapon(squad) then
        return false;
    else
        return not Squad_IsVehicleSquad(squad);
    end
end

function Squad_Surrender(squad)
    -- TODO: Implement
end

------------------------------------------------------------
-- Entity functions
------------------------------------------------------------

function Entity_CreateAndSpawn(player, blueprint, position, towards)

    -- If position is nil - use player's starting position
    if position == nil then
        position = Player_GetStartingPosition(player);
    end

    -- If towards is nil - use position + some
    if towards == nil then
        towards = Vec3Scar(position):add(Vec3(1,0,0)):toscar();
    end

    -- Create entity
    local e = Entity_Create(blueprint, player, position, towards );

    -- Spawn the entity
    Entity_Spawn(e);

    -- Return entity
    return e;

end

------------------------------------------------------------
-- LocString functions
------------------------------------------------------------

function Util_CreateLocString(text)
	local tmpstr = LOC(text)
	tmpstr[1] = text
	return tmpstr
end

function BG_LocString(locID)
    return "$" .. _bg_guid .. ":" .. locID;
end

function BG_LocStringFormat(locID, arg1, arg2, arg3, arg4)
    if arg2 == nil then
        return Loc_FormatText("$" .. _bg_guid .. ":" .. locID, arg1)[1];
    elseif arg3 == nil then
        return Loc_FormatText("$" .. _bg_guid .. ":" .. locID, arg1, arg2)[1];
    elseif arg4 == nil then
        return Loc_FormatText("$" .. _bg_guid .. ":" .. locID, arg1, arg2, arg3)[1];
    else
        return Loc_FormatText("$" .. _bg_guid .. ":" .. locID, arg1, arg2, arg3, arg4)[1];
    end
end

------------------------------------------------------------
-- Player functions
------------------------------------------------------------

___mapentrypoints = {}
function BG_UTIL_collect_map_entries()
    local bp_mapentry1 = BP_GetEntityBlueprint("map_entry_point");
    local bp_mapentry2 = BP_GetEntityBlueprint("map_entry_point_player");
    for i = 0, World_GetNumEntities() - 1 do
        local entity = World_GetEntity(i);
        local ebp = Entity_GetBlueprint(entity);
        if (ebp == bp_mapentry1 or ebp == bp_mapentry2) then
            table.insert(___mapentrypoints, { pos = Entity_GetPosition(entity), owner = Entity_GetPlayerOwner(entity) });
        end
    end
end

function Player_GetNearestMapEntry(player, refpoint)
    if (#___mapentrypoints == 0) then
        BG_UTIL_collect_map_entries();
    end
    local available = {};
    for i=1, #___mapentrypoints do
        if Player_GetRelationship(player, ___mapentrypoints[i].owner) ~= R_ENEMY then
            table.insert(available, ___mapentrypoints[i].pos);
        end
    end
    local j = 1;
    for i=1, #available do
        if (Util_GetDistance(refpoint, available[i] ) < Util_GetDistance(refpoint, available[j] )) then
            j = i;
        end
    end
    return available[j];
end

function Player_CallLocal(player, func)
    for i=1, World_GetPlayerCount() do
        if (World_GetPlayerAt(i) == player) then
            func(player);
        end
    end
end

function Player_ChangeResources(player, man, mun, ful)
    if man ~= 0 then
        Player_SetResource(player, RT_Manpower, Player_GetResource(player, RT_Manpower) + man );
    end
    if mun ~= 0 then
        Player_SetResource(player, RT_Munition, Player_GetResource(player, RT_Munition) + mun );
    end
    if ful ~= 0 then
        Player_SetResource(player, RT_Fuel, Player_GetResource(player, RT_Fuel) + ful );
    end
end

function Player_CanBuy(player, man, mun, ful)
    return Player_GetResource(player, RT_Manpower) >= man and Player_GetResource(player, RT_Munition) >= mun and Player_GetResource(player, RT_Fuel) >= ful;
end

function Player_LoopSquadsWhile(player, squadFunc, condition)

    local playerSquads = Player_GetSquads(player);
    local count = SGroup_CountSpawned(playerSquads);
    local i = 1;

    if condition == nil then
        condition = function() return true end;
    end

    while condition() and i < count do
        squadFunc(SGroup_GetSpawnedSquadAt(playerSquads, i), i, count);
        i = i + 1;
    end

end

------------------------------------------------------------
-- Team functions
------------------------------------------------------------

function Team_ForEachPlayer(team, func)
    if team >= 2 then
        fatal("Invalid team index '" .. team .. "' expected 0 or 1.");
    end
    for i=1, World_GetPlayerCount() do
        local p = World_GetPlayerAt(i);
        if (Player_GetTeam(p) == team) then
            func(p);
        end
    end
end

function Team_GetOppositeTeam(team)
    if team == 1 then
        return 0;
    else
        return 1;
    end
end

function Team_GetSize(team)
    local count = 0;
    for i = 1, World_GetPlayerCount() do
        if Player_GetTeam(World_GetPlayerAt(i)) == team then
            count = count + 1;
        end
    end
    return count;
end

------------------------------------------------------------
-- String functions
------------------------------------------------------------
function Str_CmdParse(str)
    local t_result = {};
    for w in string.gmatch(str, "([%w-_]+)") do
        table.insert(t_result, w);
    end
    return t_result;
end

------------------------------------------------------------
-- Game functions
------------------------------------------------------------
function Game_SendMessage(msgType, msg)
    Command_PlayerBroadcastMessage(Game_GetLocalPlayer(), Game_GetLocalPlayer(), msgType, msg);
end

-- Dumps the type of the object. This is purely for debugging purposes
function Util_DumpObjectType(obj)
	if (obj == nil) then
		return;
	end
	local typeOfObject = scartype(obj);
	local resultOfOperation = "";
	if (typeOfObject == ST_UNKNOWN) then
		resultOfOperation = "Unkown";
	elseif (typeOfObject == ST_TABLE) then
		resultOfOperation = "Table (" .. #obj .. ")";
	elseif (typeOfObject == ST_STRING) then
		resultOfOperation = "String";
	elseif (typeOfObject == ST_SQUAD) then
		resultOfOperation = "Squad";
	elseif (typeOfObject == ST_SGROUP) then
		resultOfOperation = "SGroup";
	elseif (typeOfObject == ST_SCARPOS) then
		resultOfOperation = "Pos";
	elseif (typeOfObject == ST_PLAYER) then
		resultOfOperation = "Player";
	elseif (typeOfObject == ST_PBG) then
		resultOfOperation = "PBG (Blueprint)";
	elseif (typeOfObject == ST_MARKER) then
		resultOfOperation = "Marker";
	elseif (typeOfObject == ST_FUNCTION) then
		resultOfOperation = "Function";
	elseif (typeOfObject == ST_ENTITY) then
		resultOfOperation = "Entity";
	elseif (typeOfObject == ST_EGROUP) then
		resultOfOperation = "EGroup";
	elseif (typeOfObject == ST_CONSTPLAYER) then
		resultOfOperation = "ConstPlayer";
	elseif (typeOfObject == ST_BOOL) then
		resultOfOperation = "Bool";
	elseif (typeOfObject == ST_NUMBER) then
		resultOfOperation = "Number";
	end
	return resultOfOperation;
end

------------------------------------------------------------
-- Battlegrounds helper functions
------------------------------------------------------------
function Battlegrounds_FormatResources(cost, negate)
    local mp = cost.manpower or 0;
    local mu = cost.munitions or 0;
    local fu = cost.fuel or 0;
    if (negate) then
        mp = -mp;
        mu = -mu;
        fu = -fu;
    end
    return tostring(mp)..","..tostring(mu)..","..tostring(fu);
end

_bg_logid = 0;
function Battlegrounds_LogEvent(msgtype, type, value, player)
    if msgtype == nil then
        msgtype = _bg_message_type_no_actions_required;
    end
    if _bg_logs[type] ~= nil then
        type = _bg_logs[type]; -- Put the proper message
    end
    if player == nil then
        player = Game_GetLocalPlayer();
    end
    local pdata = BG_GetPlayerData(player);
    local str = type .. "[" .. value .. "]#".._bg_logid.."@" .. pdata.steamID;
    _bg_logid = _bg_logid + 1;
    Game_SendMessage(msgtype, str);
end
